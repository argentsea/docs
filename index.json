{
  "api/ArgentSea.Mapper.DummyType.html": {
    "href": "api/ArgentSea.Mapper.DummyType.html",
    "title": "Class Mapper.DummyType | ArgentSea Docs",
    "keywords": "Class Mapper.DummyType Inheritance System.Object Mapper.DummyType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DummyType"
  },
  "api-pg/ArgentSea.Pg.PgParameterCollectionExtensions.html": {
    "href": "api-pg/ArgentSea.Pg.PgParameterCollectionExtensions.html",
    "title": "Class PgParameterCollectionExtensions | ArgentSea Docs",
    "keywords": "Class PgParameterCollectionExtensions This class adds extension methods which simplify setting PostgreSQL parameter values from .NET types. Inheritance System.Object PgParameterCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public static class PgParameterCollectionExtensions Methods | Improve this Doc View Source AddPgArrayInputParameter(DbParameterCollection, String, Array, NpgsqlDbType) Creates a parameter for providing a variable-sized byte array to a stored procedure. A null reference will save DBNull. Declaration public static DbParameterCollection AddPgArrayInputParameter(this DbParameterCollection prms, string parameterName, Array value, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Array value An array, or null. NpgsqlTypes.NpgsqlDbType npgsqlDbType Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgArrayOutputParameter(DbParameterCollection, String, NpgsqlDbType) Creates a parameter for obtaining a variable-sized byte array from a stored procedure. Declaration public static DbParameterCollection AddPgArrayOutputParameter(this DbParameterCollection prms, string parameterName, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. NpgsqlTypes.NpgsqlDbType npgsqlDbType Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBigintInputParameter(DbParameterCollection, String, Int64) Creates a parameter for providing a 64-bit signed integer (long) to a stored procedure. Declaration public static DbParameterCollection AddPgBigintInputParameter(this DbParameterCollection prms, string parameterName, long value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int64 value A 64-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBigintInputParameter(DbParameterCollection, String, Nullable<Int64>) Creates a parameter for providing a 64-bit signed integer (long) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgBigintInputParameter(this DbParameterCollection prms, string parameterName, long? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Int64 > value A 64-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBigintOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 64-bit signed integer (long) from a stored procedure. Declaration public static DbParameterCollection AddPgBigintOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBooleanInputParameter(DbParameterCollection, String, Boolean) Creates a parameter for providing a boolean value (bool) to a stored procedure. Declaration public static DbParameterCollection AddPgBooleanInputParameter(this DbParameterCollection prms, string parameterName, bool value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Boolean value A boolean value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBooleanInputParameter(DbParameterCollection, String, Nullable<Boolean>) Creates a parameter for providing a boolean value (bool) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgBooleanInputParameter(this DbParameterCollection prms, string parameterName, bool? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Boolean > value A boolean value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgBooleanOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a boolean value (bool) from a stored procedure. Declaration public static DbParameterCollection AddPgBooleanOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgByteaInputParameter(DbParameterCollection, String, Byte[], Int32) Creates a parameter for providing a variable-sized byte array to a stored procedure. A null reference will save DBNull. Declaration public static DbParameterCollection AddPgByteaInputParameter(this DbParameterCollection prms, string parameterName, byte[] value, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Byte [] value An array of bytes, or null. System.Int32 length The maximum allowable number of bytes in the database column. Use -1 for varbinary(max). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgByteaOutputParameter(DbParameterCollection, String, Int32) Creates a parameter for obtaining a variable-sized byte array from a stored procedure. Declaration public static DbParameterCollection AddPgByteaOutputParameter(this DbParameterCollection prms, string parameterName, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int32 length The maximum allowable number of bytes in the database column. Use -1 for varbinary(max). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgCharInputParameter(DbParameterCollection, String, String, Int32) Creates parameter for providing a fixed-length string or a DBNull value to a stored procedure. Declaration public static DbParameterCollection AddPgCharInputParameter(this DbParameterCollection prms, string parameterName, string value, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgCharOutputParameter(DbParameterCollection, String, Int32) Creates parameter for obtaining a fixed-length string from a stored procedure. Declaration public static DbParameterCollection AddPgCharOutputParameter(this DbParameterCollection prms, string parameterName, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDateInputParameter(DbParameterCollection, String, DateTime) Creates a parameter for providing a date (sans time) to a stored procedure. Declaration public static DbParameterCollection AddPgDateInputParameter(this DbParameterCollection prms, string parameterName, DateTime value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.DateTime value A DateTime value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDateInputParameter(DbParameterCollection, String, Nullable<DateTime>) Creates a parameter for providing a date (sans time) or DbNull to a stored procedure. Declaration public static DbParameterCollection AddPgDateInputParameter(this DbParameterCollection prms, string parameterName, DateTime? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.DateTime > value A DateTime value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDateOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a date (sans time) from a stored procedure. Declaration public static DbParameterCollection AddPgDateOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDoubleInputParameter(DbParameterCollection, String, Double) Creates a parameter for providing a 64-bit floating-point value (double) to a stored procedure. NaN will be converted to DbNull. Declaration public static DbParameterCollection AddPgDoubleInputParameter(this DbParameterCollection prms, string parameterName, double value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Double value A 64-bit floating-point value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDoubleInputParameter(DbParameterCollection, String, Nullable<Double>) Creates a parameter for providing a 64-bit floating-point value (double) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgDoubleInputParameter(this DbParameterCollection prms, string parameterName, double? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Double > value A 64-bit floating-point value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgDoubleOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 64-bit floating-point value (double) from a stored procedure. Declaration public static DbParameterCollection AddPgDoubleOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgHstoreInputParameter(DbParameterCollection, String, IDictionary<String, String>) Creates a parameter for providing a variable-sized byte array to a stored procedure. A null reference will save DBNull. Declaration public static DbParameterCollection AddPgHstoreInputParameter(this DbParameterCollection prms, string parameterName, IDictionary<string, string> value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Collections.Generic.IDictionary < System.String , System.String > value An array of bytes, or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgHstoreOutputParameter(DbParameterCollection, String) Creates a parameter for obtaining a variable-sized byte array from a stored procedure. Declaration public static DbParameterCollection AddPgHstoreOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntegerInputParameter(DbParameterCollection, String, Int32) Creates a parameter for providing a 32-bit signed integer (int) to a stored procedure. Declaration public static DbParameterCollection AddPgIntegerInputParameter(this DbParameterCollection prms, string parameterName, int value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int32 value A 32-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntegerInputParameter(DbParameterCollection, String, Nullable<Int32>) Creates a parameter for providing a 32-bit signed integer (int) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgIntegerInputParameter(this DbParameterCollection prms, string parameterName, int? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Int32 > value A 32-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntegerOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (int) from a stored procedure. Declaration public static DbParameterCollection AddPgIntegerOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgInternalCharInputParameter(DbParameterCollection, String, Byte) Creates a parameter for providing a 8-bit unsigned integer (byte) to a stored procedure. Declaration public static DbParameterCollection AddPgInternalCharInputParameter(this DbParameterCollection prms, string parameterName, byte value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Byte value An unsigned 8-bit integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgInternalCharInputParameter(DbParameterCollection, String, Nullable<Byte>) Creates a parameter for providing a 8-bit unsigned integer (byte) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgInternalCharInputParameter(this DbParameterCollection prms, string parameterName, byte? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Byte > value An unsigned 8-bit integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgInternalCharOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (byte) from a stored procedure. Declaration public static DbParameterCollection AddPgInternalCharOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntervalInputParameter(DbParameterCollection, String, Nullable<TimeSpan>) Creates a parameter for providing a time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgIntervalInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.TimeSpan > value A time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntervalInputParameter(DbParameterCollection, String, TimeSpan) Creates a parameter for providing a time value to a stored procedure. Declaration public static DbParameterCollection AddPgIntervalInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.TimeSpan value A time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgIntervalOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a time value from a stored procedure. Declaration public static DbParameterCollection AddPgIntervalOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgMoneyInputParameter(DbParameterCollection, String, Decimal) Creates a parameter for providing a decmial value to a stored procedure. Declaration public static DbParameterCollection AddPgMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Decimal value A decmial value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgMoneyInputParameter(DbParameterCollection, String, Nullable<Decimal>) Creates a parameter for providing a decmial value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Decimal > value A decmial value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgMoneyOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a decmial value from a stored procedure. Declaration public static DbParameterCollection AddPgMoneyOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgNumericInputParameter(DbParameterCollection, String, Decimal, Byte, Byte) Creates a parameter for providing a decmial value to a stored procedure. Declaration public static DbParameterCollection AddPgNumericInputParameter(this DbParameterCollection prms, string parameterName, decimal value, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Decimal value A decmial value . System.Byte precision System.Byte scale Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgNumericInputParameter(DbParameterCollection, String, Nullable<Decimal>, Byte, Byte) Creates a parameter for providing a decmial value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgNumericInputParameter(this DbParameterCollection prms, string parameterName, decimal? value, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Decimal > value A decmial value or null. System.Byte precision System.Byte scale Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgNumericOutputParameter(DbParameterCollection, String, Byte, Byte) Creates an output parameter for retrieving a decmial value from a stored procedure. Declaration public static DbParameterCollection AddPgNumericOutputParameter(this DbParameterCollection prms, string parameterName, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Byte precision Specifies the maximum number of digits used to store the number (inclusive of both sides of the decimal point). System.Byte scale Specifies the number of digits used in the fractional portion of the number (i.e. digits to the right of the decimal point). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgRealInputParameter(DbParameterCollection, String, Nullable<Single>) Creates a parameter for providing a 32-bit floating-point value (float) or DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgRealInputParameter(this DbParameterCollection prms, string parameterName, float? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Single > value A 32-bit floating point value (float) or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgRealInputParameter(DbParameterCollection, String, Single) Creates a parameter for providing a 32-bit floating-point value (float) to a stored procedure. NaN will be converted to DbNull. Declaration public static DbParameterCollection AddPgRealInputParameter(this DbParameterCollection prms, string parameterName, float value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Single value A 32-bit floating point value (float). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgRealOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit floating-point value (float) from a stored procedure. Declaration public static DbParameterCollection AddPgRealOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgSmallintInputParameter(DbParameterCollection, String, Int16) Creates a parameter for providing a 16-bit signed integer (short) to a stored procedure. Declaration public static DbParameterCollection AddPgSmallintInputParameter(this DbParameterCollection prms, string parameterName, short value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int16 value A 16-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgSmallintInputParameter(DbParameterCollection, String, Nullable<Int16>) Creates a parameter for providing a 16-bit signed integer (short) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgSmallintInputParameter(this DbParameterCollection prms, string parameterName, short? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Int16 > value A 16-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgSmallintOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (short) from a stored procedure. Declaration public static DbParameterCollection AddPgSmallintOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTextInputParameter(DbParameterCollection, String, String) Creates parameter for providing a string or a DBNull value to a stored procedure, which is converted to the target ANSI code page (if possible). Declaration public static DbParameterCollection AddPgTextInputParameter(this DbParameterCollection prms, string parameterName, string value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTextOutputParameter(DbParameterCollection, String) Creates parameter for obtaining a string from a stored procedure, which has been converted from the source ANSI code page. Declaration public static DbParameterCollection AddPgTextOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeInputParameter(DbParameterCollection, String, Nullable<TimeSpan>) Creates a parameter for providing a time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.TimeSpan > value A time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeInputParameter(DbParameterCollection, String, TimeSpan) Creates a parameter for providing a time value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.TimeSpan value A time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a time value from a stored procedure. Declaration public static DbParameterCollection AddPgTimeOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampInputParameter(DbParameterCollection, String, DateTime) Creates a parameter for providing a date and time value to a stored procedure. Declaration public static DbParameterCollection AddPgTimestampInputParameter(this DbParameterCollection prms, string parameterName, DateTime value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.DateTime value A date and time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampInputParameter(DbParameterCollection, String, Nullable<DateTime>) Creates a parameter for providing a date and time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgTimestampInputParameter(this DbParameterCollection prms, string parameterName, DateTime? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.DateTime > value A date and time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a date and time value from a stored procedure. Declaration public static DbParameterCollection AddPgTimestampOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampTZInputParameter(DbParameterCollection, String, DateTimeOffset) Creates a parameter for providing a DateTimeOffset value to a stored procedure. Declaration public static DbParameterCollection AddPgTimestampTZInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.DateTimeOffset value A DateTimeOffset value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampTzInputParameter(DbParameterCollection, String, Nullable<DateTimeOffset>) Creates a parameter for providing a DateTimeOffset or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgTimestampTzInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.DateTimeOffset > value A DateTimeOffset value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimestampTzOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a DateTimeOffset from a stored procedure. Declaration public static DbParameterCollection AddPgTimestampTzOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeTzInputParameter(DbParameterCollection, String, DateTimeOffset) Creates a parameter for providing a time value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeTzInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.DateTimeOffset value A time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeTzInputParameter(DbParameterCollection, String, Nullable<DateTimeOffset>) Creates a parameter for providing a time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeTzInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.DateTimeOffset > value A time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeTzInputParameter(DbParameterCollection, String, Nullable<TimeSpan>) Creates a parameter for providing a time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeTzInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.TimeSpan > value A time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeTzInputParameter(DbParameterCollection, String, TimeSpan) Creates a parameter for providing a time value to a stored procedure. Declaration public static DbParameterCollection AddPgTimeTzInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.TimeSpan value A time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgTimeTzOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a time value from a stored procedure. Declaration public static DbParameterCollection AddPgTimeTzOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgUuidInputParameter(DbParameterCollection, String, Guid) Creates a parameter for providing a Guid or DBNull (via Guid.Empty) to a stored procedure. Declaration public static DbParameterCollection AddPgUuidInputParameter(this DbParameterCollection prms, string parameterName, Guid value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Guid value A Guid value. Will convert Guild.Empty to DBNull. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgUuidInputParameter(DbParameterCollection, String, Nullable<Guid>) Creates a parameter for providing a Guid or DBNull (via null value) to a stored procedure. Declaration public static DbParameterCollection AddPgUuidInputParameter(this DbParameterCollection prms, string parameterName, Guid? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Nullable < System.Guid > value Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgUuidOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a Guid from a stored procedure. Declaration public static DbParameterCollection AddPgUuidOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgVarcharInputParameter(DbParameterCollection, String, String, Int32) Creates parameter for providing a string or a DBNull value to a stored procedure. Declaration public static DbParameterCollection AddPgVarcharInputParameter(this DbParameterCollection prms, string parameterName, string value, int maxLength) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 maxLength This should match the size of the parameter, not the size of the input string (and certainly not the number of bytes). For nvarchar(max) parameters, specify -1. Setting the value correctly will help avoid plan cache pollution (when not using stored procedures) and minimize memory buffer allocations. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddPgVarcharOutputParameter(DbParameterCollection, String, Int32) Creates parameter for obtaining a string from a stored procedure. Declaration public static DbParameterCollection AddPgVarcharOutputParameter(this DbParameterCollection prms, string parameterName, int maxLength) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “:”, it will be automatically pre-pended. System.Int32 maxLength Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended."
  },
  "api-pg/ArgentSea.Pg.PgParameterExtensions.html": {
    "href": "api-pg/ArgentSea.Pg.PgParameterExtensions.html",
    "title": "Class PgParameterExtensions | ArgentSea Docs",
    "keywords": "Class PgParameterExtensions Inheritance System.Object PgParameterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public static class PgParameterExtensions Methods | Improve this Doc View Source GetArray<T>(DbParameter) Gets an array from the output parameter, or null if the parameter value is DbNull. Declaration public static T[] GetArray<T>(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description T[] The parameter value as a typed array. Type Parameters Name Description T | Improve this Doc View Source GetHStore(DbParameter) Gets an array from the output parameter, or null if the parameter value is DbNull. Declaration public static IDictionary<string, string> GetHStore(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > The parameter value as a typed array."
  },
  "api-pg/ArgentSea.Pg.Test.ConfigurationTests.html": {
    "href": "api-pg/ArgentSea.Pg.Test.ConfigurationTests.html",
    "title": "Class ConfigurationTests | ArgentSea Docs",
    "keywords": "Class ConfigurationTests Inheritance System.Object ConfigurationTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg.Test Assembly : ArgentSea.Pg.Test.dll Syntax public class ConfigurationTests Methods | Improve this Doc View Source TestConfigurationOptions() Declaration [Fact] public void TestConfigurationOptions() | Improve this Doc View Source TestServiceBuilder() Declaration [Fact] public void TestServiceBuilder()"
  },
  "api-pg/ArgentSea.Pg.Test.MappingTests.html": {
    "href": "api-pg/ArgentSea.Pg.Test.MappingTests.html",
    "title": "Class MappingTests | ArgentSea Docs",
    "keywords": "Class MappingTests Inheritance System.Object MappingTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg.Test Assembly : ArgentSea.Pg.Test.dll Syntax public class MappingTests Methods | Improve this Doc View Source ValidateInParameterMapper() Declaration [Fact] public void ValidateInParameterMapper() | Improve this Doc View Source ValidateInParameterNullMapper() Declaration [Fact] public void ValidateInParameterNullMapper() | Improve this Doc View Source ValidateNullSqlDataReader() Declaration [Fact] public void ValidateNullSqlDataReader() | Improve this Doc View Source ValidateOutNullParameterReader() Declaration [Fact] public void ValidateOutNullParameterReader() | Improve this Doc View Source ValidateOutParameterCreator() Declaration [Fact] public void ValidateOutParameterCreator() | Improve this Doc View Source ValidateOutParameterReader() Declaration [Fact] public void ValidateOutParameterReader() | Improve this Doc View Source ValidateSqlDataReader() Declaration [Fact] public void ValidateSqlDataReader()"
  },
  "api/ArgentSea.IConnectionConfiguration.html": {
    "href": "api/ArgentSea.IConnectionConfiguration.html",
    "title": "Interface IConnectionConfiguration | ArgentSea Docs",
    "keywords": "Interface IConnectionConfiguration This interface is used by provider specific implementations. It is unlikely that you would reference this in consumer code. The interface defines the minimum capability of a connection definition. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IConnectionConfiguration Properties | Improve this Doc View Source ConnectionDescription Declaration string ConnectionDescription { get; } Property Value Type Description System.String | Improve this Doc View Source ResilienceKey Declaration string ResilienceKey { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetConnectionString() Declaration string GetConnectionString() Returns Type Description System.String | Improve this Doc View Source SetConfigurationOptions(DataSecurityOptions, DataResilienceOptions) Declaration void SetConfigurationOptions(DataSecurityOptions securityOptions, DataResilienceOptions resilienceStrategiesOptions) Parameters Type Name Description DataSecurityOptions securityOptions DataResilienceOptions resilienceStrategiesOptions"
  },
  "api/ArgentSea.IDatabaseConfigurationOptions.html": {
    "href": "api/ArgentSea.IDatabaseConfigurationOptions.html",
    "title": "Interface IDatabaseConfigurationOptions | ArgentSea Docs",
    "keywords": "Interface IDatabaseConfigurationOptions This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IDatabaseConfigurationOptions Properties | Improve this Doc View Source DbConnectionsInternal Declaration IDatabaseConnectionConfiguration[] DbConnectionsInternal { get; } Property Value Type Description IDatabaseConnectionConfiguration []"
  },
  "api/ArgentSea.SecurityConfiguration.html": {
    "href": "api/ArgentSea.SecurityConfiguration.html",
    "title": "Class SecurityConfiguration | ArgentSea Docs",
    "keywords": "Class SecurityConfiguration This class represents data security information, with a key that can be reference by any connection(s) that share the security information. Inheritance System.Object SecurityConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class SecurityConfiguration Properties | Improve this Doc View Source Password Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source SecurityKey Used by data connection classes to identify the corresponding security information. Declaration public string SecurityKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserName Declaration public string UserName { get; set; } Property Value Type Description System.String | Improve this Doc View Source WindowsAuth Declaration public bool WindowsAuth { get; set; } Property Value Type Description System.Boolean"
  },
  "api/ArgentSea.Test.StringExtensionTests.html": {
    "href": "api/ArgentSea.Test.StringExtensionTests.html",
    "title": "Class StringExtensionTests | ArgentSea Docs",
    "keywords": "Class StringExtensionTests Inheritance System.Object StringExtensionTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Test Assembly : ArgentSea.Test.dll Syntax public class StringExtensionTests Methods | Improve this Doc View Source TestEmojiLineStringCleaning() Declaration [Fact] public void TestEmojiLineStringCleaning() | Improve this Doc View Source TestEmojiTwoLineEndStringCleaning() Declaration [Fact] public void TestEmojiTwoLineEndStringCleaning() | Improve this Doc View Source TestNormalStringCleaning() Declaration [Fact] public void TestNormalStringCleaning() | Improve this Doc View Source TestNornalEmojiStringCleaning() Declaration [Fact] public void TestNornalEmojiStringCleaning() | Improve this Doc View Source TestTwoLineEmojiStringCleaning() Declaration [Fact] public void TestTwoLineEmojiStringCleaning() | Improve this Doc View Source TestWhitespaceStringCleaning() Declaration [Fact] public void TestWhitespaceStringCleaning()"
  },
  "api/ArgentSea.Test.html": {
    "href": "api/ArgentSea.Test.html",
    "title": "Namespace ArgentSea.Test | ArgentSea Docs",
    "keywords": "Namespace ArgentSea.Test Classes ShardSerializationTests StringExtensionTests"
  },
  "api-sql/ArgentSea.Sql.Test.ConfigurationTests.html": {
    "href": "api-sql/ArgentSea.Sql.Test.ConfigurationTests.html",
    "title": "Class ConfigurationTests | ArgentSea Docs",
    "keywords": "Class ConfigurationTests Inheritance System.Object ConfigurationTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql.Test Assembly : ArgentSea.Sql.Test.dll Syntax public class ConfigurationTests Methods | Improve this Doc View Source TestConfigurationOptions() Declaration [Fact] public void TestConfigurationOptions() | Improve this Doc View Source TestServiceBuilder() Declaration [Fact] public void TestServiceBuilder()"
  },
  "api-sql/ArgentSea.Sql.Test.MappingTests.html": {
    "href": "api-sql/ArgentSea.Sql.Test.MappingTests.html",
    "title": "Class MappingTests | ArgentSea Docs",
    "keywords": "Class MappingTests Inheritance System.Object MappingTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql.Test Assembly : ArgentSea.Sql.Test.dll Syntax public class MappingTests Methods | Improve this Doc View Source ValidateInParameterMapper() Declaration [Fact] public void ValidateInParameterMapper() | Improve this Doc View Source ValidateInParameterNullMapper() Declaration [Fact] public void ValidateInParameterNullMapper() | Improve this Doc View Source ValidateNullSqlDataReader() Declaration [Fact] public void ValidateNullSqlDataReader() | Improve this Doc View Source ValidateOutNullParameterReader() Declaration [Fact] public void ValidateOutNullParameterReader() | Improve this Doc View Source ValidateOutParameterCreator() Declaration [Fact] public void ValidateOutParameterCreator() | Improve this Doc View Source ValidateOutParameterReader() Declaration [Fact] public void ValidateOutParameterReader() | Improve this Doc View Source ValidateSqlDataReader() Declaration [Fact] public void ValidateSqlDataReader() | Improve this Doc View Source ValidateSqlMetadataMapper() Declaration [Fact] public void ValidateSqlMetadataMapper() | Improve this Doc View Source ValidateSqlMetadataNullMapper() Declaration [Fact] public void ValidateSqlMetadataNullMapper()"
  },
  "api-sql/ArgentSea.Sql.Test.html": {
    "href": "api-sql/ArgentSea.Sql.Test.html",
    "title": "Namespace ArgentSea.Sql.Test | ArgentSea Docs",
    "keywords": "Namespace ArgentSea.Sql.Test Classes ConfigurationTests MappingTests"
  },
  "documentation/faqs.html": {
    "href": "documentation/faqs.html",
    "title": "Frequently Asked Questions | ArgentSea Docs",
    "keywords": "Frequently Asked Questions Q: What happens if ArgentSea isn’t flexible enough to do what I need it to do? A: ArgentSea is a simple layer over ADO.Net. You can easily amend its functionality by simply coding your unique requirements directly in ADO.Net (as you would have done without the framework). For example, if you are using the Mapper and the model attributes add a database parameter that you don’t want; just remove the parameter after calling the mapper! Or set the parameters yourself. Setting parameters, invoking queries, and collecting results are all separate processes, so you can skip any one that has unique requirements, and still use any of the others. You can, for example, create parameters using the Mapper and invoke a query using your own Command object. Q: Can I combine the PostgreSQL and SQL Server implementations? Nope. A review of the effort involved in enabling both platforms in the same project indicates that the effort to support this exceeds the potential value. If you disagree with this conclusion, sending a note describing the value in your implementation. (The first obstacle is that Mapper does not know which provider will eventually execute the parameters it creates, so if it encountered multiple attributes referencing different providers, it would not know which to use; the other problem is that we would have to separately the function delegates from each provider. Both concerns might be surmountable, but they would add considerable complexity). Q: Why is an approach that exclusively uses stored procedures better? A: Stored procedures offer performance, manageability, and security benefits. Stored procedures do not require the database engine to parse your SQL string, so this can have a performance benefit. In most cases, the benefit is very small, however SQL Server’s compiled procedures offer a potentially dramatic improvement. If your application only has EXECUTE permission to stored procedures, then it becomes possible for DBA to comprehensively determine which tables/views/columns are access by the application. Knowing this allows the database to be refactored and improved much less concern about unintended consequences. With dynamic SQL, DBAs must resort to traces or logs to see what activity is being performed, which makes troubleshooting much harder. When a bad SQL plan is uncovered, the fix can be even harder. Stored procedures, on the other hand, allow the DBA to hint, rewrite, and optimize as necessary. Finally, stored procedures allow DBAs (or data access SMEs) to review and approve data access code changes, also to ensure that indexes exist to support the new queries. Q: How can I make sure that my data is secure? A: Start by hiring an knowledgeable DBA. ArgentSea helps in a few additional ways: ArgentSea’s configuration design helps protect against unsafe storage of login passwords within connection strings. Because it uses stored procedures, users cannot run arbitrary SQL statements. This reduces the opportunity for mistaken SQL statements that corrupt data, SQL injection attacks, and data operations to which the DBAs do not have visibility. Because you can run your application with only EXECUTE permissions, no user would have access to operations that are not explicitly enabled by a procedure."
  },
  "tutorials/mapping.html": {
    "href": "tutorials/mapping.html",
    "title": "Mapping Deep-Dive | ArgentSea Docs",
    "keywords": "Mapping Deep-Dive The Mapper make data-access coding simpler and more productive by using property attributes to map a model class’s properties to data values — parameters, reader columns, and (in the case of SQL Server) table-value parameters. This reduces and simplifies the amount of code required to render data. Overview Using the Mapper consists of two parts, which should be familiar from other scenarios: Use property attributes to define how each property in your model class should be mapped to a data store (if at all) Call a method to which uses data results and the attribute metadata to populate the properties By defining metadata about the names of parameters or result columns, the Mapper can automatically map properties to columns and/or parameters. Several query methods on both Database connections and ShardSets implicitly use the Mapper. Property Attributes You use properties attributes to define the metadata that the Mapper requires. For example, given this very simple model class: using System; public class Subscriber { public int SubscriberId { get; set; } public string Name { get; set; } public DateTime Expiration { get; set; } } Adding mapping attributes to this class provides the metadata to automatically map these properties to stored procedures: SQL Server PostgreSQL using System; using ArgentSea.Sql; public class Subscriber { [MapToSqlInt(\"@SubID\", true)] public int SubscriberId { get; set; } [MapToSqlNVarChar(\"@SubscriberName\", 255)] public string Name { get; set; } [MapToSqlDateTime2(\"@EndDate\")] public DateTime Expiration { get; set; } } The “@” parameter prefix is optional — ArgentSea will add the “@” automatically for parameters and remove it automatically when reading data reader rows. using System; using ArgentSea.Pg; public class Subscriber { [MapToPgInteger(\"SubId\", true)] public int SubscriberId { get; set; } [MapToPgVarChar(\"SubscriberName\", 255)] public string Name { get; set; } [MapToPgTimestamp(\"EndDate\")] public DateTime Expiration { get; set; } } Often, due to different naming conventions or development drift, database column names and the corresponding .NET properties names do not match. That is why every attribute requires a “name” argument — which should correspond to the database name. The Mapper will create query parameters and reference DataReader columns based on this name. Important Database parameters and columns should be named as consistently as possible. In most cases, this means the parameters have the same name as the columns they reference. If you like to use varying parameter names or alias columns in your result, you will find the Mapper unhelpful. Properties without a mapping attribute are simply ignored. Attribute Types A mapping attribute is defined for most common database types. Attributes for spatial data types, CLR types, XML, and JSON types (for example) are missing because there is no straightforward mapping between the core .NET base types and these database types. ArgentSea supports writing a custom handler to render any of these complex types; such work is no more difficult than writing the same processing in ADO.NET. The attribute itself defines the underlying database type. Naturally, the attribute type and the property type must match. For example, a long (Int64) property must map to a bigint database type. The Mapper will throw an error if these types do not match. There is no attempt to cast data to a different type, even if the cast would be successful. Many data attribute types have an additional parameters. The length argument, for example, on string and array types, helps optimize data access performance by ensuring that buffers are sized appropriately. Here is catalog of the current attributes, along with their arguments and corresponding .NET types: SQL Server PostgreSQL Attribute Arguments .NET types SqlType MapToSqlNVarCharAttribute length¹ String, Enum², Nullable<Enum> NVarChar MapToSqlNCharAttribute length String, Enum², Nullable<Enum> NChar MapToSqlVarCharAttribute length¹, localeid³ String, Enum², Nullable<Enum> VarChar MapToSqlCharAttribute length, localeid³ String, Enum², Nullable<Enum> Char MapToSqlBigIntAttribute Int64, Enum⁴, Nullable<Int64>, Nullable<Enum> BigInt MapToSqlIntAttribute Int32, Enum⁴, Nullable<Int32>, Nullable<Enum> Int MapToSqlSmallIntAttribute Int16, Enum⁴, Nullable<Int16>, Nullable<Enum> SmallInt MapToSqlTinyIntAttribute Byte, Enum⁴, Nullable<Byte>, Nullable<Enum> TinyInt MapToSqlBitAttribute Boolean, Nullable<Boolean> Bit MapToSqlDecimalAttribute precision, scale Decimal, Nullable<Decimal> Decimal MapToSqlMoneyAttribute Decimal, Nullable<Decimal> Money MapToSqlSmallMoneyAttribute Decimal, Nullable<Decimal> SmallMoney MapToSqlFloatAttribute Double, Nullable<Double> Float MapToSqlRealAttribute Float, Nullable<Float> Real MapToSqlDateTimeAttribute DateTime, Nullable<DateTime> DateTime MapToSqlDateTime2Attribute precision DateTime, Nullable<DateTime> DateTime2 MapToSqlDateAttribute DateTime, Nullable<DateTime> Date MapToSqlTimeAttribute TimeSpan, Nullable<TimeSpan> Time MapToSqlDateTimeOffsetAttribute DateTimeOffset, Nullable<DateTimeOffset> DateTimeOffset MapToSqlVarBinaryAttribute length¹ byte[] VarBinary MapToSqlBinaryAttribute length byte[] Binary MapToSqlUniqueIdentifierAttribute Guid, Nullable<Guid> UniqueIdentifier ¹ For “max” values (nvarchar(max), varbinary(max), etc.) use length of -1. ² The Enum name is saved as string. ³ Locale Id is the Ansi code page to use for Unicode conversion. For en-US locale, for example, use 1033. ⁴ The Enum value is saved based on its underlying numeric value. The Enum integer base type (int, short, byte, etc.) must match the database type. Attribute Arguments .NET types SQL Type MapToPgVarcharAttribute length String, Enum¹, Nullable<Enum> VarChar MapToPgCharAttribute length String, Enum¹, Nullable<Enum> Char MapToPgTextAttribute String, Enum¹, Nullable<Enum> VarChar MapToPgBigintAttribute Int64, Enum², Nullable<Int64>, Nullable<Enum> Bigint MapToPgIntegerAttribute Int32, Enum², Nullable<Int32>, Nullable<Enum> Integer MapToPgSmallintAttribute Int16, Enum², Nullable<Int16>, Nullable<Enum> Smallint MapToPgInternalCharAttribute Byte, Enum², Nullable<Byte>, Nullable<Enum> (Internal) \"char\"³ MapToPgBooleanAttribute Boolean, Nullable<Boolean> Boolean MapToPgNumericAttribute precision, scale Decimal, Nullable<Decimal> Numeric MapToPgMoneyAttribute Decimal, Nullable<Decimal> Money MapToPgDoubleAttribute Double, Nullable<Double> Double MapToPgRealAttribute Float, Nullable<Float> Real MapToPgTimestampAttribute DateTime, DateTimeOffset, Nullable<DateTime>, Nullable<DateTimeOffset> Timestamp MapToPgTimestampTzAttribute DateTimeOffset, Nullable<DateTimeOffset> TimestampTz MapToPgDateAttribute DateTime, Nullable<DateTime> Date MapToPgTimeAttribute TimeSpan, Nullable<TimeSpan> Time MapToPgIntervalAttribute TimeSpan, Nullable<TimeSpan> Interval MapToPgTimeTzAttribute TimeSpan, DateTimeOffset, Nullable<TimeSpan>, Nullable<DateTimeOffset> TimeTz MapToPgArrayAttribute Array Array MapToPgByteaAttribute length byte[] Bytea MapToPgArrayAttribute NpgsqlType T[]⁴ Array MapToPgHstoreAttribute length IDictionary<string, string> Hstore MapToPgUuidAttribute Guid, Nullable<Guid> UniqueIdentifier ¹ The Enum name is saved as string. ² The Enum value is saved based on its underlying numeric value. The Enum integer base type (int, short, byte, etc.) must match the database type. ³ This data type is not intended for general use. ⁴ The Npgsql type is used to create parameters; the Property type is used to read them. Required Finally, the the data attributes have an optional required (sic) parameter. If a database field is DbNull, the Mapper will normally set the corresponding property to null. However, the missing value may represent an entirely absent record. In this case, the correct result is a null object, not a valid instance with null/default properties. Setting a property attribute’s required argument to True causes the Mapper to return a null object if the property would be null. By default (if not specified), required is false. Handling Nulls and Empty Types Because the Mapper is handling database values, there is generally a possibility that the database value is DbNull. How this is converted to a .NET type depends upon the type. Strings and Arrays A .NET string with a value of null or a null array will be saved as a DbNull. Empty strings will save as a zero-length string. Integers Integers cannot be null, so the advent of nullable types is a godsend for mapping to database storage. To save or retrieve an integer (byte, Int16, Int32, or Int64) database value from a column that allows null, you should declare a nullable value type. Floating Point Numbers Like integer types, floating point types (Double and Float) can be wrapped in a nullable value. However, ArgentSea also handles NaN as a DbNull. If the floating point value is presented as a nullable type, then ArgentSea will save or retrieve NaN; if floating point type is presented, then NaN will be converted to/from a DbNull. Guids Rather like floating point types, Guid.Empty (00000000-0000-0000-0000-000000000000) will be converted to a data DbNull when read from or written to the database. Also like floats, if you need to write an empty Guid value, wrap it in a nullable type. Enum Types .NET enum values can be stored as either numbers or strings. Writing to a text column will automatically save the name of the enum; writing to a numeric column saves the number value. Warning Enums can inherit from several base types (byte, short, int, etc.). If you are saving to a numeric database column, the base type must correctly correspond to the database data type. Enums are Int32 by default. Nullable Enum types will read or write as a DbNull when the value is null. ShardKey and ShardChild These are special types and are discussed in detail in the sharding section. The MapToModel attribute Complex object models may include properties that are objects with their own properties, which also need to be mapped to the underlying data. For example, you might have an Address object that you use for Customers, Vendors, Contacts, Stores, and more. The Vendor class, then, has a property of type Address, and the Customer class has an Address property too. Since the address information is included with the results from the database, the Mapper should map the matching values to the Address object. The MapToModel attribute tells the Mapper to do this. Of course, the property’s type must also have data mapping attributes on the appropriate class properties. The type referenced by a MapToModel attribute can itself have a object property with a MapToModel attribute. In other words, a Store object can have a property of type Address , which might in turn have a property of type Coordinates . If the Coordinates type has two properties, each with a MapToDouble attribute, the Mapper will be able to map the Latitude and Longitude values to the Store.Address.Latitude and Store.Address.Longitude fields respectively. Properties with the MapToModel attribute cannot be null, so the root object must be instantiate all of its properties when it is created. Mapping Targets The ArgentSea Mapper maps to: Query input parameters Query output parameters Data reader columns Table-valued parameters (SQL Server only) The mapper does not generate dynamic SQL statements. The Mapper may be useful in situations where dynamic SQL is used, but, philosophically, this is not encouraged. Stored procedures are generally more secure, more performant, and offer a less tightly-coupled architecture. The Parameter Collection The Mapper’s parameter methods are implemented as an extension method to the (abstract) DbParametersCollection, which is inherited by each provider implementation of the DbCommand.Parameters property. This means that you can call the Mapper through the command object of any provider. cmd.Parameters.CreateInputParameters<MyDataClass>(myDataClass, logger); // or cmd.Parameters.CreateOutputParameters<MyDataClass>(logger); These extension methods can be combined with the other extension methods for a fluent API , which allows you to build a logical sequence of code that may be more readable. SQL Server PostgreSQL For example, this code uses the fluent API to to set an output parameter and then the mapper to create and set all the other object properties from a transaction object. cmd.Parameters.AddSqlIntOutputParameter(\"@TransactionId\") .CreateInputParameters<Transaction>(transaction, logger); For example, this code uses the fluent API to to set an output parameter and then the mapper to create and set all the other object properties from a transaction object. cmd.Parameters.AddPgIntegerOutputParameter(\"TransactionId\") .CreateInputParameters<Transaction>(transaction, logger); In ADO.NET, you normally access the data parameters collection ( SqlParametersCollection , NpgsqlParametersCollection , etc.) through the Parameters property of the command object. In ArgentSea, you can still do this; the Mapper and other extension methods work on the parameters collection property. When working with sharded data, however, this presents a problem that is described in detail in the tutorial on querying . The gist is that there is a need to create a parameters list independently of a command object. Enter the QueryParameterCollection class. It’s functionally not much more than a parameter list, but it can be created without a command object. Because it also inherits from the abstract DbParameterCollection , the same extension methods — like the Mapper — work on this object too. SQL Server PostgreSQL Again, the optional fluent API makes setting an input parameter and a mapped set of output parameters quite simple: var prms = new QueryParameterCollection() .AddSqlBigIntInputParameter(\"@ID\", _id) .CreateOutputParameters<MyClass>(logger); Again, the optional fluent API makes setting an input parameter and a mapped set of output parameters quite simple: var prms = new QueryParameterCollection() .AddPgBigintInputParameter(\"ID\", _id) .CreateOutputParameters<MyClass>(logger); Mapping to Input Parameters You can create input parameters with the CreateInputParameters method. This is an extension method on the parameters collection. The mapping attributes in your class will be used to: Create the set of input parameters Set the value of those parameters to the value of the corresponding property. That is all the Mapper does. The Mapper simply saved you the time and effort of hand-coding a whole bunch of parameters. You can view the parameters in the debugger and you can add, remove or update any of them. If a particular query needs a parameter that is not presented in a property attribute, just add it to parameter the collection yourself! Any parameters already added to the parameter collection will not be recreated (the names must match exactly). This is helpful if you need to treat one or more parameters differently (say, an output parameter in a collection of input parameters). If you don’t want the Mapper to create a particular parameter set, you can provide a list of parameter names to suppress. Mapping to Output Parameters Working with output parameters is done in two steps: Create the output parameters before executing the query Read the output parameter values after executing the query SQL Server PostgreSQL This example creates and sets the CustomerId parameter and creates all of the output parameters. It then executes the query and reads the output values into a new object. cmd.Parameters.AddSqlIntInputParameter(\"@CustomerId\", _Id) .CreateOutputParameters<Customer>(logger); await cmd.ExecuteNonQueryAsync(); var customer = cmd.Parameters.ToModel<Customer>(logger); This example creates and sets the CustomerId parameter and creates all of the output parameters. It then executes the query and reads the output values into a new object. cmd.Parameters.AddPgIntegerInputParameter(\"CustomerId\", _Id) .CreateOutputParameters<Customer>(logger); await cmd.ExecuteNonQueryAsync(); var customer = cmd.Parameters.ToModel<Customer>(logger); Of course, it would be quite unusual to have a query that only uses output parameters. Because the input parameter is added to the collection first, the output parameter will be automatically skipped. As with input parameters, you can also provide a list of parameter names that you want to explicitly skip. And also like input parameters, the CreateOutputParameters method simply creates output parameters; you can modify the collection as needed. Once the parameters are set and the procedure is executed, the Mapper can read the values of the output parameters into the corresponding properties of a new object instance. The ToModel method returns a new object with the properties set. Note The MapOutput*; methods of the Database or ShardSet objects fetch results from the database and implicitly use the Mapper to return a Model based upon output parameters. In most cases, you would use one of those methods rather than ToModel on the Mapper directly. Mapping from DataReader Results The Mapper also converts the rows presented by a DataReader object into a list of corresponding objects, or a single row into a Model instance. For example, to map to a list of objects: var customers = rdr.ToList<Customer>(logger); The IList result will contain an object instance for each valid row. If an attribute is marked “required” but the corresponding data field is DbNull, then the object will not be included listed results. To map to a single Model instance: var customer = rdr.ToModel<Customer>(logger); Note As with output parameters, the MapReader*; or MapListAsync methods of the Database or ShardSet objects fetch results from the database and implicitly use the Mapper to return a Model based upon DataReader results. In most cases, you would use one of those methods rather than ToList or ToModel on the Mapper. The DataReader mapping methods allow you to use multiple SELECT result to map both the base object and one or more list properties. The order of the generic objects provided to the Mapper determines the expected order of the result streams in the DataReader. Performance The ArgentSea Mapper is written to be as high-performance as optimized hand-coded data access code. However, there is a hitch. Property attributes can only be retrieved using reflection , which is relatively slow .NET code. To avoid this type of performance penalty on every data access, ArgentSea uses reflection only the first time the mapping is performed; using that metadata it then creates and compiles an “Expression Tree”to build an optimized, compiled mapping. The compiled code is cached in memory and reused for all subsequent calls. Warning The Mapper will be relatively slow (and CPU intensive) the first time each model class is mapped to parameters or data. The initial compilation usually takes less than a second. Subsequent calls will execute the data to property mapping at native machine-code speeds. When the application is restarted, the memory is cleared and the compilation overhead occurs again. Logging You have surely noticed that every Mapper command requires a logger instance — an object that implements the ILogger interface. A supportable application requires logging, so the parameter is not optional. The .NET Core environment provides objects that log to the console, debug window, Windows event logs, file system, Application Insights , CloudWatch , and much more. ArgentSea can consume any of these logging providers and provide diagnostic and runtime data to their respective targets. In production, you will generally want to use log level Information . In development you may find Debug or even Trace very helpful. Caution Be sure to manage the logging level in your configuration. This determines the amount of logging and this can have a substantial impact upon performance. Logging Levels The logging levels determine the types of events that are logged. These are described below: Critical Logs when the circuit breaker is triggered on a connection or command. This may generate many downstream errors until the functionality is restored. Error In most cases, an error condition will throw to the caller so they become the caller’s responsibility to handle or log. Because data access may happen on multiple threads, however, a simple throw may lose context. If the data reader passed to the Mapper is closed or null, this is logged as an exception along with the connection description. Warning ArgentSea creates a warning log event when starting an automatic retry on a connection or command. Information When the circuit breaker is triggered, ArgentSea creates a log record each time a test transaction is attempted and again when functionality is restored. Debug The logged events in the Debug level are intended to help diagnose internal processes that may not be returning the expected results. The first type of event is when a DbNull value is presented to an object that then becomes null or empty, which happens with ShardKey, ShardChild, or any object with a Required argument set to true. When this happens unexpectedly, it can be difficult to determine which database value caused the problem (as now no properties exist to determine the culprit). This logging event identifies which DbNull caused the result to be null or Empty. The second type of event provides full visibility into the generated code used to build the Mapper’s activity. The Expression Tree is walked and the pseudo-code saved to the log before it is compiled. This can be extremely useful in understanding the complexities of the Mapping behavior. The log record will be rather long and the extraction may not be efficient, but it also runs only during the first data access. This log level also reports when a parameter attribute was defined but the parameter was not found among the output parameters. This might be by design or it might be a programming oversight. Finally, the Mapper logs when it did not find an cached delegate so an Expression Tree is being built and compiled. This is normal at startup because the cache will be empty; if these event occur afterward, there is likely a problem. Trace The Mapper creates a trace log record as it iterates over properties. This can provide insight into the current context when other error conditions occur. Also, the logger will report the execution time for commands sent to a database connection or shard sets."
  },
  "tutorials/quickstart2.html": {
    "href": "tutorials/quickstart2.html",
    "title": "QuickStart Two | ArgentSea Docs",
    "keywords": "QuickStart Two The previous QuickStart introduced configuration and mapping. This tutorial extends that information while working with a sharded data set. (In progress...)"
  },
  "tutorials/setup.html": {
    "href": "tutorials/setup.html",
    "title": "ArgentSea Setup | ArgentSea Docs",
    "keywords": "ArgentSea Setup Nuget Package The first, obvious step is to add a reference to the relevant ArgentSea nuget package. These are provider-specific. Current there are two: ArgentSea for SQL Server ArgentSea for PostgreSQL Both packages include a reference to the base ArgentSea shared package, so it is not necessary to include that separately, though you may need to referece it in your code. You may be able to include multiple provider packages in your progress (this is not a tested scenario), but you cannot have a single class that includes provider attributes from different providers. If you need to reference different database providers (i.e. both SQL Server and PostgreSQL), it would be best to use different projects. Simplifying Object References Of course, the ArgentSea framework does not know in advance the data types used in your architecture. You provide this information using generics when you compile your project. Since the ArgentSea objects are used frequently, however, this can be unnecessarily verbose. To simplify accessing the ArgentSea objects in your code, we suggest either Creating a derived class that declares your data types Or adding a using statement in each data access class Using Derived classes Using using"
  },
  "reference/apis.html": {
    "href": "reference/apis.html",
    "title": "API Reference | ArgentSea Docs",
    "keywords": "API Reference Objects shared across providers ArgentSea.Shared SQL Server objects ArgentSea.Sql PostreSQL objects ArgentSea.Pg"
  },
  "api/ArgentSea.DataResilienceConfiguration.SequenceLengthening.html": {
    "href": "api/ArgentSea.DataResilienceConfiguration.SequenceLengthening.html",
    "title": "Enum DataResilienceConfiguration.SequenceLengthening | ArgentSea Docs",
    "keywords": "Enum DataResilienceConfiguration.SequenceLengthening Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public enum SequenceLengthening Fields Name Description Fibonacci HalfSquare Linear Squaring"
  },
  "api/ArgentSea.DataResilienceConfiguration.html": {
    "href": "api/ArgentSea.DataResilienceConfiguration.html",
    "title": "Class DataResilienceConfiguration | ArgentSea Docs",
    "keywords": "Class DataResilienceConfiguration This class contains the definition for a data resiliance strategy. Specifically: when to retry and when to circuit break. This class is created as a configuration entry in an array in the DataResilienceStrategies property of the DataConfigurationOptions class. Inheritance System.Object DataResilienceConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DataResilienceConfiguration Properties | Improve this Doc View Source CircuitBreakerFailureCount If a connection or command consistantly fails, the circuit breaker will reject all further connections until one suceeds. This setting determines how many failures (after retries, if retry-able) before blocking all connections apart from a few periodic test attempts. Declaration public int CircuitBreakerFailureCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source CircuitBreakerTestInterval If a connection or command fails, the circuit breaker will reject all further connections until one suceeds. This setting determines how long (in milliseonds) the system should wait before allowing a test connection. Declaration public int CircuitBreakerTestInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ResilienceKey Declaration public string ResilienceKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source RetryCount Declaration public int RetryCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RetryInterval This is the number of milliseconds to wait before retrying a “retry-able” connection or command error. Default is 500 ms. This interval may be extended with each retry, depending upon the RetryLengthening setting, up to RetryCount. Declaration public int RetryInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source RetryLengthening If a connection or command fails, this setting determines how much each subsequent retry should be further delayed. Declaration public DataResilienceConfiguration.SequenceLengthening RetryLengthening { get; set; } Property Value Type Description DataResilienceConfiguration.SequenceLengthening Methods | Improve this Doc View Source HandleRetryTimespan(Int32) Declaration public TimeSpan HandleRetryTimespan(int attempt) Parameters Type Name Description System.Int32 attempt Returns Type Description System.TimeSpan"
  },
  "api/ArgentSea.DataResilienceOptions.html": {
    "href": "api/ArgentSea.DataResilienceOptions.html",
    "title": "Class DataResilienceOptions | ArgentSea Docs",
    "keywords": "Class DataResilienceOptions This options class contains an array of resilience strategies (retry and circuit breaking settings). To specify as particular resilience strategy, a connection can specify a ResilienceKey. Inheritance System.Object DataResilienceOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DataResilienceOptions Examples For example, you might configure your appsettings.json like this: \"ResilienceStrategies\": [ { \"ResilienceKey\": \"remote\", \"RetryCount\": \"6\", \"RetryInterval\": \"250\", \"RetryLengthening\": \"Finonacci\", \"CircuitBreakerFailureCount\": \"20\", \"CircuitBreakerTestInterval\": \"5000\" }, { \"ResilienceKey\": \"local\", \"RetryCount\": \"6\", \"RetryInterval\": \"150\", \"RetryLengthening\": \"Linear\", \"CircuitBreakerFailureCount\": \"10\", \"CircuitBreakerTestInterval\": \"5000\" } ] Properties | Improve this Doc View Source DataResilienceStrategies Declaration public DataResilienceConfiguration[] DataResilienceStrategies { get; set; } Property Value Type Description DataResilienceConfiguration []"
  },
  "api/ArgentSea.DataSecurityOptions.html": {
    "href": "api/ArgentSea.DataSecurityOptions.html",
    "title": "Class DataSecurityOptions | ArgentSea Docs",
    "keywords": "Class DataSecurityOptions This options class contains an array of SecurityConfiguration (login information). A connection can specify as particular login account by referencing a SecurityKey. Inheritance System.Object DataSecurityOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DataSecurityOptions Examples For example, you might configure your usersecrets.json like this: \"Credentials\": [ { \"SecurityKey\": \"0\", \"UserName\": \"user\", \"Password\": \"123456\" }, { \"SecurityKey\": \"1\", \"WindowsAuth\": true, }, { \"SecurityKey\": \"2\", \"UserName\": \"account\", \"Password\": \"7890\" } Properties | Improve this Doc View Source Credentials Declaration public SecurityConfiguration[] Credentials { get; set; } Property Value Type Description SecurityConfiguration []"
  },
  "api/ArgentSea.DbParameterExtensions.html": {
    "href": "api/ArgentSea.DbParameterExtensions.html",
    "title": "Class DbParameterExtensions | ArgentSea Docs",
    "keywords": "Class DbParameterExtensions Inheritance System.Object DbParameterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public static class DbParameterExtensions Methods | Improve this Doc View Source GetBoolean(DbParameter) Gets a Boolean value from the output parameter. Declaration public static bool GetBoolean(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Boolean The parameter value as a Boolean. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetByte(DbParameter) Gets a byte value from the output parameter. Declaration public static byte GetByte(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Byte The parameter value as a byte array. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetBytes(DbParameter) Gets a byte array from the output parameter, or null if the parameter value is DbNull. Declaration public static byte[] GetBytes(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Byte [] The parameter value as a byte[]. | Improve this Doc View Source GetDateTime(DbParameter) Gets a DateTime value from the output parameter. Declaration public static DateTime GetDateTime(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.DateTime The parameter value as a DateTime. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetDateTimeOffset(DbParameter) Gets a DateTimeOffset value from the output parameter. Declaration public static DateTimeOffset GetDateTimeOffset(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.DateTimeOffset The parameter value as a DateTimeOffset. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetDecimal(DbParameter) Gets a Decimal value from the output parameter. Declaration public static decimal GetDecimal(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Decimal The parameter value as a Decimal. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetDouble(DbParameter) Gets a Double (64-bit floating point) value from the output parameter, or NaN (Not a Number) if the value is DbNull. Declaration public static double GetDouble(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Double The parameter value as a Double. | Improve this Doc View Source GetFloat(DbParameter) Gets a Float (32-bit floating point) value from the output parameter, or NaN (Not a Number) if the value is DbNull. Declaration public static float GetFloat(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Single The parameter value as a Float. | Improve this Doc View Source GetGuid(DbParameter) Gets a Guid value from the output parameter, or Guid.Emtpy if the value is DbNull. Declaration public static Guid GetGuid(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Guid The parameter value as a Guid. | Improve this Doc View Source GetInteger(DbParameter) Gets an Int32 value from the output parameter. Declaration public static int GetInteger(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Int32 The parameter value as an Int32. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetLong(DbParameter) Gets an Int64 value from the output parameter. Declaration public static long GetLong(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Int64 The parameter value as an Int64. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetNullableBoolean(DbParameter) Declaration public static bool? GetNullableBoolean(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Boolean > | Improve this Doc View Source GetNullableByte(DbParameter) Declaration public static byte? GetNullableByte(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Byte > | Improve this Doc View Source GetNullableDateTime(DbParameter) Declaration public static DateTime? GetNullableDateTime(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.DateTime > | Improve this Doc View Source GetNullableDateTimeOffset(DbParameter) Declaration public static DateTimeOffset? GetNullableDateTimeOffset(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.DateTimeOffset > | Improve this Doc View Source GetNullableDecimal(DbParameter) Declaration public static decimal? GetNullableDecimal(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Decimal > | Improve this Doc View Source GetNullableDouble(DbParameter) Declaration public static double? GetNullableDouble(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Double > | Improve this Doc View Source GetNullableFloat(DbParameter) Declaration public static float? GetNullableFloat(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source GetNullableGuid(DbParameter) Declaration public static Guid? GetNullableGuid(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Guid > | Improve this Doc View Source GetNullableInteger(DbParameter) Declaration public static int? GetNullableInteger(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Int32 > | Improve this Doc View Source GetNullableLong(DbParameter) Declaration public static long? GetNullableLong(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Int64 > | Improve this Doc View Source GetNullableShort(DbParameter) Declaration public static short? GetNullableShort(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.Int16 > | Improve this Doc View Source GetNullableTimeSpan(DbParameter) Declaration public static TimeSpan? GetNullableTimeSpan(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm Returns Type Description System.Nullable < System.TimeSpan > | Improve this Doc View Source GetShort(DbParameter) Gets a short (Int16) value from the output parameter. Declaration public static short GetShort(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.Int16 The parameter value as an Int16. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered. | Improve this Doc View Source GetString(DbParameter) Gets a string value from the output parameter, or null if the parameter value is DbNull. Declaration public static string GetString(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.String The parameter value as a string. | Improve this Doc View Source GetTimeSpan(DbParameter) Gets a TimeSpan value from the output parameter. Declaration public static TimeSpan GetTimeSpan(this DbParameter prm) Parameters Type Name Description System.Data.Common.DbParameter prm The output parameter, populated with a value (after Execute). Returns Type Description System.TimeSpan The parameter value as a TimeSpan. Exceptions Type Condition ArgentSea.UnexpectedNullException Thrown when a database null value is encountered."
  },
  "api/ArgentSea.ExpressionHelpers.html": {
    "href": "api/ArgentSea.ExpressionHelpers.html",
    "title": "Class ExpressionHelpers | ArgentSea Docs",
    "keywords": "Class ExpressionHelpers This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. Inheritance System.Object ExpressionHelpers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public static class ExpressionHelpers Methods | Improve this Doc View Source InParameterEnumXIntExpressionBuilder(String, Type, String, Type, IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration public static void InParameterEnumXIntExpressionBuilder(string parameterName, Type staticType, string addMethodName, Type nullableBaseType, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression propValue, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String addMethodName System.Type nullableBaseType System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression propValue System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source InParameterSimpleBuilder(String, Type, ParameterExpression, ParameterExpression, Expression, IList<Expression>, Type, String, ConstantExpression, ConstantExpression, HashSet<String>, ParameterExpression, ILogger) Declaration public static void InParameterSimpleBuilder(string parameterName, Type propertyType, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, Expression expProperty, IList<Expression> expressions, Type staticType, string addMethod, ConstantExpression thirdArg, ConstantExpression forthArg, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type propertyType System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Type staticType System.String addMethod System.Linq.Expressions.ConstantExpression thirdArg System.Linq.Expressions.ConstantExpression forthArg System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source InParameterStringExpressionBuilder(String, Int32, Type, String, ConstantExpression, IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration public static void InParameterStringExpressionBuilder(string parameterName, int length, Type staticType, string methodName, ConstantExpression expLocale, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression propValue, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Int32 length System.Type staticType System.String methodName System.Linq.Expressions.ConstantExpression expLocale System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression propValue System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source InParmHelper(String, ParameterExpression, Expression, Type, String, ConstantExpression, ConstantExpression, ParameterExpression) Declaration public static Expression InParmHelper(string parameterName, ParameterExpression expSprocParameters, Expression propValue, Type staticType, string addMethod, ConstantExpression thirdArg, ConstantExpression forthArg, ParameterExpression expIgnoreParameters) Parameters Type Name Description System.String parameterName System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.Expression propValue System.Type staticType System.String addMethod System.Linq.Expressions.ConstantExpression thirdArg System.Linq.Expressions.ConstantExpression forthArg System.Linq.Expressions.ParameterExpression expIgnoreParameters Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source OutParameterBuilder(String, ParameterExpression, IList<Expression>, Type, String, ConstantExpression, ConstantExpression, HashSet<String>, ParameterExpression, ILogger) Declaration public static void OutParameterBuilder(string parameterName, ParameterExpression expSprocParameters, IList<Expression> expressions, Type staticType, string addMethod, ConstantExpression secondArg, ConstantExpression thirdArg, HashSet<string> parameterNames, ParameterExpression expIgnoreParameters, ILogger logger) Parameters Type Name Description System.String parameterName System.Linq.Expressions.ParameterExpression expSprocParameters System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Type staticType System.String addMethod System.Linq.Expressions.ConstantExpression secondArg System.Linq.Expressions.ConstantExpression thirdArg System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expIgnoreParameters Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReaderEnumXIntExpressions(String, Expression, Type, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration public static void ReaderEnumXIntExpressions(string columnName, Expression expProperty, Type baseType, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String columnName System.Linq.Expressions.Expression expProperty System.Type baseType System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReaderNullableValueTypeExpressions(String, Expression, ConstantExpression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration public static void ReaderNullableValueTypeExpressions(string columnName, Expression expProperty, ConstantExpression expNullResult, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String columnName System.Linq.Expressions.Expression expProperty System.Linq.Expressions.ConstantExpression expNullResult System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReaderSimpleValueExpressions(String, Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration public static void ReaderSimpleValueExpressions(string columnName, Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String columnName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReaderStringExpressions(String, Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration public static void ReaderStringExpressions(string columnName, Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String columnName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReadOutParameterArrayExpressions(String, Type, String, Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration public static void ReadOutParameterArrayExpressions(string parameterName, Type staticType, string getMethodName, Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String getMethodName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReadOutParameterBinaryExpressions(String, Type, String, Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration public static void ReadOutParameterBinaryExpressions(string parameterName, Type staticType, string getMethodName, Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String getMethodName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReadOutParameterEnumXIntExpressions(String, Type, String, String, Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration public static void ReadOutParameterEnumXIntExpressions(string parameterName, Type staticType, string getMethodName, string nullableGetMethodName, Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String getMethodName System.String nullableGetMethodName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReadOutParameterSimpleValueExpressions(String, Type, String, String, Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration public static void ReadOutParameterSimpleValueExpressions(string parameterName, Type staticType, string getMethodName, string nullableGetMethodName, Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String getMethodName System.String nullableGetMethodName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source ReadOutParameterStringExpressions(String, Type, String, Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration public static void ReadOutParameterStringExpressions(string parameterName, Type staticType, string getMethodName, Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.String parameterName System.Type staticType System.String getMethodName System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger"
  },
  "api/ArgentSea.IDatabaseConnectionConfiguration.html": {
    "href": "api/ArgentSea.IDatabaseConnectionConfiguration.html",
    "title": "Interface IDatabaseConnectionConfiguration | ArgentSea Docs",
    "keywords": "Interface IDatabaseConnectionConfiguration This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IDatabaseConnectionConfiguration Properties | Improve this Doc View Source DatabaseKey Declaration string DatabaseKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataConnectionInternal Declaration IConnectionConfiguration DataConnectionInternal { get; } Property Value Type Description IConnectionConfiguration"
  },
  "api/ArgentSea.IDataProviderServiceFactory.html": {
    "href": "api/ArgentSea.IDataProviderServiceFactory.html",
    "title": "Interface IDataProviderServiceFactory | ArgentSea Docs",
    "keywords": "Interface IDataProviderServiceFactory This interface is used by provider specific implementations. It is unlikely that you would reference this in consumer code. The interface defines the capabilities of a database providers service. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IDataProviderServiceFactory Methods | Improve this Doc View Source GetIsErrorTransient(Exception) Declaration bool GetIsErrorTransient(Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Boolean | Improve this Doc View Source NewCommand(String, DbConnection) Declaration DbCommand NewCommand(string storedProcedureName, DbConnection connection) Parameters Type Name Description System.String storedProcedureName System.Data.Common.DbConnection connection Returns Type Description System.Data.Common.DbCommand | Improve this Doc View Source NewConnection(String) Declaration DbConnection NewConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection | Improve this Doc View Source SetParameters(DbCommand, DbParameterCollection, Dictionary<String, Object>) Declaration void SetParameters(DbCommand cmd, DbParameterCollection parameters, Dictionary<string, object> parameterValues) Parameters Type Name Description System.Data.Common.DbCommand cmd System.Data.Common.DbParameterCollection parameters System.Collections.Generic.Dictionary < System.String , System.Object > parameterValues"
  },
  "api/ArgentSea.LoggingExtensions.EventIdentifier.html": {
    "href": "api/ArgentSea.LoggingExtensions.EventIdentifier.html",
    "title": "Enum LoggingExtensions.EventIdentifier | ArgentSea Docs",
    "keywords": "Enum LoggingExtensions.EventIdentifier Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public enum EventIdentifier Fields Name Description LogCircuitBreakerOff LogCircuitBreakerOn LogCircuitBreakerTest LogCmdExecuted LogCommandRetry LogConnectRetry LogExpressionTreeCreation MapperGetOutTrace MapperInParameterCacheStatus MapperInTrace MapperRdrTrace MapperReaderCacheStatus MapperReadOutParameterCacheStatus MapperResultsReaderInvalid MapperSetOutParameterCache MapperSetOutParameterCacheStatus MapperSetOutTrace MapperShardChildNull MapperShardKeyNull MapperSqlColumnNotFound MapperSqlParameterNotFound RequiredPropertyIsDbNull"
  },
  "api-sql/ArgentSea.Sql.SqlLoggingExtensions.SqlEventIdentifier.html": {
    "href": "api-sql/ArgentSea.Sql.SqlLoggingExtensions.SqlEventIdentifier.html",
    "title": "Enum SqlLoggingExtensions.SqlEventIdentifier | ArgentSea Docs",
    "keywords": "Enum SqlLoggingExtensions.SqlEventIdentifier Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public enum SqlEventIdentifier Fields Name Description MapperTvpCacheStatus MapperTvpTrace"
  },
  "api-sql/ArgentSea.Sql.SqlLoggingExtensions.html": {
    "href": "api-sql/ArgentSea.Sql.SqlLoggingExtensions.html",
    "title": "Class SqlLoggingExtensions | ArgentSea Docs",
    "keywords": "Class SqlLoggingExtensions This static class provides the logging extension methods for handling table-valued parameter (TVP) mapping. Inheritance System.Object SqlLoggingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public static class SqlLoggingExtensions Methods | Improve this Doc View Source BuildTvpScope(ILogger, Type) Declaration public static IDisposable BuildTvpScope(this ILogger logger, Type model) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model Returns Type Description System.IDisposable | Improve this Doc View Source SqlTvpCacheHit(ILogger, Type) Declaration public static void SqlTvpCacheHit(this ILogger logger, Type modelT) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type modelT | Improve this Doc View Source SqlTvpCacheMiss(ILogger, Type) Declaration public static void SqlTvpCacheMiss(this ILogger logger, Type modelT) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type modelT | Improve this Doc View Source TraceTvpMapperProperty(ILogger, String) Declaration public static void TraceTvpMapperProperty(this ILogger logger, string propertyName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName"
  },
  "api-sql/ArgentSea.Sql.SqlParameterCollectionExtensions.html": {
    "href": "api-sql/ArgentSea.Sql.SqlParameterCollectionExtensions.html",
    "title": "Class SqlParameterCollectionExtensions | ArgentSea Docs",
    "keywords": "Class SqlParameterCollectionExtensions This class adds extension methods which simplify setting SQL parameter values from .NET types. Inheritance System.Object SqlParameterCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public static class SqlParameterCollectionExtensions Methods | Improve this Doc View Source AddSqlBigIntInputParameter(DbParameterCollection, String, Int64) Creates a parameter for providing a 64-bit signed integer (long) to a stored procedure. Declaration public static DbParameterCollection AddSqlBigIntInputParameter(this DbParameterCollection prms, string parameterName, long value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int64 value A 64-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBigIntInputParameter(DbParameterCollection, String, Nullable<Int64>) Creates a parameter for providing a 64-bit signed integer (long) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlBigIntInputParameter(this DbParameterCollection prms, string parameterName, long? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Int64 > value A 64-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBigIntOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 64-bit signed integer (long) from a stored procedure. Declaration public static DbParameterCollection AddSqlBigIntOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBinaryInputParameter(DbParameterCollection, String, Byte[], Int32) Creates a parameter for providing a fixed-sized byte array to a stored procedure. A null reference will save DBNull. Declaration public static DbParameterCollection AddSqlBinaryInputParameter(this DbParameterCollection prms, string parameterName, byte[] value, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Byte [] value An array of bytes, or null. System.Int32 length The fixed number of bytes in the database column. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBinaryOutputParameter(DbParameterCollection, String, Int32) Creates a parameter for obtaining a fixed-sized byte array from a stored procedure. Declaration public static DbParameterCollection AddSqlBinaryOutputParameter(this DbParameterCollection prms, string parameterName, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 length The fixed number of bytes in the database column. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBitInputParameter(DbParameterCollection, String, Boolean) Creates a parameter for providing a boolean value (bool) to a stored procedure. Declaration public static DbParameterCollection AddSqlBitInputParameter(this DbParameterCollection prms, string parameterName, bool value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Boolean value A boolean value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBitInputParameter(DbParameterCollection, String, Nullable<Boolean>) Creates a parameter for providing a boolean value (bool) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlBitInputParameter(this DbParameterCollection prms, string parameterName, bool? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Boolean > value A boolean value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlBitOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a boolean value (bool) from a stored procedure. Declaration public static DbParameterCollection AddSqlBitOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlCharInputParameter(DbParameterCollection, String, String, Int32, Int32) Creates parameter for providing a fixed-length string or a DBNull value to a stored procedure, which is converted to the target ANSI code page (if possible). Declaration public static DbParameterCollection AddSqlCharInputParameter(this DbParameterCollection prms, string parameterName, string value, int length, int localeId) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. System.Int32 localeId Specify the code page for ANSI conversions. For example, the value 1033 is U.S. English. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlCharOutputParameter(DbParameterCollection, String, Int32, Int32) Creates parameter for obtaining a fixed-length string from a stored procedure, which has been converted from the source ANSI code page. Declaration public static DbParameterCollection AddSqlCharOutputParameter(this DbParameterCollection prms, string parameterName, int length, int localeId) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. System.Int32 localeId Specify the code page for ANSI conversions. For example, the value 1033 is U.S. English. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateInputParameter(DbParameterCollection, String, DateTime) Creates a parameter for providing a date (sans time) to a stored procedure. Declaration public static DbParameterCollection AddSqlDateInputParameter(this DbParameterCollection prms, string parameterName, DateTime value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.DateTime value A DateTime value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateInputParameter(DbParameterCollection, String, Nullable<DateTime>) Creates a parameter for providing a date (sans time) or DbNull to a stored procedure. Declaration public static DbParameterCollection AddSqlDateInputParameter(this DbParameterCollection prms, string parameterName, DateTime? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.DateTime > value A DateTime value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a date (sans time) from a stored procedure. Declaration public static DbParameterCollection AddSqlDateOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTime2InputParameter(DbParameterCollection, String, DateTime) Creates a parameter for providing a date and time value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTime2InputParameter(this DbParameterCollection prms, string parameterName, DateTime value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.DateTime value A date and time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTime2InputParameter(DbParameterCollection, String, Nullable<DateTime>) Creates a parameter for providing a date and time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTime2InputParameter(this DbParameterCollection prms, string parameterName, DateTime? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.DateTime > value A date and time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTime2OutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving date and time value from a stored procedure. Declaration public static DbParameterCollection AddSqlDateTime2OutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeInputParameter(DbParameterCollection, String, DateTime) Creates a parameter for providing a date and time value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeInputParameter(this DbParameterCollection prms, string parameterName, DateTime value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.DateTime value A date and time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeInputParameter(DbParameterCollection, String, Nullable<DateTime>) Creates a parameter for providing a date and time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeInputParameter(this DbParameterCollection prms, string parameterName, DateTime? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.DateTime > value A date and time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeOffsetInputParameter(DbParameterCollection, String, DateTimeOffset) Creates a parameter for providing a DateTimeOffset value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeOffsetInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.DateTimeOffset value A DateTimeOffset value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeOffsetInputParameter(DbParameterCollection, String, Nullable<DateTimeOffset>) Creates a parameter for providing a DateTimeOffset or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeOffsetInputParameter(this DbParameterCollection prms, string parameterName, DateTimeOffset? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.DateTimeOffset > value A DateTimeOffset value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeOffsetOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a DateTimeOffset from a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeOffsetOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDateTimeOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a date and time value from a stored procedure. Declaration public static DbParameterCollection AddSqlDateTimeOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDecimalInputParameter(DbParameterCollection, String, Decimal, Byte, Byte) Creates a parameter for providing a decmial value to a stored procedure. Declaration public static DbParameterCollection AddSqlDecimalInputParameter(this DbParameterCollection prms, string parameterName, decimal value, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Decimal value A decmial value . System.Byte precision System.Byte scale Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDecimalInputParameter(DbParameterCollection, String, Nullable<Decimal>, Byte, Byte) Creates a parameter for providing a decmial value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlDecimalInputParameter(this DbParameterCollection prms, string parameterName, decimal? value, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Decimal > value A decmial value or null. System.Byte precision System.Byte scale Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlDecimalOutputParameter(DbParameterCollection, String, Byte, Byte) Creates an output parameter for retrieving a decmial value from a stored procedure. Declaration public static DbParameterCollection AddSqlDecimalOutputParameter(this DbParameterCollection prms, string parameterName, byte precision, byte scale) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Byte precision Specifies the maximum number of digits used to store the number (inclusive of both sides of the decimal point). System.Byte scale Specifies the number of digits used in the fractional portion of the number (i.e. digits to the right of the decimal point). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlFloatInputParameter(DbParameterCollection, String, Double) Creates a parameter for providing a 64-bit floating-point value (double) to a stored procedure. NaN will be converted to DbNull. Declaration public static DbParameterCollection AddSqlFloatInputParameter(this DbParameterCollection prms, string parameterName, double value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Double value A 64-bit floating-point value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlFloatInputParameter(DbParameterCollection, String, Nullable<Double>) Creates a parameter for providing a 64-bit floating-point value (double) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlFloatInputParameter(this DbParameterCollection prms, string parameterName, double? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Double > value A 64-bit floating-point value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlFloatOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 64-bit floating-point value (double) from a stored procedure. Declaration public static DbParameterCollection AddSqlFloatOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlIntInputParameter(DbParameterCollection, String, Int32) Creates a parameter for providing a 32-bit signed integer (int) to a stored procedure. Declaration public static DbParameterCollection AddSqlIntInputParameter(this DbParameterCollection prms, string parameterName, int value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 value A 32-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlIntInputParameter(DbParameterCollection, String, Nullable<Int32>) Creates a parameter for providing a 32-bit signed integer (int) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlIntInputParameter(this DbParameterCollection prms, string parameterName, int? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Int32 > value A 32-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlIntOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (int) from a stored procedure. Declaration public static DbParameterCollection AddSqlIntOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlMoneyInputParameter(DbParameterCollection, String, Decimal) Creates a parameter for providing a decmial value to a stored procedure. Declaration public static DbParameterCollection AddSqlMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Decimal value A decmial value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlMoneyInputParameter(DbParameterCollection, String, Nullable<Decimal>) Creates a parameter for providing a decmial value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Decimal > value A decmial value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlMoneyOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a decmial value from a stored procedure. Declaration public static DbParameterCollection AddSqlMoneyOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlNCharInputParameter(DbParameterCollection, String, String, Int32) Creates parameter for providing a fixed-length string or a DBNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlNCharInputParameter(this DbParameterCollection prms, string parameterName, string value, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlNCharOutputParameter(DbParameterCollection, String, Int32) Creates parameter for obtaining a fixed-length string from a stored procedure. Declaration public static DbParameterCollection AddSqlNCharOutputParameter(this DbParameterCollection prms, string parameterName, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 length Specifies the number of characters in the string. If the original string value is smaller than this length, the returned value will be padded with spaces. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlNVarCharInputParameter(DbParameterCollection, String, String, Int32) Creates parameter for providing a string or a DBNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlNVarCharInputParameter(this DbParameterCollection prms, string parameterName, string value, int maxLength) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 maxLength This should match the size of the parameter, not the size of the input string (and certainly not the number of bytes). For nvarchar(max) parameters, specify -1. Setting the value correctly will help avoid plan cache pollution (when not using stored procedures) and minimize memory buffer allocations. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlNVarCharOutputParameter(DbParameterCollection, String, Int32) Creates parameter for obtaining a string from a stored procedure. Declaration public static DbParameterCollection AddSqlNVarCharOutputParameter(this DbParameterCollection prms, string parameterName, int maxLength) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 maxLength Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlRealInputParameter(DbParameterCollection, String, Nullable<Single>) Creates a parameter for providing a 32-bit floating-point value (float) or DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlRealInputParameter(this DbParameterCollection prms, string parameterName, float? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Single > value A 32-bit floating point value (float) or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlRealInputParameter(DbParameterCollection, String, Single) Creates a parameter for providing a 32-bit floating-point value (float) to a stored procedure. NaN will be converted to DbNull. Declaration public static DbParameterCollection AddSqlRealInputParameter(this DbParameterCollection prms, string parameterName, float value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Single value A 32-bit floating point value (float). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlRealOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit floating-point value (float) from a stored procedure. Declaration public static DbParameterCollection AddSqlRealOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallIntInputParameter(DbParameterCollection, String, Int16) Creates a parameter for providing a 16-bit signed integer (short) to a stored procedure. Declaration public static DbParameterCollection AddSqlSmallIntInputParameter(this DbParameterCollection prms, string parameterName, short value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int16 value A 16-bit signed integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallIntInputParameter(DbParameterCollection, String, Nullable<Int16>) Creates a parameter for providing a 16-bit signed integer (short) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlSmallIntInputParameter(this DbParameterCollection prms, string parameterName, short? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Int16 > value A 16-bit signed integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallIntOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (short) from a stored procedure. Declaration public static DbParameterCollection AddSqlSmallIntOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallMoneyInputParameter(DbParameterCollection, String, Decimal) Creates a parameter for providing a decmial value to a stored procedure. Declaration public static DbParameterCollection AddSqlSmallMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Decimal value A decmial value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallMoneyInputParameter(DbParameterCollection, String, Nullable<Decimal>) Creates a parameter for providing a decmial value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlSmallMoneyInputParameter(this DbParameterCollection prms, string parameterName, decimal? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Decimal > value A decmial value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlSmallMoneyOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a decmial value from a stored procedure. Declaration public static DbParameterCollection AddSqlSmallMoneyOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTableValuedParameter(DbParameterCollection, String, IEnumerable<SqlDataRecord>) Creates a parameter for providing a user-defined table to a stored procedure. Declaration public static DbParameterCollection AddSqlTableValuedParameter(this DbParameterCollection prms, string parameterName, IEnumerable<SqlDataRecord> value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Collections.Generic.IEnumerable < Microsoft.SqlServer.Server.SqlDataRecord > value A list of SqlDataRecord objects containing the table contents. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTimeInputParameter(DbParameterCollection, String, Nullable<TimeSpan>) Creates a parameter for providing a time value or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlTimeInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.TimeSpan > value A time value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTimeInputParameter(DbParameterCollection, String, TimeSpan) Creates a parameter for providing a time value to a stored procedure. Declaration public static DbParameterCollection AddSqlTimeInputParameter(this DbParameterCollection prms, string parameterName, TimeSpan value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.TimeSpan value A time value . Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTimeOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a time value from a stored procedure. Declaration public static DbParameterCollection AddSqlTimeOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTinyIntInputParameter(DbParameterCollection, String, Byte) Creates a parameter for providing a 8-bit unsigned integer (byte) to a stored procedure. Declaration public static DbParameterCollection AddSqlTinyIntInputParameter(this DbParameterCollection prms, string parameterName, byte value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Byte value An unsigned 8-bit integer value. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTinyIntInputParameter(DbParameterCollection, String, Nullable<Byte>) Creates a parameter for providing a 8-bit unsigned integer (byte) or a DbNull value to a stored procedure. Declaration public static DbParameterCollection AddSqlTinyIntInputParameter(this DbParameterCollection prms, string parameterName, byte? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Byte > value An unsigned 8-bit integer value or null. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlTinyIntOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a 32-bit signed integer (byte) from a stored procedure. Declaration public static DbParameterCollection AddSqlTinyIntOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlUniqueIdentifierInputParameter(DbParameterCollection, String, Guid) Creates a parameter for providing a Guid or DBNull (via Guid.Empty) to a stored procedure. Declaration public static DbParameterCollection AddSqlUniqueIdentifierInputParameter(this DbParameterCollection prms, string parameterName, Guid value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Guid value A Guid value. Will convert Guild.Empty to DBNull. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlUniqueIdentifierInputParameter(DbParameterCollection, String, Nullable<Guid>) Creates a parameter for providing a Guid or DBNull (via null value) to a stored procedure. Declaration public static DbParameterCollection AddSqlUniqueIdentifierInputParameter(this DbParameterCollection prms, string parameterName, Guid? value) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Nullable < System.Guid > value Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlUniqueIdentifierOutputParameter(DbParameterCollection, String) Creates an output parameter for retrieving a Guid from a stored procedure. Declaration public static DbParameterCollection AddSqlUniqueIdentifierOutputParameter(this DbParameterCollection prms, string parameterName) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlVarBinaryInputParameter(DbParameterCollection, String, Byte[], Int32) Creates a parameter for providing a variable-sized byte array to a stored procedure. A null reference will save DBNull. Declaration public static DbParameterCollection AddSqlVarBinaryInputParameter(this DbParameterCollection prms, string parameterName, byte[] value, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Byte [] value An array of bytes, or null. System.Int32 length The maximum allowable number of bytes in the database column. Use -1 for varbinary(max). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlVarBinaryOutputParameter(DbParameterCollection, String, Int32) Creates a parameter for obtaining a variable-sized byte array from a stored procedure. Declaration public static DbParameterCollection AddSqlVarBinaryOutputParameter(this DbParameterCollection prms, string parameterName, int length) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 length The maximum allowable number of bytes in the database column. Use -1 for varbinary(max). Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlVarCharInputParameter(DbParameterCollection, String, String, Int32, Int32) Creates parameter for providing a string or a DBNull value to a stored procedure, which is converted to the target ANSI code page (if possible). Declaration public static DbParameterCollection AddSqlVarCharInputParameter(this DbParameterCollection prms, string parameterName, string value, int maxLength, int localeId) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.String value An empty string will be saved as a zero-length string; a null string will be saved as a database null value. System.Int32 maxLength This should match the size of the parameter, not the size of the input string (and certainly not the number of bytes). For nvarchar(max) parameters, specify -1. Setting the value correctly will help avoid plan cache pollution (when not using stored procedures) and minimize memory buffer allocations. System.Int32 localeId Specify the code page for ANSI conversions. For example, the value 1033 is U.S. English. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended. | Improve this Doc View Source AddSqlVarCharOutputParameter(DbParameterCollection, String, Int32, Int32) Creates parameter for obtaining a string from a stored procedure, which has been converted from the source ANSI code page. Declaration public static DbParameterCollection AddSqlVarCharOutputParameter(this DbParameterCollection prms, string parameterName, int maxLength, int localeId) Parameters Type Name Description System.Data.Common.DbParameterCollection prms The existing parameter collection to which this output parameter should be added. System.String parameterName The name of the parameter. If the name doesn’t start with “@”, it will be automatically pre-pended. System.Int32 maxLength This should match the size of the parameter, not the size of the input string (and certainly not the number of bytes). For nvarchar(max) parameters, specify -1. Setting the value correctly will help avoid plan cache pollution (when not using stored procedures) and minimize memory buffer allocations. System.Int32 localeId Specify the code page for ANSI conversions. For example, the value 1033 is U.S. English. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection to which the parameter was appended."
  },
  "api/ArgentSea.StringExtensions.InputCleaningOptions.html": {
    "href": "api/ArgentSea.StringExtensions.InputCleaningOptions.html",
    "title": "Enum StringExtensions.InputCleaningOptions | ArgentSea Docs",
    "keywords": "Enum StringExtensions.InputCleaningOptions Namespace : ArgentSea Assembly : ArgentSea.dll Syntax [Flags] public enum InputCleaningOptions Fields Name Description AllowEmojis Do not remove Unicode surrogate values, like Emoji. AllowMultiline All “control” characters are removed by default; setting this flag preserve keep CrLf and/or Cr. It also ensures Windows line endings (Cr+Lf) when encountering Lf only (Unix line endings). CleanAll Remove starting and trailing whitespace, “control” characters including Lf and Cr, and extended characters like Emoji icons."
  },
  "api/ArgentSea.StringExtensions.html": {
    "href": "api/ArgentSea.StringExtensions.html",
    "title": "Class StringExtensions | ArgentSea Docs",
    "keywords": "Class StringExtensions This static class contains extension methods for cleaning input strings of invalid characters. It does NOT sanitize input strings for protection against injection attacks (your parmemeterized queries should protect against that). Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source CleanInput(String) Removes leading/trailing whitespace, control charactors (cr, lf, tab, etc.), and emojis from input string. Declaration public static string CleanInput(this string value) Parameters Type Name Description System.String value Input string, resumably provided by user. Returns Type Description System.String Input string with undesired characters removed. | Improve this Doc View Source CleanInput(String, StringExtensions.InputCleaningOptions) Declaration public static string CleanInput(this string value, StringExtensions.InputCleaningOptions flags) Parameters Type Name Description System.String value StringExtensions.InputCleaningOptions flags Returns Type Description System.String"
  },
  "api/ArgentSea.Test.ShardSerializationTests.html": {
    "href": "api/ArgentSea.Test.ShardSerializationTests.html",
    "title": "Class ShardSerializationTests | ArgentSea Docs",
    "keywords": "Class ShardSerializationTests Inheritance System.Object ShardSerializationTests Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Test Assembly : ArgentSea.Test.dll Syntax public class ShardSerializationTests Methods | Improve this Doc View Source TestShardChildSerializationInts() Declaration [Fact] public void TestShardChildSerializationInts() | Improve this Doc View Source TestShardKeySerializationFloat() Declaration [Fact] public void TestShardKeySerializationFloat() | Improve this Doc View Source TestShardKeySerializationInts1() Declaration [Fact] public void TestShardKeySerializationInts1() | Improve this Doc View Source TestShardKeySerializationInts2() Declaration [Fact] public void TestShardKeySerializationInts2() | Improve this Doc View Source TestShardKeySerializationMore1() Declaration [Fact] public void TestShardKeySerializationMore1() | Improve this Doc View Source TestShardKeySerializationMore2() Declaration [Fact] public void TestShardKeySerializationMore2() | Improve this Doc View Source TestShardKeySerializationStr() Declaration [Fact] public void TestShardKeySerializationStr()"
  },
  "api-pg/ArgentSea.Pg.Test.html": {
    "href": "api-pg/ArgentSea.Pg.Test.html",
    "title": "Namespace ArgentSea.Pg.Test | ArgentSea Docs",
    "keywords": "Namespace ArgentSea.Pg.Test Classes ConfigurationTests MappingTests"
  },
  "api/ArgentSea.QueryResultModelHandler-3.html": {
    "href": "api/ArgentSea.QueryResultModelHandler-3.html",
    "title": "Delegate QueryResultModelHandler<TShard, TArg, TModel> | ArgentSea Docs",
    "keywords": "Delegate QueryResultModelHandler<TShard, TArg, TModel> This delegate will be invoked for each shard (probably on different threads) to convert the cmd.Execute result to model types. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public delegate TModel QueryResultModelHandler<TShard, TArg, TModel>(TShard shardId, string sprocName, TArg optionalArgument, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable; Parameters Type Name Description TShard shardId The value of the Shard Number. System.String sprocName Used to uniquely identify any cached Expression Trees (along with TModel type) and also included in any logging information. TArg optionalArgument System.Data.Common.DbDataReader rdr A data reader instance supplied by the data provider when a query is executed. System.Data.Common.DbParameterCollection parameters An output parameter set supplied by the data provider when a query is executed. System.String connectionDescription Provides any logging writes with connection information to help troubleshoot any errors. Microsoft.Extensions.Logging.ILogger logger A logger instance for writing logs. Returns Type Description TModel An object of the defined type. Type Parameters Name Description TShard The Type of the ShardId. TArg The Type of an optional parameter that can be passed to the parsing function. If not used, simply use Type \"object\" and pass null if required. TModel The Type of the expected result"
  },
  "api/ArgentSea.QueryParameterCollection.html": {
    "href": "api/ArgentSea.QueryParameterCollection.html",
    "title": "Class QueryParameterCollection | ArgentSea Docs",
    "keywords": "Class QueryParameterCollection This is an implementation of the abstract DbParameterCollecion class. Unlike most provider-specific parameter collections, it can be created without a prior DbCommand object instance. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameterCollection QueryParameterCollection Implements System.Data.IDataParameterCollection System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Data.Common.DbParameterCollection.System.Collections.IList.get_Item(System.Int32) System.Data.Common.DbParameterCollection.System.Collections.IList.set_Item(System.Int32, System.Object) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.get_Item(System.String) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.set_Item(System.String, System.Object) System.Data.Common.DbParameterCollection.Item[System.Int32] System.Data.Common.DbParameterCollection.Item[System.String] System.Data.Common.DbParameterCollection.System.Collections.IList.Item[System.Int32] System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.Item[System.String] System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class QueryParameterCollection : DbParameterCollection, IDataParameterCollection, IList, ICollection, IEnumerable Properties | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.Count | Improve this Doc View Source SyncRoot Declaration public override object SyncRoot { get; } Property Value Type Description System.Object Overrides System.Data.Common.DbParameterCollection.SyncRoot Methods | Improve this Doc View Source Add(Object) Declaration public override int Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.Add(System.Object) | Improve this Doc View Source AddRange(Array) Declaration public override void AddRange(Array values) Parameters Type Name Description System.Array values Overrides System.Data.Common.DbParameterCollection.AddRange(System.Array) | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides System.Data.Common.DbParameterCollection.Clear() | Improve this Doc View Source Contains(Object) Declaration public override bool Contains(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.Contains(System.Object) | Improve this Doc View Source Contains(String) Declaration public override bool Contains(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.Contains(System.String) | Improve this Doc View Source CopyTo(Array, Int32) Declaration public override void CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index Overrides System.Data.Common.DbParameterCollection.CopyTo(System.Array, System.Int32) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbParameterCollection.GetEnumerator() | Improve this Doc View Source GetParameter(Int32) Declaration protected override DbParameter GetParameter(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.Int32) | Improve this Doc View Source GetParameter(String) Declaration protected override DbParameter GetParameter(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.String) | Improve this Doc View Source IndexOf(Object) Declaration public override int IndexOf(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.IndexOf(System.Object) | Improve this Doc View Source IndexOf(String) Declaration public override int IndexOf(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.IndexOf(System.String) | Improve this Doc View Source Insert(Int32, Object) Declaration public override void Insert(int index, object value) Parameters Type Name Description System.Int32 index System.Object value Overrides System.Data.Common.DbParameterCollection.Insert(System.Int32, System.Object) | Improve this Doc View Source Remove(Object) Declaration public override void Remove(object value) Parameters Type Name Description System.Object value Overrides System.Data.Common.DbParameterCollection.Remove(System.Object) | Improve this Doc View Source RemoveAt(Int32) Declaration public override void RemoveAt(int index) Parameters Type Name Description System.Int32 index Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.Int32) | Improve this Doc View Source RemoveAt(String) Declaration public override void RemoveAt(string parameterName) Parameters Type Name Description System.String parameterName Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.String) | Improve this Doc View Source SetParameter(Int32, DbParameter) Declaration protected override void SetParameter(int index, DbParameter value) Parameters Type Name Description System.Int32 index System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.Int32, System.Data.Common.DbParameter) | Improve this Doc View Source SetParameter(String, DbParameter) Declaration protected override void SetParameter(string parameterName, DbParameter value) Parameters Type Name Description System.String parameterName System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.String, System.Data.Common.DbParameter) Implements System.Data.IDataParameterCollection System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Extension Methods Mapper.CreateInputParameters<TModel>(DbParameterCollection, TModel, ILogger) Mapper.CreateInputParameters<TModel>(DbParameterCollection, TModel, HashSet<String>, ILogger) Mapper.CreateOutputParameters(DbParameterCollection, Type, ILogger) Mapper.CreateOutputParameters<TModel>(DbParameterCollection, ILogger) Mapper.CreateOutputParameters<TModel>(DbParameterCollection, HashSet<String>, ILogger) Mapper.CreateOutputParameters(DbParameterCollection, Type, HashSet<String>, ILogger) Mapper.ToModel<TModel>(DbParameterCollection, ILogger) Mapper.ToModel<TShard, TModel>(DbParameterCollection, TShard, ILogger)"
  },
  "api/ArgentSea.ParameterMapAttributeBase.html": {
    "href": "api/ArgentSea.ParameterMapAttributeBase.html",
    "title": "Class ParameterMapAttributeBase | ArgentSea Docs",
    "keywords": "Class ParameterMapAttributeBase Inheritance System.Object System.Attribute ParameterMapAttributeBase Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)] public abstract class ParameterMapAttributeBase : Attribute Constructors | Improve this Doc View Source ParameterMapAttributeBase(String, Int32) Declaration public ParameterMapAttributeBase(string name, int sqlType) Parameters Type Name Description System.String name System.Int32 sqlType | Improve this Doc View Source ParameterMapAttributeBase(String, Int32, Boolean) Declaration public ParameterMapAttributeBase(string name, int sqlType, bool isRequired) Parameters Type Name Description System.String name System.Int32 sqlType System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public virtual string ColumnName { get; } Property Value Type Description System.String | Improve this Doc View Source IsRequired Declaration public bool IsRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParameterName Declaration public virtual string ParameterName { get; } Property Value Type Description System.String | Improve this Doc View Source SqlType Declaration public int SqlType { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected abstract void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected abstract void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected abstract void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected abstract void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger | Improve this Doc View Source IsValidType(Type) Declaration public abstract bool IsValidType(Type candidate) Parameters Type Name Description System.Type candidate Returns Type Description System.Boolean"
  },
  "api/ArgentSea.MapShardKeyAttribute.html": {
    "href": "api/ArgentSea.MapShardKeyAttribute.html",
    "title": "Class MapShardKeyAttribute | ArgentSea Docs",
    "keywords": "Class MapShardKeyAttribute Inheritance System.Object System.Attribute MapShardKeyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class MapShardKeyAttribute : Attribute Constructors | Improve this Doc View Source MapShardKeyAttribute(DataOrigin, String) Declaration public MapShardKeyAttribute(DataOrigin origin, string recordIdName) Parameters Type Name Description DataOrigin origin System.String recordIdName | Improve this Doc View Source MapShardKeyAttribute(DataOrigin, String, String) Declaration public MapShardKeyAttribute(DataOrigin origin, string shardIdName, string recordIdName) Parameters Type Name Description DataOrigin origin System.String shardIdName System.String recordIdName | Improve this Doc View Source MapShardKeyAttribute(Char, String) Declaration public MapShardKeyAttribute(char originValue, string recordIdName) Parameters Type Name Description System.Char originValue System.String recordIdName | Improve this Doc View Source MapShardKeyAttribute(Char, String, String) Declaration public MapShardKeyAttribute(char originValue, string shardIdName, string recordIdName) Parameters Type Name Description System.Char originValue System.String shardIdName System.String recordIdName Properties | Improve this Doc View Source Origin Declaration public DataOrigin Origin { get; set; } Property Value Type Description DataOrigin | Improve this Doc View Source RecordIdName Declaration public virtual string RecordIdName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardIdName Declaration public virtual string ShardIdName { get; set; } Property Value Type Description System.String"
  },
  "api/ArgentSea.MapShardChildAttribute.html": {
    "href": "api/ArgentSea.MapShardChildAttribute.html",
    "title": "Class MapShardChildAttribute | ArgentSea Docs",
    "keywords": "Class MapShardChildAttribute Inheritance System.Object System.Attribute MapShardChildAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class MapShardChildAttribute : Attribute Constructors | Improve this Doc View Source MapShardChildAttribute(DataOrigin, String, String) Declaration public MapShardChildAttribute(DataOrigin origin, string recordIdName, string childIdName) Parameters Type Name Description DataOrigin origin System.String recordIdName System.String childIdName | Improve this Doc View Source MapShardChildAttribute(DataOrigin, String, String, String) Declaration public MapShardChildAttribute(DataOrigin origin, string shardIdName, string recordIdName, string childIdName) Parameters Type Name Description DataOrigin origin System.String shardIdName System.String recordIdName System.String childIdName | Improve this Doc View Source MapShardChildAttribute(Char, String, String) Declaration public MapShardChildAttribute(char originValue, string recordIdName, string childIdName) Parameters Type Name Description System.Char originValue System.String recordIdName System.String childIdName | Improve this Doc View Source MapShardChildAttribute(Char, String, String, String) Declaration public MapShardChildAttribute(char originValue, string shardIdName, string recordIdName, string childIdName) Parameters Type Name Description System.Char originValue System.String shardIdName System.String recordIdName System.String childIdName Properties | Improve this Doc View Source ChildIdName Declaration public virtual string ChildIdName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Origin Declaration public DataOrigin Origin { get; set; } Property Value Type Description DataOrigin | Improve this Doc View Source RecordIdName Declaration public virtual string RecordIdName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardIdName Declaration public virtual string ShardIdName { get; set; } Property Value Type Description System.String"
  },
  "api/ArgentSea.Mapper.html": {
    "href": "api/ArgentSea.Mapper.html",
    "title": "Class Mapper | ArgentSea Docs",
    "keywords": "Class Mapper This static class contains the logic for mapping database parameters to/from properties. Inheritance System.Object Mapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public static class Mapper Methods | Improve this Doc View Source CreateInputParameters<TModel>(DbParameterCollection, TModel, ILogger) Accepts a Sql Parameter collection and appends Sql input parameters whose values correspond to the provided object properties and MapTo attributes. Declaration public static DbParameterCollection CreateInputParameters<TModel>(this DbParameterCollection parameters, TModel model, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, generally belonging to a ADO.Net Command object. TModel model An object model instance. The property values are use as parameter values. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection Type Parameters Name Description TModel The type of the object. The \"MapTo\" attributes are used to create the Sql metadata and columns. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source CreateInputParameters<TModel>(DbParameterCollection, TModel, HashSet<String>, ILogger) Accepts a Sql Parameter collection and appends Sql input parameters whose values correspond to the provided object properties and MapTo attributes. Declaration public static DbParameterCollection CreateInputParameters<TModel>(this DbParameterCollection parameters, TModel model, HashSet<string> ignoreParameters, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, generally belonging to a ADO.Net Command object. TModel model An object model instance. The property values are use as parameter values. System.Collections.Generic.HashSet < System.String > ignoreParameters A lists of parameter names that should not be created. Each entry must exactly match the parameter name, including prefix and casing. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection Type Parameters Name Description TModel The type of the object. The \"MapTo\" attributes are used to create the Sql metadata and columns. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source CreateOutputParameters(DbParameterCollection, Type, ILogger) Accepts a Sql Parameter collection and appends Sql output parameters corresponding to the MapTo attributes. Declaration public static DbParameterCollection CreateOutputParameters(this DbParameterCollection parameters, Type TModel, ILogger logger) Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, possibly belonging to a ADO.Net Command object or a QueryParmaters object. System.Type TModel The type of the object. The \"MapTo\" attributes are used to create the Sql parameter types. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source CreateOutputParameters(DbParameterCollection, Type, HashSet<String>, ILogger) Accepts a Sql Parameter collection and appends Sql output parameters corresponding to the MapTo attributes. Declaration public static DbParameterCollection CreateOutputParameters(this DbParameterCollection parameters, Type tModel, HashSet<string> ignoreParameters, ILogger logger) Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, generally belonging to a ADO.Net Command object. System.Type tModel The type of the object. The \"MapTo\" attributes are used to read the Sql parameter collection values. System.Collections.Generic.HashSet < System.String > ignoreParameters A lists of parameter names that should not be created. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source CreateOutputParameters<TModel>(DbParameterCollection, ILogger) Accepts a Sql Parameter collection and appends Sql output parameters corresponding to the MapTo attributes. Declaration public static DbParameterCollection CreateOutputParameters<TModel>(this DbParameterCollection parameters, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, possibly belonging to a ADO.Net Command object or a QueryParmaters object. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection, enabling a fluent API. Type Parameters Name Description TModel The type of the object. The \"MapTo\" attributes are used to create the Sql parameter types. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source CreateOutputParameters<TModel>(DbParameterCollection, HashSet<String>, ILogger) Accepts a Sql Parameter collection and appends Sql output parameters corresponding to the MapTo attributes. Declaration public static DbParameterCollection CreateOutputParameters<TModel>(this DbParameterCollection parameters, HashSet<string> ignoreParameters, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, possibly belonging to a ADO.Net Command object or a QueryParmaters object. System.Collections.Generic.HashSet < System.String > ignoreParameters A lists of parameter names that should not be created. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Data.Common.DbParameterCollection The DbParameterCollection, enabling a fluent API. Type Parameters Name Description TModel The type of the object. The \"MapTo\" attributes are used to create the Sql parameter types. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ListFromReaderResultsHandler<TShard, TModel>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) Uses Mapping attributes to return a list of TModel records, populated from DataReader rows. Declaration public static IList<TModel> ListFromReaderResultsHandler<TShard, TModel>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The DbDataReader containing tables and rows. System.Data.Common.DbParameterCollection parameters Not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description System.Collections.Generic.IList <TModel> A list of TModel objects, one for each record returned by the DataReader. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with eight result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. TReaderResult6 A type with attributes that correspond to the seventh data reader result. TReaderResult7 A type with attributes that correspond to the eighth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr Not used, but required for method signature. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with one result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult A type with attributes that correspond to the data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with two result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with three result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with four result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with five result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with six result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using output parameters and data reader results. Declaration public static TModel ModelFromOutResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with seven result sets for list properties. System.Data.Common.DbParameterCollection parameters The output parameter set which correspond to the attributes of TModel. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. TReaderResult6 A type with attributes that correspond to the seventh data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with eight result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. TReaderResult6 A type with attributes that correspond to the seventh data reader result. TReaderResult7 A type with attributes that correspond to the eighth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with one result set. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with two result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with three result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with four result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with five result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with six result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(TShard, String, Object, DbDataReader, DbParameterCollection, String, ILogger) A compatible method which uses Mapping attributes to return a instance of TModel using data reader (SELECT) results. Declaration public static TModel ModelFromReaderResultsHandler<TShard, TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(TShard shardId, string sprocName, object notUsed, DbDataReader rdr, DbParameterCollection parameters, string connectionDescription, ILogger logger) where TShard : IComparable where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description TShard shardId The shard identifier. System.String sprocName The name of the stored procedure or function, which is used for logging, if any. System.Object notUsed The optional data parameter is not used but is required by the delegate’s method signature. System.Data.Common.DbDataReader rdr The open data reader with seven result sets. System.Data.Common.DbParameterCollection parameters The output parameter set, which is not used. System.String connectionDescription The connection description is used in logging. Microsoft.Extensions.Logging.ILogger logger A logging instance. Returns Type Description TModel An instance of TModel or null. Type Parameters Name Description TShard The type of the shard identifier. TModel The type of the return value. TReaderResult0 A type with attributes that correspond to the first data reader result. TReaderResult1 A type with attributes that correspond to the second data reader result. TReaderResult2 A type with attributes that correspond to the third data reader result. TReaderResult3 A type with attributes that correspond to the forth data reader result. TReaderResult4 A type with attributes that correspond to the fifth data reader result. TReaderResult5 A type with attributes that correspond to the sixth data reader result. TReaderResult6 A type with attributes that correspond to the seventh data reader result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. UnexpectedMultiRowResultException Thrown when the data reader root type has multiple rows. | Improve this Doc View Source ToList<TModel>(DbDataReader, ILogger) Accepts a data reader object and returns a list of objects of the specified type, one for each record. Declaration public static IList<TModel> ToList<TModel>(this DbDataReader rdr, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbDataReader rdr The data reader, set to the current result set. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Collections.Generic.IList <TModel> A list of objects of the specified type, one for each result. Type Parameters Name Description TModel The type of the list result Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ToList<TShard, TModel>(DbDataReader, TShard, ILogger) Accepts a data reader object and returns a list of objects of the specified type, one for each record. Declaration public static IList<TModel> ToList<TShard, TModel>(this DbDataReader rdr, TShard shardId, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description System.Data.Common.DbDataReader rdr The data reader, set to the current result set. TShard shardId The identifier for the current shard. Required for ShardKey and ShardChild types. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description System.Collections.Generic.IList <TModel> A list of objects of the specified type, one for each result. Type Parameters Name Description TShard The type of the Shard Id. TModel The type of the list result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ToModel<TModel>(DbDataReader, ILogger) Accepts a single-row data reader object and returns a an object instance of the specified type using Mapping attributes. Declaration public static TModel ToModel<TModel>(this DbDataReader rdr, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbDataReader rdr The data reader, set to the current result set. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description TModel An object of the specified type. Type Parameters Name Description TModel The type of the result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ToModel<TModel>(DbParameterCollection, ILogger) Creates a new object with property values based upon the provided output parameters which correspond to the MapTo attributes. Declaration public static TModel ToModel<TModel>(this DbParameterCollection parameters, ILogger logger) where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, generally belonging to a ADO.Net Command object after a database query. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description TModel An object of the specified type, with properties set to parameter values. Type Parameters Name Description TModel The type of the object. The \"MapTo\" attributes are used to read the Sql parameter collection values. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ToModel<TShard, TModel>(DbDataReader, TShard, ILogger) Accepts a single-row data reader object and returns a an object instance of the specified type using Mapping attributes. Declaration public static TModel ToModel<TShard, TModel>(this DbDataReader rdr, TShard shardId, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description System.Data.Common.DbDataReader rdr The data reader, set to the current result set. TShard shardId The identifier for the current shard. Required for ShardKey and ShardChild types. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description TModel An object of the specified type. Type Parameters Name Description TShard The type of the Shard Id. TModel The type of the result. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type. | Improve this Doc View Source ToModel<TShard, TModel>(DbParameterCollection, TShard, ILogger) Creates a new object with property values based upon the provided output parameters which correspond to the MapTo attributes. Declaration public static TModel ToModel<TShard, TModel>(this DbParameterCollection parameters, TShard shardId, ILogger logger) where TShard : IComparable where TModel : class, new() Parameters Type Name Description System.Data.Common.DbParameterCollection parameters A parameter collection, generally belonging to a ADO.Net Command object after a database query. TShard shardId The identifier for the current shard. Required for ShardKey and ShardChild types. Microsoft.Extensions.Logging.ILogger logger The logger instance to write any processing or debug information to. Returns Type Description TModel An object of the specified type, with properties set to parameter values. Type Parameters Name Description TShard The type of the Shard Id. TModel The type of the object. The \"MapTo\" attributes are used to read the Sql parameter collection values. Exceptions Type Condition InvalidMapTypeException Thrown when the property data type is not supported by the MapTo* atribute type."
  },
  "api/ArgentSea.IShardSetConfigurationOptions-1.html": {
    "href": "api/ArgentSea.IShardSetConfigurationOptions-1.html",
    "title": "Interface IShardSetConfigurationOptions<TShard> | ArgentSea Docs",
    "keywords": "Interface IShardSetConfigurationOptions<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IShardSetConfigurationOptions<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source ShardSetsInternal Declaration IShardConnectionsConfiguration<TShard>[] ShardSetsInternal { get; } Property Value Type Description IShardConnectionsConfiguration <TShard>[]"
  },
  "api/ArgentSea.IShardConnectionsConfiguration-1.html": {
    "href": "api/ArgentSea.IShardConnectionsConfiguration-1.html",
    "title": "Interface IShardConnectionsConfiguration<TShard> | ArgentSea Docs",
    "keywords": "Interface IShardConnectionsConfiguration<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IShardConnectionsConfiguration<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source ShardSetName Declaration string ShardSetName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardsInternal Declaration IShardConnectionConfiguration<TShard>[] ShardsInternal { get; } Property Value Type Description IShardConnectionConfiguration <TShard>[]"
  },
  "api/ArgentSea.InvalidMapTypeException.html": {
    "href": "api/ArgentSea.InvalidMapTypeException.html",
    "title": "Class InvalidMapTypeException | ArgentSea Docs",
    "keywords": "Class InvalidMapTypeException This exception is raise when a model property has a database mapping attribute that is not of the correct type. Inheritance System.Object System.Exception InvalidMapTypeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class InvalidMapTypeException : Exception, ISerializable Examples An attempt to map a string property to an integer parameter would generate this error. Constructors | Improve this Doc View Source InvalidMapTypeException() Initializes a new instance of the InvalidMapTypeException class with no error message. Declaration public InvalidMapTypeException() | Improve this Doc View Source InvalidMapTypeException(PropertyInfo, Int32) Initializes a new instance of the InvalidMapTypeException class. Declaration public InvalidMapTypeException(PropertyInfo property, int sqlType) Parameters Type Name Description System.Reflection.PropertyInfo property The property decorated with the mapping attribute. System.Int32 sqlType The stored procedure parameter type (int, not enum, due to provider discrepancies). | Improve this Doc View Source InvalidMapTypeException(String) Initializes a new instance of the InvalidMapTypeException class with a specified error message. Declaration public InvalidMapTypeException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source InvalidMapTypeException(String, Exception) Initializes a new instance of the InvalidMapTypeException class. Declaration public InvalidMapTypeException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. | Improve this Doc View Source InvalidMapTypeException(String, Type, Int32) Declaration public InvalidMapTypeException(string variableName, Type type, int sqlType) Parameters Type Name Description System.String variableName System.Type type System.Int32 sqlType Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ArgentSea.DataOrigin.html": {
    "href": "api/ArgentSea.DataOrigin.html",
    "title": "Struct DataOrigin | ArgentSea Docs",
    "keywords": "Struct DataOrigin This object help descript the “type” of data. For example, you could assign Customer data a data origin value of 'c'. When comparing data values, the ShardKey/ShardChild will not match if the data origin is not the same value — even if IDs are the same. This helps prevent accidentaly comparisions that are not valid and also prevents collisions if you choose allows values of different types to be stored in the same cache. Implements System.IEquatable < System.Object > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public struct DataOrigin : IEquatable<object> Constructors | Improve this Doc View Source DataOrigin(Char) Declaration public DataOrigin(char sourceIndicator) Parameters Type Name Description System.Char sourceIndicator Properties | Improve this Doc View Source SourceIndicator Declaration public char SourceIndicator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DataOrigin, DataOrigin) Declaration public static bool operator ==(DataOrigin do1, DataOrigin do2) Parameters Type Name Description DataOrigin do1 DataOrigin do2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(DataOrigin, DataOrigin) Declaration public static bool operator !=(DataOrigin do1, DataOrigin do2) Parameters Type Name Description DataOrigin do1 DataOrigin do2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ArgentSea.DatabasesBase-1.DataConnection.html": {
    "href": "api/ArgentSea.DatabasesBase-1.DataConnection.html",
    "title": "Class DatabasesBase<TConfiguration>.DataConnection | ArgentSea Docs",
    "keywords": "Class DatabasesBase<TConfiguration>.DataConnection Inheritance System.Object DatabasesBase<TConfiguration>.DataConnection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DataConnection Properties | Improve this Doc View Source ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description System.String Methods | Improve this Doc View Source LookupAsync<TValue>(String, DbParameterCollection, CancellationToken) Connect to the database and return a single value. Declaration public Task<TValue> LookupAsync<TValue>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the value. System.Data.Common.DbParameterCollection parameters A parameters collction. Input parameters may be used to find the parameter; will return the value of the first output (or input/output) parameter. If TValue is an int, will also return the sproc return value. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TValue> The retrieved value. Type Parameters Name Description TValue The expected type of the return value. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return the values as a list of objects. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list containing an object for each data row. Type Parameters Name Description TModel The type of object to be listed. | Improve this Doc View Source MapOutputAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results parameters. Declaration public Task<TModel> MapReaderAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source QueryAsync<TModel>(String, DbParameterCollection, QueryResultModelHandler<Int32, Object, TModel>, Boolean, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<int, object, TModel> resultHandler, bool isTopOne, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. QueryResultModelHandler < System.Int32 , System.Object , TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TModel The type of the object to be returned. | Improve this Doc View Source QueryAsync<TArg, TModel>(String, DbParameterCollection, QueryResultModelHandler<Int32, TArg, TModel>, Boolean, TArg, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<int, TArg, TModel> resultHandler, bool isTopOne, TArg optionalArgument, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. QueryResultModelHandler < System.Int32 , TArg, TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. TArg optionalArgument System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TArg TModel The type of the object to be returned. | Improve this Doc View Source RunAsync(String, DbParameterCollection, CancellationToken) Executes a database procedure or function that does not return a data result. Declaration public Task RunAsync(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure or function to call. System.Data.Common.DbParameterCollection parameters The query parameters with values set. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task Throws an error if not successful."
  },
  "api-sql/ArgentSea.Sql.SqlShardSets.html": {
    "href": "api-sql/ArgentSea.Sql.SqlShardSets.html",
    "title": "Class SqlShardSets | ArgentSea Docs",
    "keywords": "Class SqlShardSets A collection of ShardSets (with a byte shardId type). Inheritance System.Object ShardSetsBase < System.Byte , SqlShardConnectionOptions < System.Byte >> SqlShardSets Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.Item[String] ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.Count ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.IsSynchronized ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.SyncRoot ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.CopyTo(Array, Int32) ShardSetsBase<Byte, SqlShardConnectionOptions<Byte>>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlShardSets : ShardSetsBase<byte, SqlShardConnectionOptions<byte>>, ICollection, IEnumerable Constructors | Improve this Doc View Source SqlShardSets(IOptions<SqlShardConnectionOptions<Byte>>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<SqlShardSets<Byte>>) Declaration public SqlShardSets(IOptions<SqlShardConnectionOptions<byte>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<SqlShardSets<byte>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < SqlShardConnectionOptions < System.Byte >> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < SqlShardSets < System.Byte >> logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-sql/ArgentSea.Sql.SqlShardSets-1.html": {
    "href": "api-sql/ArgentSea.Sql.SqlShardSets-1.html",
    "title": "Class SqlShardSets<TShard> | ArgentSea Docs",
    "keywords": "Class SqlShardSets<TShard> A collection of ShardSets. Inheritance System.Object ShardSetsBase <TShard, SqlShardConnectionOptions <TShard>> SqlShardSets<TShard> Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.Item[String] ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.Count ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.IsSynchronized ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.SyncRoot ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.CopyTo(Array, Int32) ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlShardSets<TShard> : ShardSetsBase<TShard, SqlShardConnectionOptions<TShard>>, ICollection, IEnumerable where TShard : IComparable Type Parameters Name Description TShard The type of the shardId index value. Constructors | Improve this Doc View Source SqlShardSets(IOptions<SqlShardConnectionOptions<TShard>>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<SqlShardSets<TShard>>) Declaration public SqlShardSets(IOptions<SqlShardConnectionOptions<TShard>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<SqlShardSets<TShard>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < SqlShardConnectionOptions <TShard>> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < SqlShardSets <TShard>> logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.html": {
    "href": "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.html",
    "title": "Class SqlShardConnectionOptions<TShard> | ArgentSea Docs",
    "keywords": "Class SqlShardConnectionOptions<TShard> This options class contains the shard dataset configuration information. Inheritance System.Object SqlShardConnectionOptions<TShard> Implements IShardSetConfigurationOptions <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlShardConnectionOptions<TShard> : IShardSetConfigurationOptions<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source ShardSetsInternal Declaration public IShardConnectionsConfiguration<TShard>[] ShardSetsInternal { get; } Property Value Type Description IShardConnectionsConfiguration <TShard>[] | Improve this Doc View Source SqlShardSets Declaration public SqlShardConnectionOptions<TShard>.SqlShardConnectionsConfiguration[] SqlShardSets { get; set; } Property Value Type Description SqlShardConnectionOptions.SqlShardConnectionsConfiguration <>[] Implements IShardSetConfigurationOptions<TShard>"
  },
  "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.SqlShardConnectionsConfiguration.html": {
    "href": "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.SqlShardConnectionsConfiguration.html",
    "title": "Class SqlShardConnectionOptions<TShard>.SqlShardConnectionsConfiguration | ArgentSea Docs",
    "keywords": "Class SqlShardConnectionOptions<TShard>.SqlShardConnectionsConfiguration Inheritance System.Object SqlShardConnectionOptions<TShard>.SqlShardConnectionsConfiguration Implements IShardConnectionsConfiguration <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlShardConnectionsConfiguration : IShardConnectionsConfiguration<TShard> Properties | Improve this Doc View Source Shards Declaration public SqlShardConnectionOptions<TShard>.SqlShardConnectionConfiguration[] Shards { get; set; } Property Value Type Description SqlShardConnectionOptions.SqlShardConnectionConfiguration <>[] | Improve this Doc View Source ShardSetName Declaration public string ShardSetName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardsInternal Declaration public IShardConnectionConfiguration<TShard>[] ShardsInternal { get; } Property Value Type Description IShardConnectionConfiguration <TShard>[] Implements IShardConnectionsConfiguration<TShard>"
  },
  "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.SqlShardConnectionConfiguration.html": {
    "href": "api-sql/ArgentSea.Sql.SqlShardConnectionOptions-1.SqlShardConnectionConfiguration.html",
    "title": "Class SqlShardConnectionOptions<TShard>.SqlShardConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class SqlShardConnectionOptions<TShard>.SqlShardConnectionConfiguration Inheritance System.Object SqlShardConnectionOptions<TShard>.SqlShardConnectionConfiguration Implements IShardConnectionConfiguration <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlShardConnectionConfiguration : IShardConnectionConfiguration<TShard> Properties | Improve this Doc View Source ReadConnection Declaration public SqlConnectionConfiguration ReadConnection { get; set; } Property Value Type Description SqlConnectionConfiguration | Improve this Doc View Source ReadConnectionInternal Declaration public IConnectionConfiguration ReadConnectionInternal { get; } Property Value Type Description IConnectionConfiguration | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; set; } Property Value Type Description TShard | Improve this Doc View Source WriteConnection Declaration public SqlConnectionConfiguration WriteConnection { get; set; } Property Value Type Description SqlConnectionConfiguration | Improve this Doc View Source WriteConnectionInternal Declaration public IConnectionConfiguration WriteConnectionInternal { get; } Property Value Type Description IConnectionConfiguration Implements IShardConnectionConfiguration<TShard>"
  },
  "api-sql/ArgentSea.Sql.SqlParameterMapAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.SqlParameterMapAttribute.html",
    "title": "Class SqlParameterMapAttribute | ArgentSea Docs",
    "keywords": "Class SqlParameterMapAttribute This abstract class is a SQL-specific implementation of the ParameterMapAttribute class. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlBigIntAttribute MapToSqlBinaryAttribute MapToSqlBitAttribute MapToSqlCharAttribute MapToSqlDateAttribute MapToSqlDateTime2Attribute MapToSqlDateTimeAttribute MapToSqlDateTimeOffsetAttribute MapToSqlDecimalAttribute MapToSqlFloatAttribute MapToSqlIntAttribute MapToSqlMoneyAttribute MapToSqlNCharAttribute MapToSqlNVarCharAttribute MapToSqlRealAttribute MapToSqlSmallIntAttribute MapToSqlSmallMoneyAttribute MapToSqlTimeAttribute MapToSqlTinyIntAttribute MapToSqlUniqueIdentifierAttribute MapToSqlVarBinaryAttribute MapToSqlVarCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired ParameterMapAttributeBase.IsValidType(Type) ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, Int32, Type, ParameterExpression, ILogger) System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public abstract class SqlParameterMapAttribute : ParameterMapAttributeBase Constructors | Improve this Doc View Source SqlParameterMapAttribute(String, SqlDbType) Declaration public SqlParameterMapAttribute(string parameterName, SqlDbType sqlType) Parameters Type Name Description System.String parameterName System.Data.SqlDbType sqlType | Improve this Doc View Source SqlParameterMapAttribute(String, SqlDbType, Boolean) Declaration public SqlParameterMapAttribute(string parameterName, SqlDbType sqlType, bool isRequired) Parameters Type Name Description System.String parameterName System.Data.SqlDbType sqlType System.Boolean isRequired Methods | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected abstract void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger"
  },
  "api-sql/ArgentSea.Sql.MapToSqlBitAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlBitAttribute.html",
    "title": "Class MapToSqlBitAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlBitAttribute This attribute maps a model property to/from a SQL Bit parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlBitAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlBitAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlBitAttribute(String) Map this property to the specified Bit (boolean) database column. Declaration public MapToSqlBitAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlBitAttribute(String, Boolean) Declaration public MapToSqlBitAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlBinaryAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlBinaryAttribute.html",
    "title": "Class MapToSqlBinaryAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlBinaryAttribute This attribute maps a model property to/from a SQL Binary parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlBinaryAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlBinaryAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlBinaryAttribute(String, Int32) Map this property to the specified fixed-size Binary database column. Declaration public MapToSqlBinaryAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The size of the binary value. | Improve this Doc View Source MapToSqlBinaryAttribute(String, Int32, Boolean) Map this property to the specified fixed-size Binary database column. Declaration public MapToSqlBinaryAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The size of the binary value. System.Boolean isRequired When true, set the entire model instance to null if the parameter or column is db null. Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlBigIntAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlBigIntAttribute.html",
    "title": "Class MapToSqlBigIntAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlBigIntAttribute This attribute maps a model property to/from a SQL BigInt parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlBigIntAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlBigIntAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlBigIntAttribute(String) Map this property to the specified BigInt (64-bit) database column. Declaration public MapToSqlBigIntAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlBigIntAttribute(String, Boolean) Declaration public MapToSqlBigIntAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.DataProviderServiceFactory.html": {
    "href": "api-sql/ArgentSea.Sql.DataProviderServiceFactory.html",
    "title": "Class DataProviderServiceFactory | ArgentSea Docs",
    "keywords": "Class DataProviderServiceFactory This class is a provider-specific resouce to enable provider-neutral code to execute. It is unlikely that you would reference this in consumer code. Inheritance System.Object DataProviderServiceFactory Implements IDataProviderServiceFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class DataProviderServiceFactory : IDataProviderServiceFactory Methods | Improve this Doc View Source GetIsErrorTransient(Exception) Declaration public bool GetIsErrorTransient(Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Boolean | Improve this Doc View Source NewCommand(String, DbConnection) Declaration public DbCommand NewCommand(string storedProcedureName, DbConnection connection) Parameters Type Name Description System.String storedProcedureName System.Data.Common.DbConnection connection Returns Type Description System.Data.Common.DbCommand | Improve this Doc View Source NewConnection(String) Declaration public DbConnection NewConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection | Improve this Doc View Source SetParameters(DbCommand, DbParameterCollection, Dictionary<String, Object>) Declaration public void SetParameters(DbCommand cmd, DbParameterCollection parameters, Dictionary<string, object> parameterValues) Parameters Type Name Description System.Data.Common.DbCommand cmd System.Data.Common.DbParameterCollection parameters System.Collections.Generic.Dictionary < System.String , System.Object > parameterValues Implements IDataProviderServiceFactory"
  },
  "api-pg/ArgentSea.Pg.PgDbConnectionOptions.html": {
    "href": "api-pg/ArgentSea.Pg.PgDbConnectionOptions.html",
    "title": "Class PgDbConnectionOptions | ArgentSea Docs",
    "keywords": "Class PgDbConnectionOptions This configuration class defines an array of database connection configurations . For example, you might configure your appsettings.json like this: \"PgDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"Host\": \"localhost\", \"Database\": \"MyDb\" } } ] Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match a key in the DataResilienceOptions array. Inheritance System.Object PgDbConnectionOptions Implements IDatabaseConfigurationOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgDbConnectionOptions : IDatabaseConfigurationOptions Properties | Improve this Doc View Source DbConnectionsInternal Declaration public IDatabaseConnectionConfiguration[] DbConnectionsInternal { get; } Property Value Type Description IDatabaseConnectionConfiguration [] | Improve this Doc View Source PgDbConnections Declaration public PgDbConnectionConfiguration[] PgDbConnections { get; set; } Property Value Type Description PgDbConnectionConfiguration [] Implements IDatabaseConfigurationOptions"
  },
  "api-pg/ArgentSea.Pg.PgDbConnectionConfiguration.html": {
    "href": "api-pg/ArgentSea.Pg.PgDbConnectionConfiguration.html",
    "title": "Class PgDbConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class PgDbConnectionConfiguration Inheritance System.Object PgDbConnectionConfiguration Implements IDatabaseConnectionConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgDbConnectionConfiguration : IDatabaseConnectionConfiguration Properties | Improve this Doc View Source DatabaseKey Declaration public string DatabaseKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataConnection Declaration public PgConnectionConfiguration DataConnection { get; set; } Property Value Type Description PgConnectionConfiguration | Improve this Doc View Source DataConnectionInternal Declaration public IConnectionConfiguration DataConnectionInternal { get; } Property Value Type Description IConnectionConfiguration Implements IDatabaseConnectionConfiguration"
  },
  "api-pg/ArgentSea.Pg.MapToPgTextAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgTextAttribute.html",
    "title": "Class MapToPgTextAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgTextAttribute This attribute maps a model property to/from a PostgreSQL Text parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgTextAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgTextAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgTextAttribute(String) Map this property to the specified Unicode database column, with any size length. Declaration public MapToPgTextAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix ':' as needed. | Improve this Doc View Source MapToPgTextAttribute(String, Boolean) Declaration public MapToPgTextAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmPgRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmPgRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgSmallintAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgSmallintAttribute.html",
    "title": "Class MapToPgSmallintAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgSmallintAttribute This attribute maps a model property to/from a PostgreSQL Smallint parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgSmallintAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgSmallintAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgSmallintAttribute(String) Map this property to the specified SmallInt (16-bit) database column. Declaration public MapToPgSmallintAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgSmallintAttribute(String, Boolean) Declaration public MapToPgSmallintAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgRealAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgRealAttribute.html",
    "title": "Class MapToPgRealAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgRealAttribute This attribute maps a model property to/from a PostgreSQL Real parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgRealAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgRealAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgRealAttribute(String) Map this property to the specified Real (32-bit floating point or .NET float) database column. Declaration public MapToPgRealAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgRealAttribute(String, Boolean) Declaration public MapToPgRealAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgNumericAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgNumericAttribute.html",
    "title": "Class MapToPgNumericAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgNumericAttribute This attribute maps a model property to/from a PostgreSQL Numeric parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgNumericAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgNumericAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgNumericAttribute(String, Byte, Byte) Map this property to the specified decimal database column. Declaration public MapToPgNumericAttribute(string parameterName, byte precision, byte scale) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Byte precision The maximum number of digits in the database value. System.Byte scale The number of digits to the right of the decimal point. | Improve this Doc View Source MapToPgNumericAttribute(String, Byte, Byte, Boolean) Declaration public MapToPgNumericAttribute(string parameterName, byte precision, byte scale, bool isRequired) Parameters Type Name Description System.String parameterName System.Byte precision System.Byte scale System.Boolean isRequired Properties | Improve this Doc View Source Precision Declaration public byte Precision { get; } Property Value Type Description System.Byte | Improve this Doc View Source Scale Declaration public byte Scale { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgByteaAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgByteaAttribute.html",
    "title": "Class MapToPgByteaAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgByteaAttribute This attribute maps a model property to/from a PostgreSQL Byteea parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgByteaAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgByteaAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgByteaAttribute(String, Int32) Declaration public MapToPgByteaAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName System.Int32 length | Improve this Doc View Source MapToPgByteaAttribute(String, Int32, Boolean) Declaration public MapToPgByteaAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgBooleanAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgBooleanAttribute.html",
    "title": "Class MapToPgBooleanAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgBooleanAttribute This attribute maps a model property to/from a PostgreSQL Boolean parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgBooleanAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgBooleanAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgBooleanAttribute(String) Map this property to the specified Bit (boolean) database column. Declaration public MapToPgBooleanAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgBooleanAttribute(String, Boolean) Declaration public MapToPgBooleanAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api/ArgentSea.UnexpectedSqlResultException.html": {
    "href": "api/ArgentSea.UnexpectedSqlResultException.html",
    "title": "Class UnexpectedSqlResultException | ArgentSea Docs",
    "keywords": "Class UnexpectedSqlResultException The exception is thrown when an output parameter is expected, but not found, when ExecuteQueryToValueAsync is invoked. Inheritance System.Object System.Exception UnexpectedSqlResultException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class UnexpectedSqlResultException : Exception, ISerializable Constructors | Improve this Doc View Source UnexpectedSqlResultException() Initializes a new instance of the UnexpectedSqlResultException class with no error message. Declaration public UnexpectedSqlResultException() | Improve this Doc View Source UnexpectedSqlResultException(String) Initializes a new instance of the UnexpectedSqlResultException class with a specified error message. Declaration public UnexpectedSqlResultException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source UnexpectedSqlResultException(String, Exception) Initializes a new instance of the UnexpectedSqlResultException class. Declaration public UnexpectedSqlResultException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ArgentSea.ShardParameterValue-1.html": {
    "href": "api/ArgentSea.ShardParameterValue-1.html",
    "title": "Class ShardParameterValue<TShard> | ArgentSea Docs",
    "keywords": "Class ShardParameterValue<TShard> Inheritance System.Object ShardParameterValue<TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class ShardParameterValue<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source parameterName Declaration public string parameterName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; set; } Property Value Type Description TShard | Improve this Doc View Source Value Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/ArgentSea.MapToModel.html": {
    "href": "api/ArgentSea.MapToModel.html",
    "title": "Class MapToModel | ArgentSea Docs",
    "keywords": "Class MapToModel Inheritance System.Object System.Attribute MapToModel Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)] public class MapToModel : Attribute"
  },
  "api/ArgentSea.DataConnectionConfigurationBase.html": {
    "href": "api/ArgentSea.DataConnectionConfigurationBase.html",
    "title": "Class DataConnectionConfigurationBase | ArgentSea Docs",
    "keywords": "Class DataConnectionConfigurationBase Abstract class implementing the data connection functionality shared by PostgreSQL and SQL Server implementations. Inheritance System.Object DataConnectionConfigurationBase Implements IConnectionConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public abstract class DataConnectionConfigurationBase : IConnectionConfiguration Fields | Improve this Doc View Source hasConnectionPropertyChanged Declaration protected bool hasConnectionPropertyChanged Field Value Type Description System.Boolean Properties | Improve this Doc View Source ConnectionDescription Declaration public abstract string ConnectionDescription { get; } Property Value Type Description System.String | Improve this Doc View Source ResilienceKey Declaration public string ResilienceKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source SecurityKey Declaration public string SecurityKey { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetConnectionString() Declaration public abstract string GetConnectionString() Returns Type Description System.String | Improve this Doc View Source GetResilienceStrategy(ILogger) Declaration protected DataResilienceConfiguration GetResilienceStrategy(ILogger logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger Returns Type Description DataResilienceConfiguration | Improve this Doc View Source GetSecurityConfiguration() Declaration protected SecurityConfiguration GetSecurityConfiguration() Returns Type Description SecurityConfiguration | Improve this Doc View Source SetConfigurationOptions(DataSecurityOptions, DataResilienceOptions) Declaration public void SetConfigurationOptions(DataSecurityOptions securityOptions, DataResilienceOptions resilienceStrategiesOptions) Parameters Type Name Description DataSecurityOptions securityOptions DataResilienceOptions resilienceStrategiesOptions Implements IConnectionConfiguration"
  },
  "api-sql/ArgentSea.Sql.MapToSqlNVarCharAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlNVarCharAttribute.html",
    "title": "Class MapToSqlNVarCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlNVarCharAttribute This attribute maps a model property to/from a SQL NVarChar parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlNVarCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlNVarCharAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlNVarCharAttribute(String, Int32) Map this property to the specified Unicode database column. Declaration public MapToSqlNVarCharAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The maximum length of the string. Set to -1 for NVarChar(max). | Improve this Doc View Source MapToSqlNVarCharAttribute(String, Int32, Boolean) Declaration public MapToSqlNVarCharAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlNCharAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlNCharAttribute.html",
    "title": "Class MapToSqlNCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlNCharAttribute This attribute maps a model property to/from a SQL NChar parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlNCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlNCharAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlNCharAttribute(String, Int32) Map this property to the specified Unicode fixed-size database column. Declaration public MapToSqlNCharAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The length of the fixed-size string. | Improve this Doc View Source MapToSqlNCharAttribute(String, Int32, Boolean) Declaration public MapToSqlNCharAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlUniqueIdentifierAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlUniqueIdentifierAttribute.html",
    "title": "Class MapToSqlUniqueIdentifierAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlUniqueIdentifierAttribute This attribute maps a model property to/from a SQL UniqueIdentifier parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlUniqueIdentifierAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlUniqueIdentifierAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlUniqueIdentifierAttribute(String) Map this property to the specified UniqueIdentifier (Guid) database column. Declaration public MapToSqlUniqueIdentifierAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlUniqueIdentifierAttribute(String, Boolean) Declaration public MapToSqlUniqueIdentifierAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlTinyIntAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlTinyIntAttribute.html",
    "title": "Class MapToSqlTinyIntAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlTinyIntAttribute This attribute maps a model property to/from a SQL TinyInt parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlTinyIntAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlTinyIntAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlTinyIntAttribute(String) Map this property to the specified TinyInt (unsigned 8-bit) database column. Declaration public MapToSqlTinyIntAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlTinyIntAttribute(String, Boolean) Declaration public MapToSqlTinyIntAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlVarBinaryAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlVarBinaryAttribute.html",
    "title": "Class MapToSqlVarBinaryAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlVarBinaryAttribute This attribute maps a model property to/from a SQL VarBinary parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlVarBinaryAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlVarBinaryAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlVarBinaryAttribute(String, Int32) Map this property to the specified VarBinary database column. Declaration public MapToSqlVarBinaryAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The maximum length of the binary value or blob. Set to -1 for VarBinary(max). | Improve this Doc View Source MapToSqlVarBinaryAttribute(String, Int32, Boolean) Declaration public MapToSqlVarBinaryAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api/ArgentSea.html": {
    "href": "api/ArgentSea.html",
    "title": "Namespace ArgentSea | ArgentSea Docs",
    "keywords": "Namespace ArgentSea Classes DatabasesBase<TConfiguration> This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. Classes that inherit from this class manage non-sharded database connections. DatabasesBase<TConfiguration>.DataConnection DataConnectionConfigurationBase Abstract class implementing the data connection functionality shared by PostgreSQL and SQL Server implementations. DataResilienceConfiguration This class contains the definition for a data resiliance strategy. Specifically: when to retry and when to circuit break. This class is created as a configuration entry in an array in the DataResilienceStrategies property of the DataConfigurationOptions class. DataResilienceOptions This options class contains an array of resilience strategies (retry and circuit breaking settings). To specify as particular resilience strategy, a connection can specify a ResilienceKey. DataSecurityOptions This options class contains an array of SecurityConfiguration (login information). A connection can specify as particular login account by referencing a SecurityKey. DbParameterExtensions ExpressionHelpers This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. InvalidMapTypeException This exception is raise when a model property has a database mapping attribute that is not of the correct type. InvalidShardArgumentsException This error is raised upon an attempt to create an Empty ShardKey or ShardChild, but the IDs are not zero. Essentially, any shard object with a DataOrigin of '0' (Empty) must also have zeroed IDs (be equal to ShardKey.Empty or ShardChild.Empty). LoggingExtensions The are extension methods for high-performance logging. Mapper This static class contains the logic for mapping database parameters to/from properties. Mapper.DummyType MapShardChildAttribute MapShardKeyAttribute MapToModel MultipleMapAttributesException This exception is invoked if a model property has multiple mapping attributes. A single value cannot be mapped to/from multiple parameters or columns. This exception is not raised in the case of ShardKey > or ShardChild properties. ParameterMapAttributeBase QueryParameterCollection This is an implementation of the abstract DbParameterCollecion class. Unlike most provider-specific parameter collections, it can be created without a prior DbCommand object instance. RetryLimitExceededException This exception is raise when a transient failure occurs, but automatic retries were not successful. SecurityConfiguration This class represents data security information, with a key that can be reference by any connection(s) that share the security information. ShardParameterValue<TShard> ShardSetsBase<TShard, TConfiguration> This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. Classes that inherit from this class manage sharded database connections. ShardSetsBase<TShard, TConfiguration>.DataConnection ShardSetsBase<TShard, TConfiguration>.ShardInstance ShardSetsBase<TShard, TConfiguration>.ShardSet StringExtensions This static class contains extension methods for cleaning input strings of invalid characters. It does NOT sanitize input strings for protection against injection attacks (your parmemeterized queries should protect against that). UnexpectedMultiRowResultException UnexpectedSqlResultException The exception is thrown when an output parameter is expected, but not found, when ExecuteQueryToValueAsync is invoked. Structs DataOrigin This object help descript the “type” of data. For example, you could assign Customer data a data origin value of 'c'. When comparing data values, the ShardKey/ShardChild will not match if the data origin is not the same value — even if IDs are the same. This helps prevent accidentaly comparisions that are not valid and also prevents collisions if you choose allows values of different types to be stored in the same cache. ShardChild<TShard, TRecord, TChild> Immutable class representing a sharded record with a database compound key. The ShardChild consist of the (virtual) shardId, the recordId, and the childId. ShardKey<TShard, TRecord> Immutable class representing a sharded record with a “compound” key: the (virtual) shardId and the (database) recordId. Interfaces IConnectionConfiguration This interface is used by provider specific implementations. It is unlikely that you would reference this in consumer code. The interface defines the minimum capability of a connection definition. IDatabaseConfigurationOptions This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. IDatabaseConnectionConfiguration This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. IDataProviderServiceFactory This interface is used by provider specific implementations. It is unlikely that you would reference this in consumer code. The interface defines the capabilities of a database providers service. IShardConnectionConfiguration<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. IShardConnectionsConfiguration<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. IShardSetConfigurationOptions<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Enums DataResilienceConfiguration.SequenceLengthening LoggingExtensions.EventIdentifier StringExtensions.InputCleaningOptions Delegates QueryResultModelHandler<TShard, TArg, TModel> This delegate will be invoked for each shard (probably on different threads) to convert the cmd.Execute result to model types."
  },
  "api/ArgentSea.ShardSetsBase-2.ShardInstance.html": {
    "href": "api/ArgentSea.ShardSetsBase-2.ShardInstance.html",
    "title": "Class ShardSetsBase<TShard, TConfiguration>.ShardInstance | ArgentSea Docs",
    "keywords": "Class ShardSetsBase<TShard, TConfiguration>.ShardInstance Inheritance System.Object ShardSetsBase<TShard, TConfiguration>.ShardInstance Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class ShardInstance Constructors | Improve this Doc View Source ShardInstance(ShardSetsBase<TShard, TConfiguration>, TShard, IConnectionConfiguration, IConnectionConfiguration) Declaration public ShardInstance(ShardSetsBase<TShard, TConfiguration> parent, TShard shardId, IConnectionConfiguration readConnection, IConnectionConfiguration writeConnection) Parameters Type Name Description ShardSetsBase <TShard, TConfiguration> parent TShard shardId IConnectionConfiguration readConnection IConnectionConfiguration writeConnection Properties | Improve this Doc View Source Read Declaration public ShardSetsBase<TShard, TConfiguration>.DataConnection Read { get; } Property Value Type Description ShardSetsBase.DataConnection <> | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; } Property Value Type Description TShard | Improve this Doc View Source Write Declaration public ShardSetsBase<TShard, TConfiguration>.DataConnection Write { get; } Property Value Type Description ShardSetsBase.DataConnection <>"
  },
  "api-pg/ArgentSea.Pg.html": {
    "href": "api-pg/ArgentSea.Pg.html",
    "title": "Namespace ArgentSea.Pg | ArgentSea Docs",
    "keywords": "Namespace ArgentSea.Pg Classes DataProviderServiceFactory This class is a provider-specific resouce to enable provider-neutral code to execute. It is unlikely that you would reference this in consumer code. MapToPgArrayAttribute This attribute maps a model property to/from a PostgreSQL Array parameter or column. MapToPgBigintAttribute This attribute maps a model property to/from a PostgreSQL Bigint parameter or column. MapToPgBooleanAttribute This attribute maps a model property to/from a PostgreSQL Boolean parameter or column. MapToPgByteaAttribute This attribute maps a model property to/from a PostgreSQL Byteea parameter or column. MapToPgCharAttribute This attribute maps a model property to/from a PostgreSQL Char parameter or column. MapToPgDateAttribute This attribute maps a model property to/from a PostgreSQL Date parameter or column. MapToPgDoubleAttribute This attribute maps a model property to/from a PostgreSQL Double parameter or column. MapToPgHstoreAttribute This attribute maps a model property to/from a PostgreSQL Hstore parameter or column. MapToPgIntegerAttribute This attribute maps a model property to/from a PostgreSQL Integer parameter or column. MapToPgInternalCharAttribute This attribute maps a model property to/from a PostgreSQL (internal) \"char\" parameter or column. This data type is not intendeted for general use. MapToPgIntervalAttribute This attribute maps a model property to/from a PostgreSQL Interval parameter or column. MapToPgMoneyAttribute This attribute maps a model property to/from a PostgreSQL Money parameter or column. MapToPgNumericAttribute This attribute maps a model property to/from a PostgreSQL Numeric parameter or column. MapToPgRealAttribute This attribute maps a model property to/from a PostgreSQL Real parameter or column. MapToPgSmallintAttribute This attribute maps a model property to/from a PostgreSQL Smallint parameter or column. MapToPgTextAttribute This attribute maps a model property to/from a PostgreSQL Text parameter or column. MapToPgTimeAttribute This attribute maps a model property to/from a PostgreSQL Time parameter or column. MapToPgTimestampAttribute This attribute maps a model property to/from a PostgreSQL Timestamp parameter or column. MapToPgTimestampTzAttribute This attribute maps a model property to/from a PostgreSQL TimestampTz parameter or column. MapToPgTimeTzAttribute This attribute maps a model property to/from a PostgreSQL TimeTz parameter or column. MapToPgUuidAttribute This attribute maps a model property to/from a PostgreSQL Uuid parameter or column. MapToPgVarCharAttribute This attribute maps a model property to/from a PostgreSQL VarChar parameter or column. PgConnectionConfiguration This class represents is a (non-sharded) database connection. Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match as key in the DataResilienceOptions array. If the ResilienceKey is not defined, a default data resilience strategy will be used. PgDatabases This class manages the non-sharded SQL database connections. PgDbConnectionConfiguration PgDbConnectionOptions This configuration class defines an array of database connection configurations . For example, you might configure your appsettings.json like this: \"PgDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"Host\": \"localhost\", \"Database\": \"MyDb\" } } ] Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match a key in the DataResilienceOptions array. PgParameterCollectionExtensions This class adds extension methods which simplify setting PostgreSQL parameter values from .NET types. PgParameterExtensions PgParameterMapAttribute This abstract class is a PostgreSQL-specific implementation of the ParameterMapAttribute class. PgShardConnectionOptions<TShard> This options class contains the shard dataset configuration information. PgShardConnectionOptions<TShard>.PgShardConnectionConfiguration PgShardConnectionOptions<TShard>.PgShardConnectionsConfiguration PgShardSets A collection of ShardSets (with a UInt16 shardId type). PgShardSets<TShard> A collection of ShardSets."
  },
  "api-pg/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api-pg/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | ArgentSea Docs",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes PgServiceBuilderExtensions This static class adds the injectable PostgreSQL data services into the services collection."
  },
  "api-sql/ArgentSea.Sql.html": {
    "href": "api-sql/ArgentSea.Sql.html",
    "title": "Namespace ArgentSea.Sql | ArgentSea Docs",
    "keywords": "Namespace ArgentSea.Sql Classes DataProviderServiceFactory This class is a provider-specific resouce to enable provider-neutral code to execute. It is unlikely that you would reference this in consumer code. MapToSqlBigIntAttribute This attribute maps a model property to/from a SQL BigInt parameter or column. MapToSqlBinaryAttribute This attribute maps a model property to/from a SQL Binary parameter or column. MapToSqlBitAttribute This attribute maps a model property to/from a SQL Bit parameter or column. MapToSqlCharAttribute This attribute maps a model property to/from a SQL Char parameter or column. MapToSqlDateAttribute This attribute maps a model property to/from a SQL Date parameter or column. MapToSqlDateTime2Attribute This attribute maps a model property to/from a SQL DateTime2 parameter or column. MapToSqlDateTimeAttribute This attribute maps a model property to/from a SQL DateTime parameter or column. MapToSqlDateTimeOffsetAttribute This attribute maps a model property to/from a SQL DateTimeOffset parameter or column. MapToSqlDecimalAttribute This attribute maps a model property to/from a SQL Decimal parameter or column. MapToSqlFloatAttribute This attribute maps a model property to/from a SQL Float parameter or column. MapToSqlIntAttribute This attribute maps a model property to/from a SQL Int parameter or column. MapToSqlMoneyAttribute This attribute maps a model property to/from a SQL Money parameter or column. MapToSqlNCharAttribute This attribute maps a model property to/from a SQL NChar parameter or column. MapToSqlNVarCharAttribute This attribute maps a model property to/from a SQL NVarChar parameter or column. MapToSqlRealAttribute This attribute maps a model property to/from a SQL Real parameter or column. MapToSqlSmallIntAttribute This attribute maps a model property to/from a SQL SmallInt parameter or column. MapToSqlSmallMoneyAttribute This attribute maps a model property to/from a SQL SmallMoney parameter or column. MapToSqlTimeAttribute This attribute maps a model property to/from a SQL Time parameter or column. MapToSqlTinyIntAttribute This attribute maps a model property to/from a SQL TinyInt parameter or column. MapToSqlUniqueIdentifierAttribute This attribute maps a model property to/from a SQL UniqueIdentifier parameter or column. MapToSqlVarBinaryAttribute This attribute maps a model property to/from a SQL VarBinary parameter or column. MapToSqlVarCharAttribute This attributes maps a model property to/from a SQL VarChar parameter or column. SqlConnectionConfiguration This class represents is a (non-sharded) database connection. Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match as key in the DataResilienceOptions array. If the ResilienceKey is not defined, a default data resilience strategy will be used. SqlDatabases This class manages the non-sharded SQL database connections. SqlDbConnectionConfiguration SqlDbConnectionOptions This configuration class defines an array of database SqlConnectionConfiguration . For example, you might configure your appsettings.json like this: \"SqlDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"DataSource\": \"localhost\", \"InitialCatalog\": \"MyDb\" } } ] Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match a key in the DataResilienceOptions array. SqlLoggingExtensions This static class provides the logging extension methods for handling table-valued parameter (TVP) mapping. SqlParameterCollectionExtensions This class adds extension methods which simplify setting SQL parameter values from .NET types. SqlParameterMapAttribute This abstract class is a SQL-specific implementation of the ParameterMapAttribute class. SqlShardConnectionOptions<TShard> This options class contains the shard dataset configuration information. SqlShardConnectionOptions<TShard>.SqlShardConnectionConfiguration SqlShardConnectionOptions<TShard>.SqlShardConnectionsConfiguration SqlShardSets A collection of ShardSets (with a byte shardId type). SqlShardSets<TShard> A collection of ShardSets. TvpMapper This class adds the ability to map model properties to SQL table-valued parameters. Enums SqlLoggingExtensions.SqlEventIdentifier"
  },
  "api-sql/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api-sql/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | ArgentSea Docs",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes SqlServiceBuilderExtensions This static class adds the injectable SQL data services into the services collection."
  },
  "api-sql/ArgentSea.Sql.MapToSqlFloatAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlFloatAttribute.html",
    "title": "Class MapToSqlFloatAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlFloatAttribute This attribute maps a model property to/from a SQL Float parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlFloatAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlFloatAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlFloatAttribute(String) Map this property to the specified Float (64-bit floating point or .NET double) database column. Declaration public MapToSqlFloatAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlFloatAttribute(String, Boolean) Declaration public MapToSqlFloatAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlDecimalAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlDecimalAttribute.html",
    "title": "Class MapToSqlDecimalAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlDecimalAttribute This attribute maps a model property to/from a SQL Decimal parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlDecimalAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlDecimalAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlDecimalAttribute(String, Byte, Byte) Map this property to the specified decimal database column. Declaration public MapToSqlDecimalAttribute(string parameterName, byte precision, byte scale) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Byte precision The maximum number of digits in the database value. System.Byte scale The number of digits to the right of the decimal point. | Improve this Doc View Source MapToSqlDecimalAttribute(String, Byte, Byte, Boolean) Declaration public MapToSqlDecimalAttribute(string parameterName, byte precision, byte scale, bool isRequired) Parameters Type Name Description System.String parameterName System.Byte precision System.Byte scale System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName | Improve this Doc View Source Precision Declaration public byte Precision { get; } Property Value Type Description System.Byte | Improve this Doc View Source Scale Declaration public byte Scale { get; } Property Value Type Description System.Byte Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlDateTimeOffsetAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlDateTimeOffsetAttribute.html",
    "title": "Class MapToSqlDateTimeOffsetAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlDateTimeOffsetAttribute This attribute maps a model property to/from a SQL DateTimeOffset parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlDateTimeOffsetAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlDateTimeOffsetAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlDateTimeOffsetAttribute(String) Map this property to the specified DateTimeOffset database column. Declaration public MapToSqlDateTimeOffsetAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlDateTimeOffsetAttribute(String, Boolean) Declaration public MapToSqlDateTimeOffsetAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlDateTimeAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlDateTimeAttribute.html",
    "title": "Class MapToSqlDateTimeAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlDateTimeAttribute This attribute maps a model property to/from a SQL DateTime parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlDateTimeAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlDateTimeAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlDateTimeAttribute(String) Map this property to the specified DateTime database column. Declaration public MapToSqlDateTimeAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlDateTimeAttribute(String, Boolean) Declaration public MapToSqlDateTimeAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/Microsoft.Extensions.DependencyInjection.PgServiceBuilderExtensions.html": {
    "href": "api-pg/Microsoft.Extensions.DependencyInjection.PgServiceBuilderExtensions.html",
    "title": "Class PgServiceBuilderExtensions | ArgentSea Docs",
    "keywords": "Class PgServiceBuilderExtensions This static class adds the injectable PostgreSQL data services into the services collection. Inheritance System.Object PgServiceBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : ArgentSea.Pg.dll Syntax public static class PgServiceBuilderExtensions Methods | Improve this Doc View Source AddPgServices(IServiceCollection, IConfiguration) Loads configuration into injectable Options and the DbDataStores and ShardDataStores services. ILogger service should have already be created. Declaration public static IServiceCollection AddPgServices(this IServiceCollection services, IConfiguration config) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Configuration.IConfiguration config Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection | Improve this Doc View Source AddPgServices<TShard>(IServiceCollection, IConfiguration) Loads configuration into injectable Options and the DbDataStores and ShardDataStores services. ILogger service should have already be created. Declaration public static IServiceCollection AddPgServices<TShard>(this IServiceCollection services, IConfiguration config) where TShard : IComparable Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Configuration.IConfiguration config Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TShard"
  },
  "api-pg/ArgentSea.Pg.MapToPgArrayAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgArrayAttribute.html",
    "title": "Class MapToPgArrayAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgArrayAttribute This attribute maps a model property to/from a PostgreSQL Array parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgArrayAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgArrayAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgArrayAttribute(String, NpgsqlDbType) Declaration public MapToPgArrayAttribute(string parameterName, NpgsqlDbType arrayType) Parameters Type Name Description System.String parameterName NpgsqlTypes.NpgsqlDbType arrayType | Improve this Doc View Source MapToPgArrayAttribute(String, NpgsqlDbType, Boolean) Declaration public MapToPgArrayAttribute(string parameterName, NpgsqlDbType arrayType, bool isRequired) Parameters Type Name Description System.String parameterName NpgsqlTypes.NpgsqlDbType arrayType System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.DataProviderServiceFactory.html": {
    "href": "api-pg/ArgentSea.Pg.DataProviderServiceFactory.html",
    "title": "Class DataProviderServiceFactory | ArgentSea Docs",
    "keywords": "Class DataProviderServiceFactory This class is a provider-specific resouce to enable provider-neutral code to execute. It is unlikely that you would reference this in consumer code. Inheritance System.Object DataProviderServiceFactory Implements IDataProviderServiceFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class DataProviderServiceFactory : IDataProviderServiceFactory Methods | Improve this Doc View Source GetIsErrorTransient(Exception) Declaration public bool GetIsErrorTransient(Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Boolean | Improve this Doc View Source NewCommand(String, DbConnection) Declaration public DbCommand NewCommand(string storedProcedureName, DbConnection connection) Parameters Type Name Description System.String storedProcedureName System.Data.Common.DbConnection connection Returns Type Description System.Data.Common.DbCommand | Improve this Doc View Source NewConnection(String) Declaration public DbConnection NewConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection | Improve this Doc View Source SetParameters(DbCommand, DbParameterCollection, Dictionary<String, Object>) Declaration public void SetParameters(DbCommand cmd, DbParameterCollection parameters, Dictionary<string, object> parameterValues) Parameters Type Name Description System.Data.Common.DbCommand cmd System.Data.Common.DbParameterCollection parameters System.Collections.Generic.Dictionary < System.String , System.Object > parameterValues Implements IDataProviderServiceFactory"
  },
  "api/ArgentSea.UnexpectedMultiRowResultException.html": {
    "href": "api/ArgentSea.UnexpectedMultiRowResultException.html",
    "title": "Class UnexpectedMultiRowResultException | ArgentSea Docs",
    "keywords": "Class UnexpectedMultiRowResultException Inheritance System.Object System.Exception UnexpectedMultiRowResultException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class UnexpectedMultiRowResultException : Exception, ISerializable Constructors | Improve this Doc View Source UnexpectedMultiRowResultException() Initializes a new instance of the UnexpectedMultiRowResultException class with an error message. Declaration public UnexpectedMultiRowResultException() | Improve this Doc View Source UnexpectedMultiRowResultException(String) Initializes a new instance of the UnexpectedMultiRowResultException class with a specified error message. Declaration public UnexpectedMultiRowResultException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source UnexpectedMultiRowResultException(String, Exception) Initializes a new instance of the UnexpectedMultiRowResultException class. Declaration public UnexpectedMultiRowResultException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. | Improve this Doc View Source UnexpectedMultiRowResultException(String, String) Declaration public UnexpectedMultiRowResultException(string procedureName, string connectionDescription) Parameters Type Name Description System.String procedureName System.String connectionDescription Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ArgentSea.ShardSetsBase-2.html": {
    "href": "api/ArgentSea.ShardSetsBase-2.html",
    "title": "Class ShardSetsBase<TShard, TConfiguration> | ArgentSea Docs",
    "keywords": "Class ShardSetsBase<TShard, TConfiguration> This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. Classes that inherit from this class manage sharded database connections. Inheritance System.Object ShardSetsBase<TShard, TConfiguration> Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public abstract class ShardSetsBase<TShard, TConfiguration> : ICollection, IEnumerable where TShard : IComparable where TConfiguration : class, IShardSetConfigurationOptions<TShard>, new() Type Parameters Name Description TShard The type of the ShardId. TConfiguration A provider-specific implementation of IShardSetConfigurationOptions. Constructors | Improve this Doc View Source ShardSetsBase(IOptions<TConfiguration>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, IDataProviderServiceFactory, ILogger<ShardSetsBase<TShard, TConfiguration>>) Declaration public ShardSetsBase(IOptions<TConfiguration> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, IDataProviderServiceFactory dataProviderServices, ILogger<ShardSetsBase<TShard, TConfiguration>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TConfiguration> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions IDataProviderServiceFactory dataProviderServices Microsoft.Extensions.Logging.ILogger < ShardSetsBase <TShard, TConfiguration>> logger Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public ShardSetsBase<TShard, TConfiguration>.ShardSet this[string key] { get; } Parameters Type Name Description System.String key Property Value Type Description ShardSetsBase.ShardSet <> | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/ArgentSea.ShardSetsBase-2.ShardSet.html": {
    "href": "api/ArgentSea.ShardSetsBase-2.ShardSet.html",
    "title": "Class ShardSetsBase<TShard, TConfiguration>.ShardSet | ArgentSea Docs",
    "keywords": "Class ShardSetsBase<TShard, TConfiguration>.ShardSet Inheritance System.Object ShardSetsBase<TShard, TConfiguration>.ShardSet Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class ShardSet : ICollection, IEnumerable Constructors | Improve this Doc View Source ShardSet(ShardSetsBase<TShard, TConfiguration>, IShardConnectionsConfiguration<TShard>) Declaration public ShardSet(ShardSetsBase<TShard, TConfiguration> parent, IShardConnectionsConfiguration<TShard> config) Parameters Type Name Description ShardSetsBase <TShard, TConfiguration> parent IShardConnectionsConfiguration <TShard> config Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[TShard] Declaration public ShardSetsBase<TShard, TConfiguration>.ShardInstance this[TShard shardId] { get; } Parameters Type Name Description TShard shardId Property Value Type Description ShardSetsBase.ShardInstance <> | Improve this Doc View Source Key Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Returns a list of objects created by the specified delegate. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of TModel objects, built by the delegate from the data results. Type Parameters Name Description TModel The data type of the objects in the list result. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Returns a list of objects created by the specified delegate. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of TModel objects, built by the delegate from the data results. Type Parameters Name Description TModel The data type of the objects in the list result. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Returns a list of objects created by the specified delegate. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of TModel objects, built by the delegate from the data results. Type Parameters Name Description TModel The data type of the objects in the list result. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, CancellationToken) Returns a list of objects created by the specified delegate. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of TModel objects, built by the delegate from the data results. Type Parameters Name Description TModel The data type of the objects in the list result. | Improve this Doc View Source MapOutputAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputAllAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputAllAsync<TModel>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from output parameters. Declaration public Task<IList<TModel>> MapOutputAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputFirstAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputFirstAsync<TModel>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters . Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns the first non-null result created using Mapping attributes and output parameters. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes and output parameters to build results. Declaration public Task<TModel> MapOutputFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderAllAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderAllAsync<TModel>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns non-null result using Mapping attributes and the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<IList<TModel>> MapReaderAllAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderFirstAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderFirstAsync<TModel>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, CancellationToken) Query across the shards identified by collection of shard parameter values, returns first non-null result using Mapping attributes and the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Query across all shards in the shard set, using mapping attributes to build results from the DataReader. Declaration public Task<TModel> MapReaderFirstAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non=null object result returned from any shard. Type Parameters Name Description TModel The data object return type for the list TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source QueryAllAsync<TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, Object, TModel>, Object, CancellationToken) Query across all shards in the shard set using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, object, TModel> resultHandler, object dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Object dataObject System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across the specified shards, generating results using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across the specified shards, generating results using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across all shards in the shard set using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TArg, TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across all shards in the shard set using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TArg, TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across the specified shards, generating results using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TArg, TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across the specified shards, generating results using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type for the list | Improve this Doc View Source QueryAllAsync<TArg, TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across all shards in the shard set using a handler delegate. Declaration public Task<IList<TModel>> QueryAllAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list of the non-null object results returned from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type for the list | Improve this Doc View Source QueryFirstAsync<TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across the specified shards, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across the specified shards, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across the specified shards, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, Object, TModel>, CancellationToken) Query across all shards in the shard set, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, object, TModel> resultHandler, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TArg, TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across all shards in the shard set, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TArg, TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across the specified shards, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TArg, TModel>(String, DbParameterCollection, IEnumerable<ShardParameterValue<TShard>>, String, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across the specified shards, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, IEnumerable<ShardParameterValue<TShard>> shardParameterValues, string shardParameterName, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.Collections.Generic.IEnumerable < ShardParameterValue <TShard>> shardParameterValues A list of shards to be queried, and shard-specific values to use for named parameters. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type. | Improve this Doc View Source QueryFirstAsync<TArg, TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, TArg, TModel>, TArg, CancellationToken) Query across all shards in the shard set, returning the first non-null result created by a handler delegate . Declaration public Task<TModel> QueryFirstAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, TArg dataObject, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The name of the stored procedure or function to be invoked on every instance. System.Data.Common.DbParameterCollection parameters The parameters to be passed to the procedure or function. System.String shardParameterName The name of the ShardId parameter, to be set for each connection before it is called. QueryResultModelHandler <TShard, TArg, TModel> resultHandler The thread-safe delegate that converts the data results into the return object type. TArg dataObject An object of type TArg to be passed to the resultHandler, which may contain additional data. System.Threading.CancellationToken cancellationToken A token which allows the query to be cancelled. Returns Type Description System.Threading.Tasks.Task <TModel> The first non-null object obtained from any shard. Type Parameters Name Description TArg The optional object type to be passed to the handler. TModel The data object return type. Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/ArgentSea.ShardSetsBase-2.DataConnection.html": {
    "href": "api/ArgentSea.ShardSetsBase-2.DataConnection.html",
    "title": "Class ShardSetsBase<TShard, TConfiguration>.DataConnection | ArgentSea Docs",
    "keywords": "Class ShardSetsBase<TShard, TConfiguration>.DataConnection Inheritance System.Object ShardSetsBase<TShard, TConfiguration>.DataConnection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public class DataConnection Properties | Improve this Doc View Source ConnectionString Declaration public string ConnectionString { get; } Property Value Type Description System.String Methods | Improve this Doc View Source LookupAsync<TValue>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return a single value. Declaration public Task<TValue> LookupAsync<TValue>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the value. System.Data.Common.DbParameterCollection parameters A parameters collction. Input parameters may be used to find the parameter; will return the value of the first output (or input/output) parameter. If TValue is an int, will also return the sproc return value. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TValue> The retrieved value. Type Parameters Name Description TValue The expected type of the return value. | Improve this Doc View Source LookupAsync<TValue>(String, DbParameterCollection, CancellationToken) Connect to the database and return a single value. Declaration public Task<TValue> LookupAsync<TValue>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the value. System.Data.Common.DbParameterCollection parameters A parameters collction. Input parameters may be used to find the parameter; will return the value of the first output (or input/output) parameter. If TValue is an int, will also return the sproc return value. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TValue> The retrieved value. Type Parameters Name Description TValue The expected type of the return value. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return the values as a list of objects. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list containing an object for each data row. Type Parameters Name Description TModel The type of object to be listed. | Improve this Doc View Source MapListAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return the values as a list of objects. Declaration public Task<IList<TModel>> MapListAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList <TModel>> A list containing an object for each data row. Type Parameters Name Description TModel The type of object to be listed. | Improve this Doc View Source MapOutputAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. | Improve this Doc View Source MapOutputAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult The first result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results and output parameters. Declaration public Task<TModel> MapOutputAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query and should map to the output parameters. TReaderResult0 The first result set from data reader. This will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. This will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. This will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. This will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. This it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. This will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. This will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. | Improve this Doc View Source MapReaderAsync<TModel>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results parameters. Declaration public Task<TModel> MapReaderAsync<TModel>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(String, DbParameterCollection, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5>(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(String, DbParameterCollection, String, CancellationToken) Connect to the database and return an object of the specified type built from the corresponding data reader results. Declaration public Task<TModel> MapReaderAsync<TModel, TReaderResult0, TReaderResult1, TReaderResult2, TReaderResult3, TReaderResult4, TReaderResult5, TReaderResult6, TReaderResult7>(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) where TModel : class, new() where TReaderResult0 : class, new() where TReaderResult1 : class, new() where TReaderResult2 : class, new() where TReaderResult3 : class, new() where TReaderResult4 : class, new() where TReaderResult5 : class, new() where TReaderResult6 : class, new() where TReaderResult7 : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> Type Parameters Name Description TModel This is the expected return type of the query. It must also be the same type as one of the TReaderResult values. TReaderResult0 The first result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult1 The second result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult2 The third result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult3 The forth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult4 The fifth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult5 The sixth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult6 The seventh result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. TReaderResult7 The eighth result set from data reader. If the same type as TModel, it must return exactly one record. Otherwise, it will be mapped to any property with a List of this type. | Improve this Doc View Source QueryAsync<TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, Object, TModel>, Boolean, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, object, TModel> resultHandler, bool isTopOne, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TModel The type of the object to be returned. | Improve this Doc View Source QueryAsync<TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, Object, TModel>, Boolean, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, object, TModel> resultHandler, bool isTopOne, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. QueryResultModelHandler <TShard, System.Object , TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TModel The type of the object to be returned. | Improve this Doc View Source QueryAsync<TArg, TModel>(String, DbParameterCollection, QueryResultModelHandler<TShard, TArg, TModel>, Boolean, TArg, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, bool isTopOne, TArg optionalArgument, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. QueryResultModelHandler <TShard, TArg, TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. TArg optionalArgument An object of type TArg which can be used to pass non-datatabase data to the result-generating delegate. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TArg TModel The type of the object to be returned. | Improve this Doc View Source QueryAsync<TArg, TModel>(String, DbParameterCollection, String, QueryResultModelHandler<TShard, TArg, TModel>, Boolean, TArg, CancellationToken) Connect to the database and return the TModel object returned by the delegate. Declaration public Task<TModel> QueryAsync<TArg, TModel>(string sprocName, DbParameterCollection parameters, string shardParameterName, QueryResultModelHandler<TShard, TArg, TModel> resultHandler, bool isTopOne, TArg optionalArgument, CancellationToken cancellationToken) where TModel : class, new() Parameters Type Name Description System.String sprocName The stored procedure to call to fetch the data. System.Data.Common.DbParameterCollection parameters The query parameters. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. QueryResultModelHandler <TShard, TArg, TModel> resultHandler A method with a signature that corresponds to the QueryResultModelHandler delegate, which converts the provided DataReader and output parameters and returns an object of type TModel. System.Boolean isTopOne If the procedure or function is expected to return only one record, setting this to True provides a minor optimization. TArg optionalArgument An object of type TArg which can be used to pass non-datatabase data to the result-generating delegate. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task <TModel> An object of type TModel, as created and populated by the provided delegate. Type Parameters Name Description TArg TModel The type of the object to be returned. | Improve this Doc View Source RunAsync(String, DbParameterCollection, String, CancellationToken) Executes a database procedure or function that does not return a data result. Declaration public Task RunAsync(string sprocName, DbParameterCollection parameters, string shardParameterName, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure or function to call. System.Data.Common.DbParameterCollection parameters The query parameters with values set. System.String shardParameterName The ordinal position of a parameter that should be automatically set to the current shard number value. If there is no such parameter, set to -1. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task Throws an error if not successful. | Improve this Doc View Source RunAsync(String, DbParameterCollection, CancellationToken) Executes a database procedure or function that does not return a data result. Declaration public Task RunAsync(string sprocName, DbParameterCollection parameters, CancellationToken cancellationToken) Parameters Type Name Description System.String sprocName The stored procedure or function to call. System.Data.Common.DbParameterCollection parameters The query parameters with values set. System.Threading.CancellationToken cancellationToken A token to cancel the asynchronous operation. Returns Type Description System.Threading.Tasks.Task Throws an error if not successful."
  },
  "api/ArgentSea.RetryLimitExceededException.html": {
    "href": "api/ArgentSea.RetryLimitExceededException.html",
    "title": "Class RetryLimitExceededException | ArgentSea Docs",
    "keywords": "Class RetryLimitExceededException This exception is raise when a transient failure occurs, but automatic retries were not successful. Inheritance System.Object System.Exception RetryLimitExceededException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class RetryLimitExceededException : Exception, ISerializable Constructors | Improve this Doc View Source RetryLimitExceededException() Initializes a new instance of the RetryLimitExceededException class with no error message. Declaration public RetryLimitExceededException() | Improve this Doc View Source RetryLimitExceededException(String) Initializes a new instance of the RetryLimitExceededException class with a specified error message. Declaration public RetryLimitExceededException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source RetryLimitExceededException(String, Exception) Initializes a new instance of the RetryLimitExceededException class. Declaration public RetryLimitExceededException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api-sql/Microsoft.Extensions.DependencyInjection.SqlServiceBuilderExtensions.html": {
    "href": "api-sql/Microsoft.Extensions.DependencyInjection.SqlServiceBuilderExtensions.html",
    "title": "Class SqlServiceBuilderExtensions | ArgentSea Docs",
    "keywords": "Class SqlServiceBuilderExtensions This static class adds the injectable SQL data services into the services collection. Inheritance System.Object SqlServiceBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : ArgentSea.Sql.dll Syntax public static class SqlServiceBuilderExtensions Methods | Improve this Doc View Source AddSqlServices(IServiceCollection, IConfiguration) Loads configuration into injectable Options and the DbDataStores service. This overload does not load ShardSets. ILogger service should have already be created. Declaration public static IServiceCollection AddSqlServices(this IServiceCollection services, IConfiguration config) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Configuration.IConfiguration config Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection | Improve this Doc View Source AddSqlServices<TShard>(IServiceCollection, IConfiguration) Loads configuration into injectable Options and the DbDataStores and ShardDataStores services. ILogger service should have already be created. Declaration public static IServiceCollection AddSqlServices<TShard>(this IServiceCollection services, IConfiguration config) where TShard : IComparable Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Configuration.IConfiguration config Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TShard"
  },
  "api-sql/ArgentSea.Sql.TvpMapper.html": {
    "href": "api-sql/ArgentSea.Sql.TvpMapper.html",
    "title": "Class TvpMapper | ArgentSea Docs",
    "keywords": "Class TvpMapper This class adds the ability to map model properties to SQL table-valued parameters. Inheritance System.Object TvpMapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class TvpMapper Methods | Improve this Doc View Source ToTvpRecord<TModel>(TModel, ILogger) Converts an object instance to a SqlMetaData instance. To convert an object list to an table-value input parameter, use: var prm = lst.ConvertAll(x => MapToTableParameterRecord(x)); Declaration public static SqlDataRecord ToTvpRecord<TModel>(TModel model, ILogger logger) where TModel : class Parameters Type Name Description TModel model An object model instance. The property values are provided as table row values. Microsoft.Extensions.Logging.ILogger logger Returns Type Description Microsoft.SqlServer.Server.SqlDataRecord A SqlMetaData object. A list of these can be used as a Sql table-valued parameter. Type Parameters Name Description TModel The type of the model object. The \"MapTo\" attributes are used to create the Sql metadata and columns. The object property order become the column order."
  },
  "api-sql/ArgentSea.Sql.SqlDbConnectionOptions.html": {
    "href": "api-sql/ArgentSea.Sql.SqlDbConnectionOptions.html",
    "title": "Class SqlDbConnectionOptions | ArgentSea Docs",
    "keywords": "Class SqlDbConnectionOptions This configuration class defines an array of database SqlConnectionConfiguration . For example, you might configure your appsettings.json like this: \"SqlDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"DataSource\": \"localhost\", \"InitialCatalog\": \"MyDb\" } } ] Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match a key in the DataResilienceOptions array. Inheritance System.Object SqlDbConnectionOptions Implements IDatabaseConfigurationOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlDbConnectionOptions : IDatabaseConfigurationOptions Properties | Improve this Doc View Source DbConnectionsInternal Declaration public IDatabaseConnectionConfiguration[] DbConnectionsInternal { get; } Property Value Type Description IDatabaseConnectionConfiguration [] | Improve this Doc View Source SqlDbConnections Declaration public SqlDbConnectionConfiguration[] SqlDbConnections { get; set; } Property Value Type Description SqlDbConnectionConfiguration [] Implements IDatabaseConfigurationOptions"
  },
  "api-sql/ArgentSea.Sql.SqlDbConnectionConfiguration.html": {
    "href": "api-sql/ArgentSea.Sql.SqlDbConnectionConfiguration.html",
    "title": "Class SqlDbConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class SqlDbConnectionConfiguration Inheritance System.Object SqlDbConnectionConfiguration Implements IDatabaseConnectionConfiguration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlDbConnectionConfiguration : IDatabaseConnectionConfiguration Properties | Improve this Doc View Source DatabaseKey Declaration public string DatabaseKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataConnection Declaration public SqlConnectionConfiguration DataConnection { get; set; } Property Value Type Description SqlConnectionConfiguration | Improve this Doc View Source DataConnectionInternal Declaration public IConnectionConfiguration DataConnectionInternal { get; } Property Value Type Description IConnectionConfiguration Implements IDatabaseConnectionConfiguration"
  },
  "api-sql/ArgentSea.Sql.SqlDatabases.html": {
    "href": "api-sql/ArgentSea.Sql.SqlDatabases.html",
    "title": "Class SqlDatabases | ArgentSea Docs",
    "keywords": "Class SqlDatabases This class manages the non-sharded SQL database connections. Inheritance System.Object DatabasesBase < SqlDbConnectionOptions > SqlDatabases Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members DatabasesBase<SqlDbConnectionOptions>.Item[String] DatabasesBase<SqlDbConnectionOptions>.Count DatabasesBase<SqlDbConnectionOptions>.IsSynchronized DatabasesBase<SqlDbConnectionOptions>.SyncRoot DatabasesBase<SqlDbConnectionOptions>.CopyTo(Array, Int32) DatabasesBase<SqlDbConnectionOptions>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlDatabases : DatabasesBase<SqlDbConnectionOptions>, ICollection, IEnumerable Constructors | Improve this Doc View Source SqlDatabases(IOptions<SqlDbConnectionOptions>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<SqlDatabases>) Declaration public SqlDatabases(IOptions<SqlDbConnectionOptions> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<SqlDatabases> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < SqlDbConnectionOptions > configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < SqlDatabases > logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-sql/ArgentSea.Sql.SqlConnectionConfiguration.html": {
    "href": "api-sql/ArgentSea.Sql.SqlConnectionConfiguration.html",
    "title": "Class SqlConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class SqlConnectionConfiguration This class represents is a (non-sharded) database connection. Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match as key in the DataResilienceOptions array. If the ResilienceKey is not defined, a default data resilience strategy will be used. Inheritance System.Object DataConnectionConfigurationBase SqlConnectionConfiguration Implements IConnectionConfiguration Inherited Members DataConnectionConfigurationBase.hasConnectionPropertyChanged DataConnectionConfigurationBase.SetConfigurationOptions(DataSecurityOptions, DataResilienceOptions) DataConnectionConfigurationBase.GetResilienceStrategy(ILogger) DataConnectionConfigurationBase.GetSecurityConfiguration() DataConnectionConfigurationBase.SecurityKey DataConnectionConfigurationBase.ResilienceKey System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class SqlConnectionConfiguration : DataConnectionConfigurationBase, IConnectionConfiguration Properties | Improve this Doc View Source ApplicationIntent Declares the application workload type when connecting to a database in an SQL Server Availability Group. Declaration public ApplicationIntent ApplicationIntent { get; set; } Property Value Type Description System.Data.SqlClient.ApplicationIntent | Improve this Doc View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration public string ApplicationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionDescription Declaration public override string ConnectionDescription { get; } Property Value Type Description System.String Overrides DataConnectionConfigurationBase.ConnectionDescription | Improve this Doc View Source ConnectRetryCount The number of reconnections attempted after identifying that there was an idle connection failure. This must be an integer between 0 and 255. Default is 1. Set to 0 to disable reconnecting on idle connection failures. Declaration public int ConnectRetryCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectRetryInterval Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure. This must be an integer between 1 and 60. The default is 10 seconds. Declaration public int ConnectRetryInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectTimeout Gets or sets the length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error. Declaration public int ConnectTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source CurrentLanguage Gets or sets the SQL Server Language record name. Declaration public string CurrentLanguage { get; set; } Property Value Type Description System.String | Improve this Doc View Source DataSource Gets or sets the name or network address of the instance of SQL Server to connect to. Declaration public string DataSource { get; set; } Property Value Type Description System.String | Improve this Doc View Source Encrypt Gets or sets a Boolean value that indicates whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed. Declaration public bool Encrypt { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FailoverPartner Gets or sets the name or address of the partner server to connect to if the primary server is down. Declaration public string FailoverPartner { get; set; } Property Value Type Description System.String | Improve this Doc View Source InitialCatalog Gets or sets the name of the database associated with the connection. Declaration public string InitialCatalog { get; set; } Property Value Type Description System.String | Improve this Doc View Source LoadBalanceTimeout Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed. Declaration public int LoadBalanceTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxPoolSize Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string. Declaration public int MaxPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinPoolSize Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string. Declaration public int MinPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MultipleActiveResultSets When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection. Declaration public bool MultipleActiveResultSets { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiSubnetFailover If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server. Declaration public bool MultiSubnetFailover { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source PacketSize Gets or sets the size in bytes of the network packets used to communicate with an instance of SQL Server. Declaration public int PacketSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration public bool PersistSecurityInfo { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Pooling Gets or sets a Boolean value that indicates whether the connection will be pooled or explicitly opened every time that the connection is requested. Declaration public bool Pooling { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Replication Gets or sets a Boolean value that indicates whether replication is supported using the connection. Declaration public bool Replication { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TrustServerCertificate Gets or sets a value that indicates whether the channel will be encrypted while bypassing walking the certificate chain to validate trust. Declaration public bool TrustServerCertificate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TypeSystemVersion Gets or sets a string value that indicates the type system the application expects. Declaration public string TypeSystemVersion { get; set; } Property Value Type Description System.String | Improve this Doc View Source WorkstationID Gets or sets the name of the workstation connecting to SQL Server. Declaration public string WorkstationID { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Add(KeyValuePair<String, Object>) Adds an item to the configuration Declaration public void Add(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item | Improve this Doc View Source ContainsKey(String) Determines whether the configuration contains a specific key. Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source GetConnectionString() Declaration public override string GetConnectionString() Returns Type Description System.String Overrides DataConnectionConfigurationBase.GetConnectionString() | Improve this Doc View Source Remove(KeyValuePair<String, Object>) Removes the entry from the configuration instance. Declaration public void Remove(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item | Improve this Doc View Source Remove(String) Removes the entry from the configuration instance. Declaration public void Remove(string key) Parameters Type Name Description System.String key | Improve this Doc View Source TryGetValue(String, out Object) Declaration public bool TryGetValue(string key, out object value) Parameters Type Name Description System.String key System.Object value Returns Type Description System.Boolean Implements IConnectionConfiguration"
  },
  "api-sql/ArgentSea.Sql.MapToSqlVarCharAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlVarCharAttribute.html",
    "title": "Class MapToSqlVarCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlVarCharAttribute This attributes maps a model property to/from a SQL VarChar parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlVarCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlVarCharAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlVarCharAttribute(String, Int32, Int32) Map this property to the specified Ansi database column (note that because .NET is Unicode, NVarChar is recommended for most applications). Declaration public MapToSqlVarCharAttribute(string parameterName, int length, int localeId) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The maximum length of the string. Set to -1 for VarChar(max). System.Int32 localeId The Ansi code-page to use for Unicode text conversion. For en-US use: 1033. | Improve this Doc View Source MapToSqlVarCharAttribute(String, Int32, Int32, Boolean) Declaration public MapToSqlVarCharAttribute(string parameterName, int length, int localeId, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Int32 localeId System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source LocaleId Declaration public int LocaleId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.PgShardSets.html": {
    "href": "api-pg/ArgentSea.Pg.PgShardSets.html",
    "title": "Class PgShardSets | ArgentSea Docs",
    "keywords": "Class PgShardSets A collection of ShardSets (with a UInt16 shardId type). Inheritance System.Object ShardSetsBase < System.Int16 , PgShardConnectionOptions < System.Int16 >> PgShardSets Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.Item[String] ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.Count ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.IsSynchronized ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.SyncRoot ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.CopyTo(Array, Int32) ShardSetsBase<Int16, PgShardConnectionOptions<Int16>>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgShardSets : ShardSetsBase<short, PgShardConnectionOptions<short>>, ICollection, IEnumerable Constructors | Improve this Doc View Source PgShardSets(IOptions<PgShardConnectionOptions<Int16>>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<PgShardSets<Int16>>) Declaration public PgShardSets(IOptions<PgShardConnectionOptions<short>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<PgShardSets<short>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < PgShardConnectionOptions < System.Int16 >> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < PgShardSets < System.Int16 >> logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-pg/ArgentSea.Pg.PgShardSets-1.html": {
    "href": "api-pg/ArgentSea.Pg.PgShardSets-1.html",
    "title": "Class PgShardSets<TShard> | ArgentSea Docs",
    "keywords": "Class PgShardSets<TShard> A collection of ShardSets. Inheritance System.Object ShardSetsBase <TShard, PgShardConnectionOptions <TShard>> PgShardSets<TShard> Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.Item[String] ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.Count ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.IsSynchronized ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.SyncRoot ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.CopyTo(Array, Int32) ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgShardSets<TShard> : ShardSetsBase<TShard, PgShardConnectionOptions<TShard>>, ICollection, IEnumerable where TShard : IComparable Type Parameters Name Description TShard The type of the shardId index value. Constructors | Improve this Doc View Source PgShardSets(IOptions<PgShardConnectionOptions<TShard>>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<PgShardSets<TShard>>) Declaration public PgShardSets(IOptions<PgShardConnectionOptions<TShard>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<PgShardSets<TShard>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < PgShardConnectionOptions <TShard>> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < PgShardSets <TShard>> logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.html": {
    "href": "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.html",
    "title": "Class PgShardConnectionOptions<TShard> | ArgentSea Docs",
    "keywords": "Class PgShardConnectionOptions<TShard> This options class contains the shard dataset configuration information. Inheritance System.Object PgShardConnectionOptions<TShard> Implements IShardSetConfigurationOptions <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgShardConnectionOptions<TShard> : IShardSetConfigurationOptions<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source PgShardSets Declaration public PgShardConnectionOptions<TShard>.PgShardConnectionsConfiguration[] PgShardSets { get; set; } Property Value Type Description PgShardConnectionOptions.PgShardConnectionsConfiguration <>[] | Improve this Doc View Source ShardSetsInternal Declaration public IShardConnectionsConfiguration<TShard>[] ShardSetsInternal { get; } Property Value Type Description IShardConnectionsConfiguration <TShard>[] Implements IShardSetConfigurationOptions<TShard>"
  },
  "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.PgShardConnectionsConfiguration.html": {
    "href": "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.PgShardConnectionsConfiguration.html",
    "title": "Class PgShardConnectionOptions<TShard>.PgShardConnectionsConfiguration | ArgentSea Docs",
    "keywords": "Class PgShardConnectionOptions<TShard>.PgShardConnectionsConfiguration Inheritance System.Object PgShardConnectionOptions<TShard>.PgShardConnectionsConfiguration Implements IShardConnectionsConfiguration <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgShardConnectionsConfiguration : IShardConnectionsConfiguration<TShard> Properties | Improve this Doc View Source Shards Declaration public PgShardConnectionOptions<TShard>.PgShardConnectionConfiguration[] Shards { get; set; } Property Value Type Description PgShardConnectionOptions.PgShardConnectionConfiguration <>[] | Improve this Doc View Source ShardSetName Declaration public string ShardSetName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShardsInternal Declaration public IShardConnectionConfiguration<TShard>[] ShardsInternal { get; } Property Value Type Description IShardConnectionConfiguration <TShard>[] Implements IShardConnectionsConfiguration<TShard>"
  },
  "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.PgShardConnectionConfiguration.html": {
    "href": "api-pg/ArgentSea.Pg.PgShardConnectionOptions-1.PgShardConnectionConfiguration.html",
    "title": "Class PgShardConnectionOptions<TShard>.PgShardConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class PgShardConnectionOptions<TShard>.PgShardConnectionConfiguration Inheritance System.Object PgShardConnectionOptions<TShard>.PgShardConnectionConfiguration Implements IShardConnectionConfiguration <TShard> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgShardConnectionConfiguration : IShardConnectionConfiguration<TShard> Properties | Improve this Doc View Source ReadConnection Declaration public PgConnectionConfiguration ReadConnection { get; set; } Property Value Type Description PgConnectionConfiguration | Improve this Doc View Source ReadConnectionInternal Declaration public IConnectionConfiguration ReadConnectionInternal { get; } Property Value Type Description IConnectionConfiguration | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; set; } Property Value Type Description TShard | Improve this Doc View Source WriteConnection Declaration public PgConnectionConfiguration WriteConnection { get; set; } Property Value Type Description PgConnectionConfiguration | Improve this Doc View Source WriteConnectionInternal Declaration public IConnectionConfiguration WriteConnectionInternal { get; } Property Value Type Description IConnectionConfiguration Implements IShardConnectionConfiguration<TShard>"
  },
  "api-pg/ArgentSea.Pg.PgParameterMapAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.PgParameterMapAttribute.html",
    "title": "Class PgParameterMapAttribute | ArgentSea Docs",
    "keywords": "Class PgParameterMapAttribute This abstract class is a PostgreSQL-specific implementation of the ParameterMapAttribute class. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgArrayAttribute MapToPgBigintAttribute MapToPgBooleanAttribute MapToPgByteaAttribute MapToPgCharAttribute MapToPgDateAttribute MapToPgDoubleAttribute MapToPgHstoreAttribute MapToPgIntegerAttribute MapToPgInternalCharAttribute MapToPgIntervalAttribute MapToPgMoneyAttribute MapToPgNumericAttribute MapToPgRealAttribute MapToPgSmallintAttribute MapToPgTextAttribute MapToPgTimeAttribute MapToPgTimestampAttribute MapToPgTimestampTzAttribute MapToPgTimeTzAttribute MapToPgUuidAttribute MapToPgVarCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired ParameterMapAttributeBase.IsValidType(Type) ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, Int32, Type, ParameterExpression, ILogger) System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public abstract class PgParameterMapAttribute : ParameterMapAttributeBase Constructors | Improve this Doc View Source PgParameterMapAttribute(String, NpgsqlDbType) Declaration public PgParameterMapAttribute(string parameterName, NpgsqlDbType pgType) Parameters Type Name Description System.String parameterName NpgsqlTypes.NpgsqlDbType pgType | Improve this Doc View Source PgParameterMapAttribute(String, NpgsqlDbType, Boolean) Declaration public PgParameterMapAttribute(string parameterName, NpgsqlDbType pgType, bool isRequired) Parameters Type Name Description System.String parameterName NpgsqlTypes.NpgsqlDbType pgType System.Boolean isRequired"
  },
  "api-pg/ArgentSea.Pg.MapToPgTimeTzAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgTimeTzAttribute.html",
    "title": "Class MapToPgTimeTzAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgTimeTzAttribute This attribute maps a model property to/from a PostgreSQL TimeTz parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgTimeTzAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgTimeTzAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgTimeTzAttribute(String) Map this property to the specified Time database column (without Timezone). Declaration public MapToPgTimeTzAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgTimeTzAttribute(String, Boolean) Declaration public MapToPgTimeTzAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgTimestampTzAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgTimestampTzAttribute.html",
    "title": "Class MapToPgTimestampTzAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgTimestampTzAttribute This attribute maps a model property to/from a PostgreSQL TimestampTz parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgTimestampTzAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgTimestampTzAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgTimestampTzAttribute(String) Map this property to the specified Timestamp database column (with Timezone). Declaration public MapToPgTimestampTzAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgTimestampTzAttribute(String, Boolean) Declaration public MapToPgTimestampTzAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgTimestampAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgTimestampAttribute.html",
    "title": "Class MapToPgTimestampAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgTimestampAttribute This attribute maps a model property to/from a PostgreSQL Timestamp parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgTimestampAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgTimestampAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgTimestampAttribute(String) Map this property to the specified Timestamp database column (without Timezone). Declaration public MapToPgTimestampAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgTimestampAttribute(String, Boolean) Declaration public MapToPgTimestampAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgTimeAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgTimeAttribute.html",
    "title": "Class MapToPgTimeAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgTimeAttribute This attribute maps a model property to/from a PostgreSQL Time parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgTimeAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgTimeAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgTimeAttribute(String) Map this property to the specified Time database column (without Timezone). Declaration public MapToPgTimeAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgTimeAttribute(String, Boolean) Declaration public MapToPgTimeAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgMoneyAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgMoneyAttribute.html",
    "title": "Class MapToPgMoneyAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgMoneyAttribute This attribute maps a model property to/from a PostgreSQL Money parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgMoneyAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgMoneyAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgMoneyAttribute(String) Map this property to the specified Money database column. Declaration public MapToPgMoneyAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgMoneyAttribute(String, Boolean) Declaration public MapToPgMoneyAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgIntervalAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgIntervalAttribute.html",
    "title": "Class MapToPgIntervalAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgIntervalAttribute This attribute maps a model property to/from a PostgreSQL Interval parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgIntervalAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgIntervalAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgIntervalAttribute(String) Map this property to the specified Time database column (without Timezone). Declaration public MapToPgIntervalAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgIntervalAttribute(String, Boolean) Declaration public MapToPgIntervalAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgInternalCharAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgInternalCharAttribute.html",
    "title": "Class MapToPgInternalCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgInternalCharAttribute This attribute maps a model property to/from a PostgreSQL (internal) \"char\" parameter or column. This data type is not intendeted for general use. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgInternalCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgInternalCharAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgInternalCharAttribute(String) Map this property to the specified TinyInt (unsigned 8-bit) database column. Declaration public MapToPgInternalCharAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgInternalCharAttribute(String, Boolean) Declaration public MapToPgInternalCharAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgIntegerAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgIntegerAttribute.html",
    "title": "Class MapToPgIntegerAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgIntegerAttribute This attribute maps a model property to/from a PostgreSQL Integer parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgIntegerAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgIntegerAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgIntegerAttribute(String) Map this property to the specified Int (32-bit) database column. Declaration public MapToPgIntegerAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgIntegerAttribute(String, Boolean) Declaration public MapToPgIntegerAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgBigintAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgBigintAttribute.html",
    "title": "Class MapToPgBigintAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgBigintAttribute This attribute maps a model property to/from a PostgreSQL Bigint parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgBigintAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgBigintAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgBigintAttribute(String) Map this property to the specified BigInt (64-bit) database column. Declaration public MapToPgBigintAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgBigintAttribute(String, Boolean) Declaration public MapToPgBigintAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlTimeAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlTimeAttribute.html",
    "title": "Class MapToSqlTimeAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlTimeAttribute This attribute maps a model property to/from a SQL Time parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlTimeAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlTimeAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlTimeAttribute(String) Map this property to the specified Time database column. Declaration public MapToSqlTimeAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlTimeAttribute(String, Boolean) Declaration public MapToSqlTimeAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlSmallMoneyAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlSmallMoneyAttribute.html",
    "title": "Class MapToSqlSmallMoneyAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlSmallMoneyAttribute This attribute maps a model property to/from a SQL SmallMoney parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlSmallMoneyAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlSmallMoneyAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlSmallMoneyAttribute(String) Map this property to the specified SmallMoney database column. Declaration public MapToSqlSmallMoneyAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlSmallMoneyAttribute(String, Boolean) Declaration public MapToSqlSmallMoneyAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlSmallIntAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlSmallIntAttribute.html",
    "title": "Class MapToSqlSmallIntAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlSmallIntAttribute This attribute maps a model property to/from a SQL SmallInt parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlSmallIntAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlSmallIntAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlSmallIntAttribute(String) Map this property to the specified SmallInt (16-bit) database column. Declaration public MapToSqlSmallIntAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlSmallIntAttribute(String, Boolean) Declaration public MapToSqlSmallIntAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlRealAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlRealAttribute.html",
    "title": "Class MapToSqlRealAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlRealAttribute This attribute maps a model property to/from a SQL Real parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlRealAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlRealAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlRealAttribute(String) Map this property to the specified Real (32-bit floating point or .NET float) database column. Declaration public MapToSqlRealAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlRealAttribute(String, Boolean) Declaration public MapToSqlRealAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlDateTime2Attribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlDateTime2Attribute.html",
    "title": "Class MapToSqlDateTime2Attribute | ArgentSea Docs",
    "keywords": "Class MapToSqlDateTime2Attribute This attribute maps a model property to/from a SQL DateTime2 parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlDateTime2Attribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlDateTime2Attribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlDateTime2Attribute(String) Map this property to the specified DateTime2 database column. Declaration public MapToSqlDateTime2Attribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlDateTime2Attribute(String, Boolean) Declaration public MapToSqlDateTime2Attribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlDateAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlDateAttribute.html",
    "title": "Class MapToSqlDateAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlDateAttribute This attribute maps a model property to/from a SQL Date parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlDateAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlDateAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlDateAttribute(String) Map this property to the specified Date database column. Declaration public MapToSqlDateAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlDateAttribute(String, Boolean) Declaration public MapToSqlDateAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlCharAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlCharAttribute.html",
    "title": "Class MapToSqlCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlCharAttribute This attribute maps a model property to/from a SQL Char parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlCharAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlCharAttribute(String, Int32, Int32) Map this property to the specified fixed-size Ansi database column (note that because .NET is Unicode, NChar is recommended for most applications). Declaration public MapToSqlCharAttribute(string parameterName, int length, int localeId) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. System.Int32 length The length of the fixed-size Ansi string. System.Int32 localeId The Ansi code-page to use for Unicode text conversion. For en-US use: 1033. | Improve this Doc View Source MapToSqlCharAttribute(String, Int32, Int32, Boolean) Declaration public MapToSqlCharAttribute(string parameterName, int length, int localeId, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Int32 localeId System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source LocaleId Declaration public int LocaleId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.PgDatabases.html": {
    "href": "api-pg/ArgentSea.Pg.PgDatabases.html",
    "title": "Class PgDatabases | ArgentSea Docs",
    "keywords": "Class PgDatabases This class manages the non-sharded SQL database connections. Inheritance System.Object DatabasesBase < PgDbConnectionOptions > PgDatabases Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members DatabasesBase<PgDbConnectionOptions>.Item[String] DatabasesBase<PgDbConnectionOptions>.Count DatabasesBase<PgDbConnectionOptions>.IsSynchronized DatabasesBase<PgDbConnectionOptions>.SyncRoot DatabasesBase<PgDbConnectionOptions>.CopyTo(Array, Int32) DatabasesBase<PgDbConnectionOptions>.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgDatabases : DatabasesBase<PgDbConnectionOptions>, ICollection, IEnumerable Constructors | Improve this Doc View Source PgDatabases(IOptions<PgDbConnectionOptions>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, ILogger<PgDatabases>) Declaration public PgDatabases(IOptions<PgDbConnectionOptions> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<PgDatabases> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < PgDbConnectionOptions > configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions Microsoft.Extensions.Logging.ILogger < PgDatabases > logger Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-pg/ArgentSea.Pg.PgConnectionConfiguration.html": {
    "href": "api-pg/ArgentSea.Pg.PgConnectionConfiguration.html",
    "title": "Class PgConnectionConfiguration | ArgentSea Docs",
    "keywords": "Class PgConnectionConfiguration This class represents is a (non-sharded) database connection. Note that the SecurityKey must match a defined key in the DataSecurityOptions; likewise, a ResilienceKey (if defined) must match as key in the DataResilienceOptions array. If the ResilienceKey is not defined, a default data resilience strategy will be used. Inheritance System.Object DataConnectionConfigurationBase PgConnectionConfiguration Implements IConnectionConfiguration Inherited Members DataConnectionConfigurationBase.hasConnectionPropertyChanged DataConnectionConfigurationBase.SetConfigurationOptions(DataSecurityOptions, DataResilienceOptions) DataConnectionConfigurationBase.GetResilienceStrategy(ILogger) DataConnectionConfigurationBase.GetSecurityConfiguration() DataConnectionConfigurationBase.SecurityKey DataConnectionConfigurationBase.ResilienceKey System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class PgConnectionConfiguration : DataConnectionConfigurationBase, IConnectionConfiguration Properties | Improve this Doc View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration public string ApplicationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source AutoPrepareMinUsages The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5 Declaration public int AutoPrepareMinUsages { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source CheckCertificateRevocation Whether to check the certificate revocation list during authentication. False by default. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ClientEncoding Gets or sets the client_encoding parameter. Declaration public string ClientEncoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source CommandTimeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Defaults to 30 seconds. Declaration public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionDescription Declaration public override string ConnectionDescription { get; } Property Value Type Description System.String Overrides DataConnectionConfigurationBase.ConnectionDescription | Improve this Doc View Source ConnectionIdleLifetime The time to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Declaration public int ConnectionIdleLifetime { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionPruningInterval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime. Declaration public int ConnectionPruningInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConvertInfinityDateTime Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity. Declaration public bool ConvertInfinityDateTime { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Database The PostgreSQL database to connect to. Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. Declaration public string Encoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source Enlist Whether to enlist in an ambient TransactionScope. Declaration public bool Enlist { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Host The hostname or IP address of the PostgreSQL server to connect to. Declaration public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRealm The Kerberos realm to be used for authentication Declaration public bool IncludeRealm { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InternalCommandTimeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. Declaration public int InternalCommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source KeepAlive The number of seconds of connection inactivity before Npgsql sends a keepalive query. Set to 0 (the default) to disable. Declaration public int KeepAlive { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source KerberosServiceName The Kerberos service name to be used for authentication. Declaration public string KerberosServiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxAutoPrepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation. Declaration public int MaxAutoPrepare { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxPoolSize The maximum connection pool size. Declaration public int MaxPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinPoolSize The minimum connection pool size. Declaration public int MinPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NoResetOnClose If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing. Declaration public bool NoResetOnClose { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration public bool PersistSecurityInfo { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Pooling Whether connection pooling should be used. Declaration public bool Pooling { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Port The TCP/IP port of the PostgreSQL server. Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ReadBufferSize Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. Declaration public int ReadBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SearchPath Gets or sets the schema search path. Declaration public string SearchPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerCompatibilityMode A compatibility mode for special PostgreSQL server types. Declaration public ServerCompatibilityMode ServerCompatibilityMode { get; set; } Property Value Type Description Npgsql.ServerCompatibilityMode | Improve this Doc View Source SocketReceiveBufferSize Determines the size of socket read buffer. Declaration public int SocketReceiveBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SocketSendBufferSize Determines the size of socket send buffer. Declaration public int SocketSendBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SslMode Controls whether SSL is required, disabled or preferred, depending on server support. Declaration public SslMode SslMode { get; set; } Property Value Type Description Npgsql.SslMode | Improve this Doc View Source TcpKeepAliveInterval The interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received. Defaults to the value of TcpKeepAliveTime. TcpKeepAliveTime must be non-zero as well. Supported only on Windows. Declaration public int TcpKeepAliveInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TcpKeepAliveTime The number of seconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Set to 0 (the default) to disable. Supported only on Windows. Declaration public int TcpKeepAliveTime { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Defaults to 15 seconds. Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TrustServerCertificate Whether to trust the server certificate without validating it. Declaration public bool TrustServerCertificate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UsePerfCounters Writes connection performance information to performance counters. Declaration public bool UsePerfCounters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseSslStream Npgsql uses its own internal implementation of TLS/SSL. Turn this on to use .NET SslStream instead. Declaration public bool UseSslStream { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WriteBufferSize Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. Declaration public int WriteBufferSize { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(KeyValuePair<String, Object>) Adds an item to the configuration Declaration public void Add(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item | Improve this Doc View Source Contains(KeyValuePair<String, Object>) Determines whether the configuration contains a specific key-value pair. Declaration public bool Contains(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item Returns Type Description System.Boolean | Improve this Doc View Source ContainsKey(String) Determines whether the configuration contains a specific key. Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean | Improve this Doc View Source GetConnectionString() Declaration public override string GetConnectionString() Returns Type Description System.String Overrides DataConnectionConfigurationBase.GetConnectionString() | Improve this Doc View Source Remove(KeyValuePair<String, Object>) Removes the entry from the configuration instance. Declaration public void Remove(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item | Improve this Doc View Source Remove(String) Removes the entry from the configuration instance. Declaration public void Remove(string key) Parameters Type Name Description System.String key | Improve this Doc View Source TryGetValue(String, out Object) Declaration public bool TryGetValue(string key, out object value) Parameters Type Name Description System.String key System.Object value Returns Type Description System.Boolean Implements IConnectionConfiguration"
  },
  "api-pg/ArgentSea.Pg.MapToPgVarCharAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgVarCharAttribute.html",
    "title": "Class MapToPgVarCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgVarCharAttribute This attribute maps a model property to/from a PostgreSQL VarChar parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgVarCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgVarCharAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgVarCharAttribute(String, Int32) Map this property to the specified Unicode database column, with a variable but maximum length. Declaration public MapToPgVarCharAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix ':' as needed. System.Int32 length The maximum length of the string. | Improve this Doc View Source MapToPgVarCharAttribute(String, Int32, Boolean) Declaration public MapToPgVarCharAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgUuidAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgUuidAttribute.html",
    "title": "Class MapToPgUuidAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgUuidAttribute This attribute maps a model property to/from a PostgreSQL Uuid parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgUuidAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgUuidAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgUuidAttribute(String) Map this property to the specified UniqueIdentifier (Guid) database column. Declaration public MapToPgUuidAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgUuidAttribute(String, Boolean) Declaration public MapToPgUuidAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgHstoreAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgHstoreAttribute.html",
    "title": "Class MapToPgHstoreAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgHstoreAttribute This attribute maps a model property to/from a PostgreSQL Hstore parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgHstoreAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgHstoreAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgHstoreAttribute(String) Declaration public MapToPgHstoreAttribute(string parameterName) Parameters Type Name Description System.String parameterName | Improve this Doc View Source MapToPgHstoreAttribute(String, Boolean) Declaration public MapToPgHstoreAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgDoubleAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgDoubleAttribute.html",
    "title": "Class MapToPgDoubleAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgDoubleAttribute This attribute maps a model property to/from a PostgreSQL Double parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgDoubleAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgDoubleAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgDoubleAttribute(String) Map this property to the specified Float (64-bit floating point or .NET double) database column. Declaration public MapToPgDoubleAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgDoubleAttribute(String, Boolean) Declaration public MapToPgDoubleAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgDateAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgDateAttribute.html",
    "title": "Class MapToPgDateAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgDateAttribute This attribute maps a model property to/from a PostgreSQL Date parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgDateAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgDateAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgDateAttribute(String) Map this property to the specified Date database column. Declaration public MapToPgDateAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToPgDateAttribute(String, Boolean) Declaration public MapToPgDateAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-pg/ArgentSea.Pg.MapToPgCharAttribute.html": {
    "href": "api-pg/ArgentSea.Pg.MapToPgCharAttribute.html",
    "title": "Class MapToPgCharAttribute | ArgentSea Docs",
    "keywords": "Class MapToPgCharAttribute This attribute maps a model property to/from a PostgreSQL Char parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase PgParameterMapAttribute MapToPgCharAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.ParameterName ParameterMapAttributeBase.ColumnName ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Pg Assembly : ArgentSea.Pg.dll Syntax public class MapToPgCharAttribute : PgParameterMapAttribute Constructors | Improve this Doc View Source MapToPgCharAttribute(String, Int32) Map this property to the specified Unicode fixed-size database column. Declaration public MapToPgCharAttribute(string parameterName, int length) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix ':' as needed. System.Int32 length The length of the fixed-size string. | Improve this Doc View Source MapToPgCharAttribute(String, Int32, Boolean) Declaration public MapToPgCharAttribute(string parameterName, int length, bool isRequired) Parameters Type Name Description System.String parameterName System.Int32 length System.Boolean isRequired Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expPrms, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expPrms System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api/ArgentSea.ShardKey-2.html": {
    "href": "api/ArgentSea.ShardKey-2.html",
    "title": "Struct ShardKey<TShard, TRecord> | ArgentSea Docs",
    "keywords": "Struct ShardKey<TShard, TRecord> Immutable class representing a sharded record with a “compound” key: the (virtual) shardId and the (database) recordId. Implements System.IEquatable < ShardKey <TShard, TRecord>> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public struct ShardKey<TShard, TRecord> : IEquatable<ShardKey<TShard, TRecord>> where TShard : IComparable where TRecord : IComparable Type Parameters Name Description TShard TRecord Constructors | Improve this Doc View Source ShardKey(DataOrigin, TShard, TRecord) Declaration public ShardKey(DataOrigin origin, TShard shardId, TRecord recordId) Parameters Type Name Description DataOrigin origin TShard shardId TRecord recordId Exceptions Type Condition InvalidShardArgumentsException Thrown when the DataOrigin is '0' (i.e. is empty), but the the shardId or recordId does not equal zero. | Improve this Doc View Source ShardKey(Char, TShard, TRecord) Declaration public ShardKey(char dataOrigin, TShard shardId, TRecord recordId) Parameters Type Name Description System.Char dataOrigin TShard shardId TRecord recordId Exceptions Type Condition InvalidShardArgumentsException Thrown when the DataOrigin is '0' (i.e. is empty), but the the shardId or recordId does not equal zero. Properties | Improve this Doc View Source Empty Declaration public static ShardKey<TShard, TRecord> Empty { get; } Property Value Type Description ShardKey <TShard, TRecord> | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Origin Declaration public DataOrigin Origin { get; } Property Value Type Description DataOrigin | Improve this Doc View Source RecordId Declaration public TRecord RecordId { get; } Property Value Type Description TRecord | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; } Property Value Type Description TShard Methods | Improve this Doc View Source Equals(ShardKey<TShard, TRecord>) Declaration public bool Equals(ShardKey<TShard, TRecord> other) Parameters Type Name Description ShardKey <TShard, TRecord> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromExternalString(String) Declaration public static ShardKey<TShard, TRecord> FromExternalString(string value) Parameters Type Name Description System.String value Returns Type Description ShardKey <TShard, TRecord> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToExternalString() Serializes ShardKey data into a URL-safe string with a checksum Declaration public string ToExternalString() Returns Type Description System.String A string which includes the concurrency stamp if defined and includeConcurrencyStamp is true, otherwise returns a smaller string . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(ShardKey<TShard, TRecord>, ShardKey<TShard, TRecord>) Declaration public static bool operator ==(ShardKey<TShard, TRecord> sk1, ShardKey<TShard, TRecord> sk2) Parameters Type Name Description ShardKey <TShard, TRecord> sk1 ShardKey <TShard, TRecord> sk2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(ShardKey<TShard, TRecord>, ShardKey<TShard, TRecord>) Declaration public static bool operator !=(ShardKey<TShard, TRecord> sk1, ShardKey<TShard, TRecord> sk2) Parameters Type Name Description ShardKey <TShard, TRecord> sk1 ShardKey <TShard, TRecord> sk2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ArgentSea.ShardChild-3.html": {
    "href": "api/ArgentSea.ShardChild-3.html",
    "title": "Struct ShardChild<TShard, TRecord, TChild> | ArgentSea Docs",
    "keywords": "Struct ShardChild<TShard, TRecord, TChild> Immutable class representing a sharded record with a database compound key. The ShardChild consist of the (virtual) shardId, the recordId, and the childId. Implements System.IEquatable < ShardChild <TShard, TRecord, TChild>> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public struct ShardChild<TShard, TRecord, TChild> : IEquatable<ShardChild<TShard, TRecord, TChild>> where TShard : IComparable where TRecord : IComparable where TChild : IComparable Type Parameters Name Description TShard TRecord TChild Constructors | Improve this Doc View Source ShardChild(DataOrigin, TShard, TRecord, TChild) Declaration public ShardChild(DataOrigin origin, TShard shardId, TRecord recordId, TChild childRecordId) Parameters Type Name Description DataOrigin origin TShard shardId TRecord recordId TChild childRecordId | Improve this Doc View Source ShardChild(ShardKey<TShard, TRecord>, TChild) Declaration public ShardChild(ShardKey<TShard, TRecord> key, TChild childRecordId) Parameters Type Name Description ShardKey <TShard, TRecord> key TChild childRecordId | Improve this Doc View Source ShardChild(Char, TShard, TRecord, TChild) Declaration public ShardChild(char dataOrigin, TShard shardId, TRecord recordId, TChild childId) Parameters Type Name Description System.Char dataOrigin TShard shardId TRecord recordId TChild childId Properties | Improve this Doc View Source ChildId Declaration public TChild ChildId { get; } Property Value Type Description TChild | Improve this Doc View Source Empty Declaration public static ShardChild<TShard, TRecord, TChild> Empty { get; } Property Value Type Description ShardChild <TShard, TRecord, TChild> | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Key Declaration public ShardKey<TShard, TRecord> Key { get; } Property Value Type Description ShardKey <TShard, TRecord> | Improve this Doc View Source Origin Declaration public DataOrigin Origin { get; } Property Value Type Description DataOrigin | Improve this Doc View Source RecordId Declaration public TRecord RecordId { get; } Property Value Type Description TRecord | Improve this Doc View Source ShardId Declaration public TShard ShardId { get; } Property Value Type Description TShard Methods | Improve this Doc View Source Equals(ShardChild<TShard, TRecord, TChild>) Declaration public bool Equals(ShardChild<TShard, TRecord, TChild> other) Parameters Type Name Description ShardChild <TShard, TRecord, TChild> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromExternalString(String) Declaration public static ShardChild<TShard, TRecord, TChild> FromExternalString(string value) Parameters Type Name Description System.String value Returns Type Description ShardChild <TShard, TRecord, TChild> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToExternalString() Serializes ShardChild data into a URL-safe string with a checksum, optionally including a concurrency stamp. Declaration public string ToExternalString() Returns Type Description System.String A URL-safe string that can be re-serialized into a shard child. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(ShardChild<TShard, TRecord, TChild>, ShardChild<TShard, TRecord, TChild>) Declaration public static bool operator ==(ShardChild<TShard, TRecord, TChild> sc1, ShardChild<TShard, TRecord, TChild> sc2) Parameters Type Name Description ShardChild <TShard, TRecord, TChild> sc1 ShardChild <TShard, TRecord, TChild> sc2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(ShardChild<TShard, TRecord, TChild>, ShardChild<TShard, TRecord, TChild>) Declaration public static bool operator !=(ShardChild<TShard, TRecord, TChild> sc1, ShardChild<TShard, TRecord, TChild> sc2) Parameters Type Name Description ShardChild <TShard, TRecord, TChild> sc1 ShardChild <TShard, TRecord, TChild> sc2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/ArgentSea.MultipleMapAttributesException.html": {
    "href": "api/ArgentSea.MultipleMapAttributesException.html",
    "title": "Class MultipleMapAttributesException | ArgentSea Docs",
    "keywords": "Class MultipleMapAttributesException This exception is invoked if a model property has multiple mapping attributes. A single value cannot be mapped to/from multiple parameters or columns. This exception is not raised in the case of ShardKey > or ShardChild properties. Inheritance System.Object System.Exception MultipleMapAttributesException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class MultipleMapAttributesException : Exception, ISerializable Constructors | Improve this Doc View Source MultipleMapAttributesException() Initializes a new instance of the MultipleMapAttributesException class with no error message. Declaration public MultipleMapAttributesException() | Improve this Doc View Source MultipleMapAttributesException(PropertyInfo) Initializes a new instance of the MultipleMapAttributesException class. Declaration public MultipleMapAttributesException(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property The property that is decorated with multiple mapping attributes. | Improve this Doc View Source MultipleMapAttributesException(String) Initializes a new instance of the MultipleMapAttributesException class with a specified error message. Declaration public MultipleMapAttributesException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source MultipleMapAttributesException(String, Exception) Initializes a new instance of the MultipleMapAttributesException class. Declaration public MultipleMapAttributesException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ArgentSea.LoggingExtensions.html": {
    "href": "api/ArgentSea.LoggingExtensions.html",
    "title": "Class LoggingExtensions | ArgentSea Docs",
    "keywords": "Class LoggingExtensions The are extension methods for high-performance logging. Inheritance System.Object LoggingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public static class LoggingExtensions Methods | Improve this Doc View Source BuildSqlResultsHandlerScope(ILogger, String, Type) Declaration public static IDisposable BuildSqlResultsHandlerScope(this ILogger logger, string procedureName, Type model) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String procedureName System.Type model Returns Type Description System.IDisposable | Improve this Doc View Source CiruitBreakingDbCommand(ILogger, String, String) Declaration public static void CiruitBreakingDbCommand(this ILogger logger, string commandName, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String connectionName | Improve this Doc View Source CiruitBreakingDbConnection(ILogger, String) Declaration public static void CiruitBreakingDbConnection(this ILogger logger, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String connectionName | Improve this Doc View Source CiruitBrokenDbCommandRestored(ILogger, String, String) Declaration public static void CiruitBrokenDbCommandRestored(this ILogger logger, string commandName, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String connectionName | Improve this Doc View Source CiruitBrokenDbCommandTest(ILogger, String, String) Declaration public static void CiruitBrokenDbCommandTest(this ILogger logger, string commandName, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String connectionName | Improve this Doc View Source CiruitBrokenDbConnectionRestored(ILogger, String) Declaration public static void CiruitBrokenDbConnectionRestored(this ILogger logger, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String connectionName | Improve this Doc View Source CiruitBrokenDbConnectionTest(ILogger, String) Declaration public static void CiruitBrokenDbConnectionTest(this ILogger logger, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String connectionName | Improve this Doc View Source CreatedExpressionTreeForModel(ILogger, Type, String, Expression) Declaration public static void CreatedExpressionTreeForModel(this ILogger logger, Type model, string procedureName, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.String procedureName System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source CreatedExpressionTreeForReaderOrdinals(ILogger, Type, Expression) Declaration public static void CreatedExpressionTreeForReaderOrdinals(this ILogger logger, Type model, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source CreatedExpressionTreeForReaderRowData(ILogger, Type, Expression) Declaration public static void CreatedExpressionTreeForReaderRowData(this ILogger logger, Type model, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source CreatedExpressionTreeForReadOutParameters(ILogger, Type, Expression) Declaration public static void CreatedExpressionTreeForReadOutParameters(this ILogger logger, Type model, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source CreatedExpressionTreeForSetInParameters(ILogger, Type, Expression) Declaration public static void CreatedExpressionTreeForSetInParameters(this ILogger logger, Type model, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source CreatedExpressionTreeForSetOutParameters(ILogger, Type, Expression) Declaration public static void CreatedExpressionTreeForSetOutParameters(this ILogger logger, Type model, Expression codeBlock) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type model System.Linq.Expressions.Expression codeBlock | Improve this Doc View Source DataReaderIsClosed(ILogger, String, String) Declaration public static void DataReaderIsClosed(this ILogger logger, string sprocName, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String sprocName System.String connectionName | Improve this Doc View Source DataReaderIsNull(ILogger, String, String) Declaration public static void DataReaderIsNull(this ILogger logger, string sprocName, string connectionName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String sprocName System.String connectionName | Improve this Doc View Source NullShardChildArguments<TShard, TRecord, TChild>(ILogger, String, ShardChild<TShard, TRecord, TChild>) Declaration public static void NullShardChildArguments<TShard, TRecord, TChild>(this ILogger logger, string propertyName, ShardChild<TShard, TRecord, TChild> shardChild) where TShard : IComparable where TRecord : IComparable where TChild : IComparable Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName ShardChild <TShard, TRecord, TChild> shardChild Type Parameters Name Description TShard TRecord TChild | Improve this Doc View Source NullShardKeyArguments<TShard, TRecord>(ILogger, String, ShardKey<TShard, TRecord>) Declaration public static void NullShardKeyArguments<TShard, TRecord>(this ILogger logger, string propertyName, ShardKey<TShard, TRecord> shardKey) where TShard : IComparable where TRecord : IComparable Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName ShardKey <TShard, TRecord> shardKey Type Parameters Name Description TShard TRecord | Improve this Doc View Source RequiredPropertyIsDbNull(ILogger, String, String) Declaration public static void RequiredPropertyIsDbNull(this ILogger logger, string modelName, string parameterName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String modelName System.String parameterName | Improve this Doc View Source RetryingDbCommand(ILogger, String, String, Int32, Exception) Declaration public static void RetryingDbCommand(this ILogger logger, string commandName, string connectionName, int attemptCount, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String connectionName System.Int32 attemptCount System.Exception exception | Improve this Doc View Source RetryingDbConnection(ILogger, String, Int32, Exception) Declaration public static void RetryingDbConnection(this ILogger logger, string connectionName, int attemptCount, Exception exception) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String connectionName System.Int32 attemptCount System.Exception exception | Improve this Doc View Source SqlFieldNotFound(ILogger, String, Type) Declaration public static void SqlFieldNotFound(this ILogger logger, string columnName, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String columnName System.Type TModel | Improve this Doc View Source SqlInParametersCacheHit(ILogger, Type) Declaration public static void SqlInParametersCacheHit(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlInParametersCacheMiss(ILogger, Type) Declaration public static void SqlInParametersCacheMiss(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlParameterNotFound(ILogger, String, Type) If the log level is set to Information, logs when a parameter attribute exists but was not found in the parameters collection. Declaration public static void SqlParameterNotFound(this ILogger logger, string parameterName, Type propertyType) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logging instance for this extension method. System.String parameterName The name of the expected parameter. System.Type propertyType The type of the property expected said parameter. | Improve this Doc View Source SqlReaderCacheHit(ILogger, Type) Declaration public static void SqlReaderCacheHit(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlReaderCacheMiss(ILogger, Type) Declaration public static void SqlReaderCacheMiss(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlReadOutParametersCacheHit(ILogger, Type) Declaration public static void SqlReadOutParametersCacheHit(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlReadOutParametersCacheMiss(ILogger, Type) Declaration public static void SqlReadOutParametersCacheMiss(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlSetOutParametersCacheHit(ILogger, Type) Declaration public static void SqlSetOutParametersCacheHit(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source SqlSetOutParametersCacheMiss(ILogger, Type) Declaration public static void SqlSetOutParametersCacheMiss(this ILogger logger, Type TModel) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.Type TModel | Improve this Doc View Source TraceDbCmdExecuted(ILogger, String, String, Int64) Declaration public static void TraceDbCmdExecuted(this ILogger logger, string commandName, string connectionName, long milliseconds) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String connectionName System.Int64 milliseconds | Improve this Doc View Source TraceGetOutMapperProperty(ILogger, String) Declaration public static void TraceGetOutMapperProperty(this ILogger logger, string propertyName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName | Improve this Doc View Source TraceInMapperProperty(ILogger, String) Declaration public static void TraceInMapperProperty(this ILogger logger, string propertyName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName | Improve this Doc View Source TraceRdrMapperProperty(ILogger, String) Declaration public static void TraceRdrMapperProperty(this ILogger logger, string propertyName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName | Improve this Doc View Source TraceSetOutMapperProperty(ILogger, String) Declaration public static void TraceSetOutMapperProperty(this ILogger logger, string propertyName) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String propertyName | Improve this Doc View Source TraceShardCmdExecuted<TShard>(ILogger, String, String, TShard, Int64) Declaration public static void TraceShardCmdExecuted<TShard>(this ILogger logger, string commandName, string shardSetKey, TShard shardId, long milliseconds) where TShard : IComparable Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger System.String commandName System.String shardSetKey TShard shardId System.Int64 milliseconds Type Parameters Name Description TShard"
  },
  "api/ArgentSea.IShardConnectionConfiguration-1.html": {
    "href": "api/ArgentSea.IShardConnectionConfiguration-1.html",
    "title": "Interface IShardConnectionConfiguration<TShard> | ArgentSea Docs",
    "keywords": "Interface IShardConnectionConfiguration<TShard> This interface is used by provider specific implementations. It is unlikely that you would implement this in consumer code. Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public interface IShardConnectionConfiguration<TShard> where TShard : IComparable Type Parameters Name Description TShard Properties | Improve this Doc View Source ReadConnectionInternal Declaration IConnectionConfiguration ReadConnectionInternal { get; } Property Value Type Description IConnectionConfiguration | Improve this Doc View Source ShardId Declaration TShard ShardId { get; set; } Property Value Type Description TShard | Improve this Doc View Source WriteConnectionInternal Declaration IConnectionConfiguration WriteConnectionInternal { get; } Property Value Type Description IConnectionConfiguration"
  },
  "api/ArgentSea.InvalidShardArgumentsException.html": {
    "href": "api/ArgentSea.InvalidShardArgumentsException.html",
    "title": "Class InvalidShardArgumentsException | ArgentSea Docs",
    "keywords": "Class InvalidShardArgumentsException This error is raised upon an attempt to create an Empty ShardKey or ShardChild, but the IDs are not zero. Essentially, any shard object with a DataOrigin of '0' (Empty) must also have zeroed IDs (be equal to ShardKey.Empty or ShardChild.Empty). Inheritance System.Object System.Exception InvalidShardArgumentsException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public sealed class InvalidShardArgumentsException : Exception, ISerializable Constructors | Improve this Doc View Source InvalidShardArgumentsException() Initializes a new instance of the InvalidShardArgumentsException class with no error message. Declaration public InvalidShardArgumentsException() | Improve this Doc View Source InvalidShardArgumentsException(String) Initializes a new instance of the InvalidShardArgumentsException class with a specified error message. Declaration public InvalidShardArgumentsException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source InvalidShardArgumentsException(String, Exception) Initializes a new instance of the InvalidShardArgumentsException class. Declaration public InvalidShardArgumentsException(string message, Exception innerException) Parameters Type Name Description System.String message The message that describes the error. System.Exception innerException The exception that is the cause of the current exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ArgentSea.DatabasesBase-1.html": {
    "href": "api/ArgentSea.DatabasesBase-1.html",
    "title": "Class DatabasesBase<TConfiguration> | ArgentSea Docs",
    "keywords": "Class DatabasesBase<TConfiguration> This class is used by provider specific implementations. It is unlikely that you would reference this in consumer code. Classes that inherit from this class manage non-sharded database connections. Inheritance System.Object DatabasesBase<TConfiguration> Implements System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea Assembly : ArgentSea.dll Syntax public abstract class DatabasesBase<TConfiguration> : ICollection, IEnumerable where TConfiguration : class, IDatabaseConfigurationOptions, new() Type Parameters Name Description TConfiguration A provider-specific implementation of IShardSetConfigurationOptions. Constructors | Improve this Doc View Source DatabasesBase(IOptions<TConfiguration>, IOptions<DataSecurityOptions>, IOptions<DataResilienceOptions>, IDataProviderServiceFactory, ILogger<DatabasesBase<TConfiguration>>) Declaration public DatabasesBase(IOptions<TConfiguration> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, IDataProviderServiceFactory dataProviderServices, ILogger<DatabasesBase<TConfiguration>> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions <TConfiguration> configOptions Microsoft.Extensions.Options.IOptions < DataSecurityOptions > securityOptions Microsoft.Extensions.Options.IOptions < DataResilienceOptions > resilienceStrategiesOptions IDataProviderServiceFactory dataProviderServices Microsoft.Extensions.Logging.ILogger < DatabasesBase <TConfiguration>> logger Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Declaration public DatabasesBase<TConfiguration>.DataConnection this[string key] { get; } Parameters Type Name Description System.String key Property Value Type Description DatabasesBase.DataConnection <> | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api-sql/ArgentSea.Sql.MapToSqlMoneyAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlMoneyAttribute.html",
    "title": "Class MapToSqlMoneyAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlMoneyAttribute This attribute maps a model property to/from a SQL Money parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlMoneyAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlMoneyAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlMoneyAttribute(String) Map this property to the specified Money database column. Declaration public MapToSqlMoneyAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlMoneyAttribute(String, Boolean) Declaration public MapToSqlMoneyAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "api-sql/ArgentSea.Sql.MapToSqlIntAttribute.html": {
    "href": "api-sql/ArgentSea.Sql.MapToSqlIntAttribute.html",
    "title": "Class MapToSqlIntAttribute | ArgentSea Docs",
    "keywords": "Class MapToSqlIntAttribute This attribute maps a model property to/from a SQL Int parameter or column. Inheritance System.Object System.Attribute ParameterMapAttributeBase SqlParameterMapAttribute MapToSqlIntAttribute Inherited Members ParameterMapAttributeBase.Name ParameterMapAttributeBase.SqlType ParameterMapAttributeBase.IsRequired System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : ArgentSea.Sql Assembly : ArgentSea.Sql.dll Syntax public class MapToSqlIntAttribute : SqlParameterMapAttribute Constructors | Improve this Doc View Source MapToSqlIntAttribute(String) Map this property to the specified Int (32-bit) database column. Declaration public MapToSqlIntAttribute(string parameterName) Parameters Type Name Description System.String parameterName The name of the parameter or column that contains the value. The system will automatically add or remove the prefix '@' as needed. | Improve this Doc View Source MapToSqlIntAttribute(String, Boolean) Declaration public MapToSqlIntAttribute(string parameterName, bool isRequired) Parameters Type Name Description System.String parameterName System.Boolean isRequired Properties | Improve this Doc View Source ColumnName Declaration public override string ColumnName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ColumnName | Improve this Doc View Source ParameterName Declaration public override string ParameterName { get; } Property Value Type Description System.String Overrides ParameterMapAttributeBase.ParameterName Methods | Improve this Doc View Source AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) Declaration protected override void AppendInParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, Expression expProperty, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.Expression expProperty System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendInParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, Expression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendReaderExpressions(Expression expProperty, IList<MethodCallExpression> columnLookupExpressions, IList<Expression> expressions, ParameterExpression prmSqlRdr, ParameterExpression expOrdinals, ParameterExpression expOrdinal, ref int propIndex, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.MethodCallExpression > columnLookupExpressions System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression prmSqlRdr System.Linq.Expressions.ParameterExpression expOrdinals System.Linq.Expressions.ParameterExpression expOrdinal System.Int32 propIndex System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReaderExpressions(Expression, IList<MethodCallExpression>, IList<Expression>, ParameterExpression, ParameterExpression, ParameterExpression, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) Declaration protected override void AppendReadOutParameterExpressions(Expression expProperty, IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expPrm, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expPrm System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendReadOutParameterExpressions(Expression, IList<Expression>, ParameterExpression, ParameterExpression, Type, ParameterExpression, ILogger) | Improve this Doc View Source AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) Declaration protected override void AppendSetOutParameterExpressions(IList<Expression> expressions, ParameterExpression expSprocParameters, ParameterExpression expIgnoreParameters, HashSet<string> parameterNames, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Collections.Generic.IList < System.Linq.Expressions.Expression > expressions System.Linq.Expressions.ParameterExpression expSprocParameters System.Linq.Expressions.ParameterExpression expIgnoreParameters System.Collections.Generic.HashSet < System.String > parameterNames System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides ParameterMapAttributeBase.AppendSetOutParameterExpressions(IList<Expression>, ParameterExpression, ParameterExpression, HashSet<String>, ParameterExpression, ILogger) | Improve this Doc View Source AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) Declaration protected override void AppendTvpExpressions(ParameterExpression expRecord, Expression expProperty, IList<Expression> setExpressions, IList<NewExpression> sqlMetaDataTypeExpressions, HashSet<string> parameterNames, ref int ordinal, Type propertyType, ParameterExpression expLogger, ILogger logger) Parameters Type Name Description System.Linq.Expressions.ParameterExpression expRecord System.Linq.Expressions.Expression expProperty System.Collections.Generic.IList < System.Linq.Expressions.Expression > setExpressions System.Collections.Generic.IList < System.Linq.Expressions.NewExpression > sqlMetaDataTypeExpressions System.Collections.Generic.HashSet < System.String > parameterNames System.Int32 ordinal System.Type propertyType System.Linq.Expressions.ParameterExpression expLogger Microsoft.Extensions.Logging.ILogger logger Overrides SqlParameterMapAttribute.AppendTvpExpressions(ParameterExpression, Expression, IList<Expression>, IList<NewExpression>, HashSet<String>, ref Int32, Type, ParameterExpression, ILogger) | Improve this Doc View Source IsValidType(Type) Declaration public override bool IsValidType(Type candidateType) Parameters Type Name Description System.Type candidateType Returns Type Description System.Boolean Overrides ParameterMapAttributeBase.IsValidType(Type)"
  },
  "tutorials/security.html": {
    "href": "tutorials/security.html",
    "title": "Security | ArgentSea Docs",
    "keywords": "Security ArgentSea encourages better security practices in two ways: By making it easier to store password information securely. By enforcing the use of stored procedures / functions. Secure Password Storage ArgentSea’s data connection metadata divorces passwords from a legacy “connection string” implementation. Because the new .NET configuration architecture enables configuration data to be distributed among multiple sources, passwords can be stored in secure locations — independently of the rest of the connection metadata. For example, passwords can stored in: UserSecrets — in a development context. AWS Secrets Manager Azure Key Vault Secure, encrypted file shares Each provider has a NuGet package which simplifies loading their secrets into your application. If your password store handles JSON, you can add credentials like this: \"Credentials\": [ { \"SecurityKey\": \"SecKey1\", \"UserName\": \"webuser\", \"Password\": \"D~|Y98N?A9qkEz^u%Dhn\" }, { \"SecurityKey\": \"SecKey2\", \"UserName\": \"adminUser\", \"Password\": \"A*dNppRZq3-vE@Ci\" } ] If your password store uses key-value pairs, you can store the same information like this: Key Value Credentials:0:SecurityKey SecKey1 Credentials:0:UserName SecKey1 Credentials:0:Password SecKey1 Credentials:1:SecurityKey SecKey2 Credentials:1:UserName adminUser Credentials:1:Password A*dNppRZq3-vE@Ci Connections that use Windows authentication do not need to be stored securely. These entries can be added directly to appsettings.json : \"Credentials\": [ { \"SecurityKey\": \"SecKey1\", \"WindowsAuth\": true } ], Stored procedures/functions ArgentSea enforces the use of stored procedures or functions. Besides offering performance advantages, this provides substantial security benefits. Least Privileged Access When data access is managed by stored procedures or functions exclusively, permissions can be granted exclusively to the procedures and not to the underlying tables. If an attacker were to take ownership of the connection, they would not be able to perform any database activity that was not explicitly enabled by the existing procedures or functions. Injection Attacks A common data hack involves crafting the requests sent to a database server to include additional commands. Stored procedures/functions with parameters are immune to this attack, assuming no dynamic is used SQL within the procedure body. DBA Validation When dynamic SQL commands are created by the application, it can be difficult to debug the command sequence, even harder to correct it, and nearly impossible to constrain it to appropriate activity. When using stored procedures or functions, however, DBAs can review the implementation of dangerous commands, and ensure that their explicit use is appropriate."
  },
  "tutorials/quickstart1.html": {
    "href": "tutorials/quickstart1.html",
    "title": "QuickStart One | ArgentSea Docs",
    "keywords": "QuickStart One This article will step you through a simple setup of ArgentSea for non-sharded data access. This presentation introduces concepts which are further elaborated in the subsequent article . It assumes that you are using .NET Core in some flavor of Visual Studio . If you get stuck or have questions, click on one of the links to the other, more in-depth, articles. 1. Create a Project (or use an existing one) A sample QuickStart project is here . It is based on the ASP.NET API project type. If you prefer to start by creating a new, empty project, ensure that appsettings.json is added. 2. Add ArgentSea to your project Use NuGet to add ArgentSea to your project. Select the package that corresponds to your database platform. As of today, you can add one of the following NuGet packages: For Microsoft SQL Server databases, use ArgentSea.Sql For PostgreSQL, use ArgentSea.Pg Both packages will automatically include the shared ArgentSea package and any other dependencies. Using both packages in the same project is not a tested or scenario. You can learn more about adding a reference to ArgentSea here . 3. Define your Login Information There are two required configuration sections. The first of these provides security information. If you have UserSecrets set up (preferred), add the json below to your User Secrets file (right-click on the project and select Manage User Secrets ). If you are not using User Secrets, you can simply add the json sections to your appsettings.json configuration file. Tip The sample application does use User Secrets, so if you are following along at home you will need to manually copy the credentials to the User Secrets in the sample app. To connect using username and password authentication, use: \"Credentials\": [ { \"SecurityKey\": \"SecKey1\", \"UserName\": \"webuser\", \"Password\": \"Pwd123456\" } ] Change the values, as appropriate, to represent a valid login. Alternatively, for a connection using Windows authentication, use: \"Credentials\": [ { \"SecurityKey\": \"SecKey1\", \"WindowsAuth\": true } ], Tip If you are using Windows authentication exclusively , you can store your credential information within your appsettings.json file. There is no need to secure your credential information. Caution In a production deployment, the Credential section should be hosted in AWS Secrets Manager , Azure Key Vault , or some other secure resource. Storing passwords more securely is an incidental benefit of having a separate Credentials section. The principal purpose is to simplify login management when the system has many connections across multiple shard sets. 4. Define Your Database Settings The database settings tell ArgentSea how to build the (non-security) part of your connection string. Any attribute not specified will use a default value, so the required information is quite minimal. In your appsettings.json file, add the following section: SQL Server PostgreSQL Configure the DataSource and InitialCatalog properties below. \"SqlDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"DataSource\": \"localhost\", \"InitialCatalog\": \"MyDb\" } } ] Configure the Host and Database properties below. \"PgDbConnections\": [ { \"DatabaseKey\": \"MyDatabase\", \"SecurityKey\": \"SecKey1\", \"DataConnection\": { \"Host\": \"localhost\", \"Database\": \"MyDb\" } } ] A deep-dive into configuration settings, including a complete list of configuration attributes, is available here . Tip In a production deployment, environment-specific connection information could be stored in server environment variables rather than configuration files. This may make deployments easier to manage. 6. Load ArgentSea on Application Start ArgentSea is an injectable service, so it needs to be registered on application startup. SQL Server PostgreSQL Open your project’s Startup class. At the top, add the following using statement: using ArgentSea.Sql; Then, in the Startup class’ ConfigureServices method, add: services.AddSqlServices(Configuration); This step creates an injectable SqlServices object that we can use in all of our data access clients. Open your project’s Startup class. At the top, add the following using statement: using ArgentSea.Pg; Then, in the Startup class’ ConfigureServices method, add: services.AddPgServices(Configuration); This step creates an injectable PgServices object that we can use in all of our data access clients. 7. Create a Model Class A model class has properties that correspond the the fields of a data entity. ArgentSea can automatically map these properties to input or output parameters, the columns of a DataReader object, or (in SQL Server) a table-valued parameter. For example, suppose your subscriber data can be represented by a class like this: using System; public class Subscriber { public int SubscriberId { get; set; } public string Name { get; set; } public DateTime Expiration { get; set; } } We can simply add mapping attributes to this class: SQL Server PostgreSQL using System; using ArgentSea.Sql; public class Subscriber { [MapToSqlInt(\"@SubID\")] public int SubscriberId { get; set; } [MapToSqlNVarChar(\"@SubscriberName\", 255)] public string Name { get; set; } [MapToSqlDateTime2(\"@EndDate\")] public DateTime Expiration { get; set; } } The “@” parameter prefix is optional — ArgentSea will add the “@” automatically for parameters and remove it automatically when reading data reader rows. using System; using ArgentSea.Pg; public class Subscriber { [MapToPgInteger(\"SubId\")] public int SubscriberId { get; set; } [MapToPgVarChar(\"SubscriberName\", 255)] public string Name { get; set; } [MapToPgTimestamp(\"EndDate\")] public DateTime Expiration { get; set; } } Note that the property name does not need to match the parameter or column name. It is not uncommon for database naming conventions to differ from .NET property naming conventions. Warning ArgentSea assumes consistent naming in your data parameters and results. A project with “consistently inconsistent” parameters or column names will find the ArgentSea Mapper of little practical use. 5. Call a Stored Procedure or Function Create one more class, called SubscriberStore . This is the class that will call the database stored procedure or function and return the specified subscriber. SQL Server PostgreSQL Our very simple stored procedure can be something like this: CREATE PROCEDURE dbo.GetSubscriber (@SubscriberId int) As BEGIN SELECT Subscribers.SubscriberId, Subscribers.SubscriberName, Subscribers.EndDate FROM dbo.Subscribers WHERE Subscribers.SubscriberId = @SubscriberId; END; You can find the complete project setup SQL here . Our implementation of the data access code requires only a few lines: public class SubscriberStore { private readonly SqlDatabases _dbs; private readonly ILogger<SubscriberStore> _logger; public SubscriberStore(SqlDatabases dbs, ILogger<SubscriberStore> logger) { _dbs = dbs; _logger = logger; } public async Task<Subscriber> GetSubscriber(int subscriberId, CancellationToken cancellation) { var db = _dbs[\"MyDatabase\"]; var parameters = new QueryParameterCollection() .AddSqlIntInputParameter(\"@SubId\", subscriberId) .CreateOutputParameters<Subscriber>(_logger); return await db.MapOutputAsync<Subscriber>(\"ws.GetSubscriber\", parameters, cancellation); } } Our very simple PostgreSQL function can be something like this: CREATE FUNCTION ws.GetSubscriber ( _subid integer, OUT _subname varchar(255), OUT _enddate timestamp ) SECURITY DEFINER AS $$ SELECT Subscribers.SubName, Subscribers.EndDate FROM Subscribers WHERE Subscribers.SubId = _subid; $$ LANGUAGE sql; You can find the complete project setup SQL here . Our implementation of the data access code requires only a few lines: public class SubscriberStore { private readonly PgDatabases _dbs; private readonly ILogger<SubscriberStore> _logger; public SubscriberStore(PgDatabases dbs, ILogger<SubscriberStore> logger) { _dbs = dbs; _logger = logger; } public async Task<Subscriber> GetSubscriber(int subscriberId, CancellationToken cancellation) { var db = _dbs[\"MyDatabase\"]; var parameters = new QueryParameterCollection() .AddPgIntegerInputParameter(\"_subid\", subscriberId) .CreateOutputParameters<Subscriber>(_logger); return await db.MapOutputAsync<Subscriber>(\"ws.GetSubscriber\", parameters, cancellation); } The ArgentSea database service is injected into the SubscriberStore class. Don’t forget to add the SubscriberStore class to services.Configure() in Startup, so that it can be injected to any classes that need to access a subscriber. The code only needs to set the required input parameter value (the subscriber id to be retrieved). The Mapper sets the remaining parameters automatically. The QueryAsync method retrieves the data and creates the model instance automatically. The controller for a web API example, can be very simple: [Route(\"api/[controller]\")] [ApiController] public class SubscriberController : ControllerBase { private readonly SubscriberStore _store; private readonly ILogger<SubscriberController> _logger; public SubscriberController(SubscriberStore store, ILogger<SubscriberController> logger) { _store = store; _logger = logger; } [HttpGet(\"{id}\")] public async Task<ActionResult<Subscriber>> Get(int id, CancellationToken cancellation) { return await _store.GetSubscriber(id, cancellation); } } Due to the work of the Mapper, the controller code would not increase in complexity even if the model had a hundred properties mapped to a hundred parameters. You should be able to build and run your project. The QuickStart code has a test project that validates that the web service returns the expected results."
  },
  "tutorials/configuration.html": {
    "href": "tutorials/configuration.html",
    "title": "Configuration Deep-Dive | ArgentSea Docs",
    "keywords": "Configuration Deep-Dive Introduction ArgentSea fully leverages the configuration architecture of .NET core/.NET standard. If this architecture is new to you, it essentially consists of two parts: A configuration dictionary, which can be loaded from multiple sources, one of which is a file called appsettings.json An “options” architecture, which casts the configuration entries into a strongly-typed configuration object. One of the key improvements of the configuration architecture in .NET standard is the dictionary architecture, which allows entries to be loaded from multiple sources. So, for example, you might load the account names from an appsettings.json configuration file, the passwords from a usersecrets.json file (or Key Vault or Secrets Manager ), and the server names from environment variables. Properly managed, this can make deployments both easier and more secure. ArgentSea Database Connections There are two types of database connections in ArgentSea: A database connection - a data set which is hosted by a single database A shard set - a single data set spread over multiple database connections ArgentSea configuration supports any number of database connections and any number of shard sets . And of course each shard set can have many database connections, even separate read and write connections. This creates a potentially large number of database connections. Many of these will likely have similar connection information. In many scenarios, all of the connections in a shard set would use the same login information. Likewise, in a given datacenter environment it only makes sense that all connections use the same resiliency strategy. To manage this redundancy, the ArgentSea configuration data is broken into four parts: Login credential information, which can be referenced by any connection. Data resilience strategies, any of which can be referenced by any connection. Database connection information Shard set connection information Credentials If you are using json configuration files to manage your configuration, the credentials section in your configuration might look like this: \"Credentials\": [ { \"SecurityKey\": \"0\", \"UserName\": \"webuser\", \"Password\": \"123456\" }, { \"SecurityKey\": \"1\", \"WindowsAuth\": true, }, { \"SecurityKey\": \"2\", \"UserName\": \"admin\", \"Password\": \"7890\" } ] If you prefer to set the properties of an Options class directly, you can use the ArgentSea.DataSecurityOptions class. You should put this configuration section into a secure location. In a development environment, you should consider using the UserSecrets functionality, which prevents this information from being checked into your source code repository. In other environments, you might consider using AWS Secrets Manager , Azure Key Vault , or something similar. In non-JSON configuration contexts, like environment variables, you can specify these values as key-value pairs. This is the equivalent of the JSON above: Key Value Credentials:0:SecurityKey 0 Credentials:0:Password webuser Credentials:0:UserName 123456 Credentials:1:SecurityKey 1 Credentials:1:WindowsAuth true Credentials:2:SecurityKey 2 Credentials:2:Password admin Credentials:2:UserName 7890 The SecurityKey property must be unique and exactly match the security string key that you specify on your connection (i.e. both must have the same casing). Resilience Strategies Resilience strategies define how ArgentSea recovers from unexpected failures, usually through some combination of retry logic and circuit breaking. Because one typically requires only a few resilience strategies across datacenters (perhaps one for local connections and another for across the WAN), to reduce redundancy we use the same keyed approach as for security. A general Resilience Strategy is implicit. If a connection does not specify a Resilience Strategy, this default one will be used. If it is defined, the corresponding connection(s) must specify the key (again, casing matters). An example resiliency configuration section might look like this: \"ResilienceStrategies\": [ { \"DataResilienceKey\": \"local\", \"RetryCount\": \"6\", \"RetryInterval\": \"150\", \"RetryLengthening\": \"Linear\", \"CircuitBreakerFailureCount\": \"10\", \"CircuitBreakerTestInterval\": \"5000\" }, { \"DataResilienceKey\": \"remote\", \"RetryCount\": \"6\", \"RetryInterval\": \"250\", \"RetryLengthening\": \"Fibonacci\", \"CircuitBreakerFailureCount\": \"20\", \"CircuitBreakerTestInterval\": \"5000\" } Retries Note that retries only occur on errors that are defined as transient . A permissions error or invalid object reference would be pointless to retry. (The list of errors defined as transient is in the provider-specific implementation of IDataProviderServiceFactory. You can view this in the source code). The RetryCount setting determines how many times the connection retries before aborting and raising an error back to the caller. The RetryInterval determines the length of time (in milliseconds) between retries. The RetryLengthening value can add an additional pause between subsequent retries. One might presume that if the system encounters a transient error, it should retry quickly. Then, if the retry is not successful, it should wait a bit longer for the error to clear before retrying again. The `RetryLengthening1 value is what determines how much longer it will pause on subsequent retries before giving up. The Retry Sequence Lengthening values are: Linear - each retry is the same duration as specified in RetryInterval Fibonacci - The first retry is at RetryInterval , each subsequent retry interval pauses for the duration of the previous two combined. HalfSquare - the retry count number is squared, then divided by two, then multiplied by RetryInterval Squaring - each retry attempt doubles the duration of the previous one. You can visualize the impact of RetryLengthening with these charts: If a Resilience Strategy is not defined, ArgentSea will use a default strategy. Currently, this is: Setting Default Value RetryCount 6 tries RetryInterval 256 milliseconds Lengthening Fibonacci With these values, the default resilience strategy would take a total of five seconds to finally fail. Note that a high RetryCount could create a very long delay before a connection is allowed to ultimately fail. Circuit Breaking When a database connection is unavailable, this can cause serious downstream problems. Processes may pile-on further requests even while earlier requests are simply waiting to time out. As this continues, the queue of backlogged requests becomes so large that the caller itself can manage no more. This bottleneck can block other systems too. What started as a broken connection to a single database eventually becomes fatal to the calling system too! This is the reason to add a “circuit breaker” — a fail-fast mechanism to ensure that callers do not wait needlessly for queued connections that are unlikely to succeed, and which are blocking other processes too. When the circuit breaker is tripped, subsequent connections will fail immediately . This prevents queuing, bottleneck blocking, and downstream failures. While tripped, the circuit breaker will periodically allow a single transaction to proceed; if it successful the circuit breaker is reopened. In this way, a system restoration will automatically close the circuit breaker too so that connections can resume. The CircuitBreakerFailureCount value determines how many sequential failures will trigger the circuit breaker. The CircuitBreakerTestInterval value determines how often (in milliseconds) the circuit breaker will allow a single transaction through. Database Connections The database configuration architecture allow any number of database connections. Each connection is identified by a key, which you also use to request the connection in your code. The connection information is specific to the database provider. SQL Server PostgreSQL SQL Server Database Connections For SQL Server, the [entire set of attributes]/api-sql/ArgentSea.Sql.SqlDbConnectionConfiguration.html) would look like this: \"SqlDbConnections\": [ { \"DatabaseKey\": \"MyDb\", \"DataConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"remote\", \"ApplicationIntent\": \"ReadWrite\", \"ApplicationName\": \"MyWebApp\", \"ConnectRetryCount\": 0, \"ConnectRetryInterval\": 0, \"ConnectTimeout\": 2, \"CurrentLanguage\": \"english\", \"DataSource\": \"localhost\", \"Encrypt\": false, \"FailoverPartner\": \"\", \"InitialCatalog\": \"MyDb\", \"LoadBalanceTimeout\": 0, \"MaxPoolSize\": 100, \"MinPoolSize\": 0, \"MultipleActiveResultSets\": false, \"MultiSubnetFailover\": true, \"PacketSize\": 8000, \"PersistSecurityInfo\": false, \"Pooling\": true, \"Replication\": false, \"TrustServerCertificate\": true, \"TypeSystemVersion\": \"Latest\", \"WorkstationID\": \"\" } } ] Caution You do not need include all of these attributes in your connection! Any value not included in your configuration will be set to the provider default — except as described in the next paragraphs. The ConnectRetryCount , ConnectRetryInterval values default to 0 because the ArgentSea retry logic duplicates this functionality. If you prefer to use the SqlClient retry functionality instead, set these to their desired values and specify a ResilienceStrategy with no retries. If you use both connection retries and ArgentSea retries, no harm will come, other than a lot of retries. The other exception to the provider default values is the ConnectTimeout value. The provider default is 15 seconds, but with the ArgentSea’s retry logic, this could create unnecessarily long connection timeouts. The ArgentSea default is 2 seconds because datacenter connections are easily resolved in that time unless something is wrong. If you have a WAN or high-latency connection (or are using ConnectRetryCount), you should consider increasing this value. If you accept the defaults, the only required parameter values are: \"SqlDbConnections\": [ { \"DatabaseKey\": 1, \"DataConnection \": { \"SecurityKey\": \"2\", \"DataResilienceKey\": \"remote\", \"DataSource\": \"localhost\", \"InitialCatalog\": \"MyDb\", } } ] PostgreSQL Database Connections For PostgreSQL, the entire set of attributes would look like this: \"PgDbConnections\": [ { \"DatabaseKey\": \"MyDB\", \"DataConnection\": { \"SecurityKey\": \"MyCredentials\", \"ResilienceKey\": \"local\", \"ApplicationName\": \"MyWebApp\", \"AutoPrepareMinUsages\": 5, \"CheckCertificateRevocation\": false, \"ClientEncoding\": \"UTF8\", \"CommandTimeout\": 15, \"ConnectionIdleLifetime\": 300, \"ConnectionPruningInterval\": 10, \"ConvertInfinityDateTime\": false, \"Database\": \"MyDB\", \"Encoding\": \"UTF8\", \"Enlist\": true, \"Host\": \"10.10.1.22\", \"IncludeRealm\": false, \"InternalCommandTimeout\": -1, \"KeepAlive\": 0, \"KerberosServiceName\": \"postgres\", \"MaxAutoPrepare\": 0, \"MaxPoolSize\": 100, \"MinPoolSize\": 1, \"NoResetOnClose\": false, \"PersistSecurityInfo\": true, \"Pooling\": true, \"Port\": 5432, \"ReadBufferSize\": 8192, \"SearchPath\": \"\", \"ServerCompatibilityMode\": \"Redshift\", \"SocketReceiveBufferSize\": 8192, \"SocketSendBufferSize\": 8192, \"SslMode\": \"Disable\", \"TcpKeepAliveInterval\": 0, \"TcpKeepAliveTime\": 0, \"Timeout\": 2, \"TrustServerCertificate\": false, \"UsePerfCounters\": false, \"UseSslStream\": false, \"WriteBufferSize\": 8192 } } ] You do not need include all of these attributes in your connection! Any value not included in your configuration will be set to the provider default — except as described in the next paragraph. The principal change to the provider default values is the ConnectTimeout value. The provider default is 15 seconds, but with the ArgentSea’s retry logic, this could create unnecessarily long connection timeouts. The ArgentSea default is 2 seconds because datacenter connections are easily resolved in that time unless something is wrong. If you have a WAN or high-latency connection (or are using ConnectRetryCount), you should consider increasing this value. If you accept the defaults and are running on the default port (5432), the only required parameter values are: \"PgDbConnections\": [ { \"DatabaseKey\": \"MyDB\", \"DataConnection\": { \"SecurityKey\": \"MyCredentials\", \"Host\": \"localhost\", \"Database\": \"MyDb\", } } ] Shard Set Connections A shard set represents a single set of data that is spread among multiple database servers. This structure is common for high-performance data access, since it is usually more cost effective and predictably scalable to have multiple smaller database servers than to build one massive server. Global applications might try to improve performance for their global users by distributing shards in datacenters around the globe. The ArgentSea data access components allow you to query across multiple servers or a find specific record on its corresponding host server. From a configuration perspective, sharded data introduces three concerns: Sharded data requires a larger number of database connections to manage. Scaled out data often uses different connections for read operations and write operations. Because sharded records often need to refer to related records hosted in other shards, the shard identifier become part of the record key. Managing Database Connections Sharded data sets may run to hundreds of servers (or more). ArgentSea manages any number of distinct shard sets and any number of connections in each shard set. You could have a distinct shard set for, say, all of your subscriber information and a separate shard set for all of your operational data. You define the shard set name in your configuration; when you query a shard set, you simply specify the shard set name. Distinct Read and Write Endpoints If you are scaling-out your data access by sharding your data, you are likely also scaling-out by separating read activity from write operations. Examples of this includes SQL Availability Groups, RDS Read Replicas, Azure SQL geo-replication, Aurora reader endpoints, etc. An ArgentSea ShardSet has both read connections and write connections. Only one of these must be defined. If only one is defined, it will be used for both reads and writes. Complicating this is the replication latency between the write/read servers. A read immediately following a write might fail because the expected data has not yet been copied to the read server. To accommodate replication latency when an expected read-only result is not retrieved, ArgentSea will immediately retry the query on the write connection under the following conditions: The query arguments indicate that it is read-only data fetch. The read connection is different than the write connection. The query handler returns a null object (i.e. a parameter attribute is marked required but the database value is (db) null or a custom handler returns null). Tip You can easily have distinct Read and Write database connections for your non-sharded database connections too. Simply define two connections, one for read access and the other for write access. In your code, select the Read connection or Write connection as appropriate. The Shard Identifier Type Each database in a shard set has a shard identifier (shardId) . The shardId is used in combination with the record key to uniquely identify a record. In other words, records in the shard set are identified with a sort of virtual compound key, consisting of the shard identifier and the record key. Note Records within a shard set are uniquely identified with a sort of virtual compound key — a ShardKey — consisting of the shardId and the record identifier. The data type of the ShardId is important because a record in a data shard may refer to records in other shards. Persisting the remote shard reference means saving the shard identifier too. In other words, the ShardId type is used in configuration, throughout your code, in the database, and across all shard sets. Your configuration must also be aware of the nature of this shard key; the ShardId value in your json configuration file must be cast to your ShardId type. Important Once established, the ShardId type cannot be easily changed. More details about the sharId type is in the Sharding section ShardSet JSON SQL Server PostgreSQL For SQL Server, a simple configuration would look like this (assuming that the ShardId type is an integer value): \"SqlShardSets\": [ { \"ShardSetKey\": \"Set1\", \"Shards\": [ { \"ShardId\": 0, \"ReadConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"local\", \"DataSource\": \"LocalServer\", \"InitialCatalog\": \"dbName1\" }, \"WriteConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"remote\", \"DataSource\": \"RemoteServer\", \"InitialCatalog\": \"dbName1\" } }, { \"ShardId\": 1, \"ReadConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"remote\", \"DataSource\": \"RemoteServer\", \"InitialCatalog\": \"dbName2\" }, \"WriteConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"local\", \"ApplicationIntent\": \"ReadWrite\", \"ApplicationName\": \"MyWebApp\", \"ConnectRetryCount\": 0, \"ConnectRetryInterval\": 0, \"ConnectTimeout\": 2, \"CurrentLanguage\": \"english\", \"DataSource\": \"LocalServer\", \"Encrypt\": false, \"FailoverPartner\": \"\", \"InitialCatalog\": \"dbName2\", \"LoadBalanceTimeout\": 0, \"MaxPoolSize\": 100, \"MinPoolSize\": 0, \"MultipleActiveResultSets\": false, \"MultiSubnetFailover\": true, \"PacketSize\": 8000, \"PersistSecurityInfo\": false, \"Pooling\": true, \"Replication\": false, \"TrustServerCertificate\": true, \"TypeSystemVersion\": \"Latest\", \"WorkstationID\": \"\" } } ] } ] For PostgreSQL, a simple configuration would look like this (assuming that the ShardId type is an integer value): \"SqlShardSets\": [ { \"ShardSetKey\": \"Set1\", \"Shards\": [ { \"ShardId\": 0, \"ReadConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"local\", \"Host\": \"LocalServer\", \"Database\": \"dbName1\", }, \"WriteConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"remote\", \"Host\": \"RemoteServer\", \"Database\": \"dbName1\", } }, { \"ShardId\": 1, \"ReadConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"remote\", \"Host\": \"RemoteServer\", \"Database\": \"dbName2\", }, \"WriteConnection\": { \"SecurityKey\": \"0\", \"DataResilienceKey\": \"local\", \"ApplicationName\": \"MyWebApp\", \"AutoPrepareMinUsages\": 5, \"CheckCertificateRevocation\": false, \"ClientEncoding\": \"UTF8\", \"CommandTimeout\": 15, \"ConnectionIdleLifetime\": 300, \"ConnectionPruningInterval\": 10, \"ConvertInfinityDateTime\": false, \"Database\": \"dbName2\", \"Encoding\": \"UTF8\", \"Enlist\": true, \"Host\": \"LocalServer\", \"IncludeRealm\": false, \"InternalCommandTimeout\": -1, \"KeepAlive\": 0, \"KerberosServiceName\": \"postgres\", \"MaxAutoPrepare\": 0, \"MaxPoolSize\": 100, \"MinPoolSize\": 1, \"NoResetOnClose\": false, \"PersistSecurityInfo\": true, \"Pooling\": true, \"Port\": 5432, \"ReadBufferSize\": 8192, \"SearchPath\": \"\", \"ServerCompatibilityMode\": \"Redshift\", \"SocketReceiveBufferSize\": 8192, \"SocketSendBufferSize\": 8192, \"SslMode\": \"Disable\", \"TcpKeepAliveInterval\": 0, \"TcpKeepAliveTime\": 0, \"Timeout\": 2, \"TrustServerCertificate\": false, \"UsePerfCounters\": false, \"UseSslStream\": false, \"WriteBufferSize\": 8192 } } ] } ] If the shardid is a string you should enclose the value in quotes ( ShardId: \"0\" ). The configuration file can repeat the ShardSet section (the object with ShardSetKey and Shards entries) for each shard set. Likewise, the entries in the Shards array can repeat for every data shard in the shard set. As illustrated by Shard 1’s Write Connection, any connection can include a any number of provider-specific connection attributes. Loading the Configuration ArgentSea uses the built-in Options configuration and dependency injection architecture in .NET Core. The complexity of turning a JSON configuration file into a connection object is as simple as adding the services.AddSqlServices<TShard>(Configuration) extension method to the ConfigureServices method in your Startup class. SQL Server PostgreSQL This example assumes that your shardId type is byte . If you use any other type, change the generic parameter. If you use ArgentSea database connections without sharding, simply remove the generic declaration altogether (i.e. services.AddPgServices(Configuration); only). public void ConfigureServices(IServiceCollection services) { ... // add your injectable logging provider services.AddLogging(); // add the ArgentSea SQL database connections (shardId type: byte) services.AddSqlServices<byte>(Configuration); // now add your custom data classes, which use the data components services.AddSingleton<MyDataStore>(); ... services.AddMvc(); ... } This example assumes that your shardId type is short . If you use any other type, change the generic parameter. If you use ArgentSea database connections without sharding, simply remove the generic declaration altogether (i.e. services.AddPgServices(Configuration); only). public void ConfigureServices(IServiceCollection services) { ... // add your injectable logging provider services.AddLogging(); // add the ArgentSea SQL database connections (shardId type: short) services.AddPgServices<short>(Configuration); // now add your custom data classes, which use the data components services.AddSingleton<MyDataStore>(); ... services.AddMvc(); ... } public IConfiguration Configuration { get; } This code references a Configuration property. It is common practice to obtain the configuration object from the constructor of the Startup class, then use this to set the Configuration property. Simplified Data Connections In .NET Core, any data repository class can use the ArgentSea data access component by adding and argument to its constructor. if you any experience in .NET Core, requesting the database connection in any data access class is straightforward: SQL Server PostgreSQL public MyDataAccessStore(SqlDatabases dbs, ILogger<MyDataAccessStore> logger) { ... public MyDataAccessStore(PgDatabases dbs, ILogger<MyDataAccessStore> logger) { ... The injected data access component allows the class to access any connection, which means that you would need to specify the connection name. In most cases, however, the class will only access a single data source. To simplify the data access code, you can instead store only the relevant connection instance: SQL Server PostgreSQL private readonly SqlDatabases.DataConnection _data; public MyDataAccessStore(SqlDatabases dbs, ILogger<MyDataAccessStore> logger) { ... _data = dbs.DbConnections[\"MyConnectionName\"]; ... Subsequent calls to the SQL database can be on methods directly on the _data object. private readonly PgDatabases.DataConnection _data; public MyDataAccessStore(PgDatabases dbs, ILogger<MyDataAccessStore> logger) { ... _data = dbs.DbConnections[\"MyConnectionName\"]; ... Subsequent calls to the SQL database can be on methods directly on the _data object. The flexibility of the ShardSets object stands in more need of this simplification. Using the ArgentSea components requires that the generic ShardId type (which can never change) is declared redundantly. You can simplify this is two ways: Use the using statement to alias the ShardSet declaration. Declare a internal class which inherits from ShardSet To simplify calling a ShardSet within a single file , simply add: SQL Server PostgreSQL using ShardSets = ArgentSea.Sql.SqlShardSets<byte>; // and/or using ShardSet = ArgentSea.Sql.SqlShardSets<byte>.ShardDataSet; Again, the assumes a ShardId type of byte ; replace this as appropriate. using ShardSets = ArgentSea.Pg.PgShardSets<short>; // and/or using ShardSet = ArgentSea.Pg.PgShardSets<short>.ShardDataSet; Again, the assumes a ShardId type of short ; replace this as appropriate. By creating a local class that inherits from then generic class, you can simplify the shard set reference throughout your project. SQL Server PostgreSQL public class ShardSets : SqlShardSets<byte> { public ShardSets( IOptions<SqlShardConnectionOptions<byte>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<ShardSets> logger ) : base(configOptions, securityOptions, resilienceStrategiesOptions, logger) { // } } public class ShardSets : PgShardSets<short> { public ShardSets( IOptions<SqlShardConnectionOptions<short>> configOptions, IOptions<DataSecurityOptions> securityOptions, IOptions<DataResilienceOptions> resilienceStrategiesOptions, ILogger<ShardSets> logger ) : base(configOptions, securityOptions, resilienceStrategiesOptions, logger) { // } } This approach will be helpful in reducing the number of times the generic shardId type must be specified in project."
  },
  "index.html": {
    "href": "index.html",
    "title": "ArgentSea Documentation | ArgentSea Docs",
    "keywords": "ArgentSea Documentation Modern web applications need to be built for performance and scalability, as well as security, monitoring, and configuration. ArgentSea offers a framework that consistently represents best practices for all of these concerns. When you select a solution, it is important to know which problems they are intended to fix. Some data libraries are designed to make it easier for non-SQL developers to work with database data. Others are intended to make developers more productive by reducing the coding effort. ArgentSea is primarily intended to address two problems: scalability and supportability. ArgentSea optimizes the work of your developers without compromising the performance or security of your infrastructure. Massive Scalability Highly scalable data means data “sharding” — the practice of spreading data across many database servers. Data sharding offers the most cost effective way to scale your data application as demand grows. To scale your application globally, data sharding offers the ability locate copies of your data across regional datacenters, so that data is located closer to your customers. High-performance data access means simultaneous queries across shards, data-to-object mapping without the overhead of reflection, and the consistent use of stored procedures/functions to reduce SQL compilation overhead. While the genesis of ArgentSea was to support the complex requirements of data sharding, it will likely be useful for high-performance data access even if you are not accessing sharded data. Mission Critical Supportability ArgentSea also addresses production concerns with built-in features like monitoring/logging, automatic retries after failures, controlling cascading failures, security best-practices, and managing connection configuration. The data framework will attempt to recover from transient errors by automatically retrying the data access; you have control over how long and how often. If repeated failures occur, the system will “circuit break”, so that data failures have less chance of bringing down the whole application. The logging implementation allows you to log to any provider, including Application Insights , CloudWatch , the file system, Windows event logs, and more. Database passwords can be secured using Key Vault , Secrets Manager , User Secrets , or other secure storage, while connection information can be separately managed per environment. Code Clarity and Maintenance Supportability is about more than operational management. It also includes simplicity in understanding application behavior, ease in extending it with new features and requirements, and a natural path to resolving bugs. When applications must be supported by teams that are not the original authors, this becomes especially critical. The ArgentSea Mapper helps reduce the burden of code maintenance by simplifying data access code. The logging functionality can also provide substantial insight to developers, including the dynamic code compilation behind the Mapper, misconfigurations, and data errors. However, one of the top ways that ArgentSea help with ongoing code maintenance is that it enforces the use of stored procedures or functions. Tight Coupling Although it might sound cozy, “tight coupling” isn’t a good thing in software design. It happens when one system’s integration with another system depends on the internal implementation of the other system. Usually the result of haphazard design, it makes it nearly impossible to switch to a different provider. Like, say, when accessing your database *depends upon how tables and columns are implemented*. Loose Coupling “Loosely coupled” systems have well-defined interfaces. You can change the implementation as long as you maintain the interface contract. These systems are more robust, testable, and manageable — and those are good things. Stored procedures or functions allow you to change the underlying database structures, but as long as the same results are returned you will not break the application. Stored procedures enable loose coupling between the app domain and the data domain. They generally perform better and offer better security too. This is why ArgentSea was built to work with stored procedures. Because ArgentSea encourages you to do your data-domain work in SQL and your application work in .NET, both your developers and your database administrators have far better control over your data. Getting Started If you like to understand everything first, explore the deep dives ; if you prefer to learn by getting your hands dirty, jump into the walkthroughs . Deep Dives Installing ArgentSea (coming soon). Setting up your configuration Querying Mapping Using shards Walkthroughs QuickStart 1 - Setting up and configuring an initial project QuickStart 2 - Adding shard handling and queries Reference You can find the most detailed information in the API section ."
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "Overview | ArgentSea Docs",
    "keywords": "Overview These deep-dive tutorials explain distinct functional areas in depth. If you’d prefer to learn by being hands-on, you can explore QuickStart 1 , which guides you through a project setup, and QuickStart 2 , which extends that to sharding. ArgentSea is built on top of ADO.NET, so an understanding of basic .NET data access is be essential to understanding ArgentSea. Once you understand the architecture of the framework, you will find it no more difficult to use (and generally less difficult) than other .NET data access approaches. You can always still use ADO.NET to resolve any capability gaps or distinctive query requirements. Setup Tutorial Data sharding is difficult to retroactively add to an existing project without rewriting it. If you are creating a new project, it certainly makes sense to use .NET Core or .NET Standard (rather than then legacy .NET Framework). ArgentSea would probably work in a legacy .NET Framework application, but it is not tested for this purpose and it uses services — such as dependency injection, configuration, and logging — that are implemented differently in the newer .NET versions. If you do use the legacy .NET Framework, please help build out our documentation with any guidance you can share. Configuration Tutorial ArgentSea uses the new configuration infrastructure in .NET Core, including strongly typed Options classes and injectable services. The configuration information can be stored in a JSON file, environment variables, key stores, and more. Registering the ArgentSea services is easy with our extension method. You can configure database connections, shard sets, or both. The configuration approach is intended to make it easy to manage lots of connections (including separate read and write endpoints), store credential information securely, and also capture resilience preferences (retries and circuit breaking). You may encounter problems, however, if you combine multiple database platforms (i.e. both SQL Server and PostgreSQL) in a single project; it is not a tested scenario. Mapping Tutorial Data access can require a lot of boilerplate code, much of which maps properties to data parameters, columns, etc. ArgentSea contains a distinctive ORM (Object Relational Mapper) that is focused on parameters and procedures/functions rather than generating dynamic SQL. The mapping metadata is set by property attributes. The ORM compiles the property to data mapping during the first call; afterward, the mapping should as fast as if it had been a hand-coded ADO.NET mapping. The Mapper enables nullable types to map to database Null values. Enum properties can map to either string data fields (containing the Enum name) or numeric fields (containing the base value). The Mapper even handles nullable Enums. Querying Tutorial The ArgentSea framework allows querying both Databases and ShardSets. When you can use the Mapping capabilities, this is dead simple. However, sometimes you need to write a custom data handler. Using ArgentSea isn’t much difficult than other ADO.NET code, once you understand the logic behind the framework. Sharding Tutorial Sharded data presents two extra challenges: identifying specific records across all servers, and concurrently querying multiple servers for data. Because table relationships and unique constraints are no longer enforced by the database engine, a sharded application needs a global strategy for identifying records. ArgentSea offers a “virtual compound key” where the shard identifier and the record identity combine as the record key. ArgentSea also works with other record identity approaches. Simultaneous querying across multiple shards requires querying on multiple threads. Both ADO.NET and Entity Framework require “non-standard” implementations to enable concurrent queries on distinct threads. ArgentSea makes this easy, as you can simply set parameters and get results on a ShardSet."
  },
  "tutorials/querying.html": {
    "href": "tutorials/querying.html",
    "title": "Querying Data | ArgentSea Docs",
    "keywords": "Querying Data This deep dive assumes that you have your project correctly configured and it is also helpful if you have some understanding of ArgentSea’s Mapping capabilities ArgentSea was originally built to support application data sharding. Even if you do not use data sharding in your application, a brief discussion of the issues will help explain the architecture behind of ArgentSea’s data access approach. It will not be more difficult than any other ADO.NET query. Understanding Sharding The best way to understand the query architecture of ArgentSea is to describe a typical ADO.NET query then describe how this must change to account for concurrent multi-threaded queries across a shard set. These changes are not complicated, and they should be helpful even if your project does use sharding. A typical ADO.NET data access method follows these steps: Start with a connection object, created from a connection string. Create a command object that is associated with the connection object. Next, the populate the command's Parameters property with the necessary input and output parameters. Open the connection and run the command. Create a Model object, which represents the data to the application, and use the DataReader and/or output parameters to populate its properties. In a sharded environment, however: The same parameters must be executed on multiple connections — reversing the steps 1 to 3. A distinct command object must be executed and the results processed on a separate thread for each connection. The parameters cannot be shared (different threads would overwrite each other’s values) and the result handler must be thread-safe because it could be simultaneously executing on different connections. ArgentSea manages the challenges of multi-threaded access access with a four-step approach: Declare the parameters and arguments that will be passed to the stored procedures. Create a thread for each shard connection, then create the connection (and command ) object for each. Copy the parameter values to the parameter collection on each shard’s command object. Call the stored procedure/function on each shard’s thread. When results are obtained, call (thread-safe) code to create and populate a Model object. Merge the results and return them to the caller. Ultimately, using ArgentSea on multiple shards is no more difficult than writing simple ADO.NET database access code (and usually much easier), but the code new needs to be grouped and sequenced differently. Previously, you would usually use just one data access procedure, which would set the ADO.NET parameters, run the query, then convert the results to a Model object. Now, because processing results is multi-threaded whereas setting up the query is not, you need to split that process into two procedures: The caller method sets the parameters and calls an ArgentSea query method. This executes on a single thread. The handler procedure converts the results ( DataReader and/or output parameters) to a Model object result. This can execute on many threads. This ArgentSea query paradigm applies even to non-sharded queries using the Databases collection. This provides some design consistency, but also enables the Mapper for both sharded and non-sharded data. {!TIP] If you use ArgentSea’s optional Mapping functionality, the multi-threaded results handling procedure is already provided by the Mapper. You do not have to write a handler. Setting Parameters With the ArgentSea framework, you need to set parameter values before a connection or command is created. The ADO.NET standard parameter collections cannot be created without a command object host. To fill this need, ArgentSea provides a QueryParameterCollection object, which is simply a collection of ADO.NET DbParameters. This object allow you to create an instance with a simple new statement. var parameters = new QueryParameterCollection(); ArgentSea provides a variety of extension methods to work with the parameters collection. Methods to easily add parameters to any parameters collection Methods to simplify obtaining values from parameters. Methods to Map Models properties to parameters. Creating Parameters with Extension Methods ArgentSea offers a set of extension methods that simplify the code required to optimally create and populate parameters and also handle database nulls. The methods to add parameters to a collection are provider-specific, since they are converting .NET types to database types. This means that the extension methods won’t appear unless you have a using statement referencing the provider. SQL Server PostgreSQL using ArgentSea.Sql; Note The QueryParameterCollection and SqlParameterCollection inherit from the same base class. Not only can you use these methods on ArgentSea’s QueryParameterCollection , but you can also use them on the standard ADO.NET SqlCommand.Parameters property. Here are some code examples: parameters.AddSqlIntInputParameter(\"@TransactionId\", transactionId); parameters.AddSqlDecimalInputParameter(\"@Amount\", amount, 16, 2); parameters.AddSqlNVarCharInputParameter(\"@Name\", name, 255); parameters.AddSqlFloatOutputParameter(\"@Temperature\"); // These methods all support a fluent api, so these can be written instead as: var parameters = new QueryParameterCollection() .AddSqlIntInputParameter(\"@TransactionId\", transactionId) .AddSqlDecimalInputParameter(\"@Amount\", amount, 16, 2) .AddSqlNVarCharInputParameter(\"@Name\", name, 255) .AddSqlRealOutputParameter(\"@Temperature\"); // And these methods also work on the data provider’s command parameters collection. cmd.Parameters.AddSqlIntInputParameter(\"@TransactionId\", transactionId) .AddSqlDecimalInputParameter(\"@Amount\", amount, 16, 2) .AddSqlNVarCharInputParameter(\"@Name\", name, 255) .AddSqlRealOutputParameter(\"@Temperature\"); using ArgentSea.Pg; Note The QueryParameterCollection and NpgsqlParameterCollection inherit from the same base class. Not only can you use these methods on ArgentSea’s QueryParameterCollection , but you can also use them on the standard ADO.NET NpgsqlCommand.Parameters property. parameters.AddPgIntegerInputParameter(\"TransactionId\", transactionId); parameters.AddPgDecimalInputParameter(\"Amount\", amount, 16, 4); parameters.AddPgVarCharInputParameter(\"Name\", name, 255); parameters.AddPgDoubleOutputParameter(\"Temperature\"); // These methods all support a fluent api, so these can be written instead as: var parameters = new QueryParameterCollection() .AddPgIntegerIputnParameter(\"TransactionId\", transactionId) .AddPgDecimalInputParameter(\"Amount\", amount, 16, 2) .AddPgVarCharInputParameter(\"Name\", name, 255) .AddPgDoubleOutputParameter(\"Temperature\"); // And these methods also work on the data provider’s command parameters collection. cmd.Parameters..AddPgIntegerInputParameter(\"TransactionId\", transactionId) .AddPgDecimalInputParameter(\"Amount\", amount, 16, 2) .AddPgVarCharInputParameter(\"Name\", name, 255) .AddPgDoubleOutputParameter(\"Temperature\"); Where appropriate, the methods have overloads that accept nullable value types. When the nullable type is null, the parameter will be set to a database Null value. If you are not using the Nullable overloads, then the values Guid.Empty, double.NaN, and float.NaN will also be saved as database Nulls. Likewise, null strings will be set to database Nulls, but empty strings will save as zero-length strings. The extension methods accepting string values have a max length argument, and those converting to Ansi database values have a code page parameter. The decimal methods have arguments for specifying precision and scale. Creating Parameters with the Mapper The Mapper uses Model property attributes to automatically generate code that is much like what would be created in the previous section. Technically, the Mapper procedures are also extension methods, but we are discussing them separately in this section. Assuming that the Model (in this example, a “Customer” class) has Mapping attributes associated with each of its properties, you can render all the corresponding input parameters and set their respective values with: parameters.CreateInputParameters<Customer>(customer, logger); You can do something similar with output parameters — though it would be unlikely that you would want to want to create only output parameters. You will probably need at least one input parameter (likely a key). If you create the input parameter first, it will not be duplicated by the Mapper as it generates output parameters. SQL Server PostgreSQL parameters.AddSqlIntInputParameter(\"@TransactionId\", transactionId); parameters.CreateOutputParameters<Customer>(logger); // Again, these methods all support a fluent api, so this can be written instead as: var parameters = new QueryParameterCollection() .AddSqlIntInputParameter(\"@TransactionId\", transactionId) .CreateOutputParameters<Customer>(logger); parameters.AddPgIntegerInputParameter(\"TransactionId\", transactionId); parameters.CreateOutputParameters<Customer>(logger); // Again, these methods all support a fluent api, so this can be written instead as: var parameters = new QueryParameterCollection() .AddPgIntegerInputParameter(\"TransactionId\", transactionId) .CreateOutputParameters<Customer>(logger); Finally, you can always add parameters using standard ADO.NET syntax: var parameter = new System.Data.SqlClient.SqlParameter(); parameter.SqlDbType = System.Data.SqlDbType.Int; parameter.Value = transactionId; command.Parameters.Add(parameter); Fetching Data Retrieving database data consists of running a stored procedure or function on each connection. ArgentSea provides various methods to offer the best approach: Database methods These methods can be used on Database connections, and on a shard instance (read connection or write connection) within a ShardSet: Methods Uses Mapper Description LookupAsync Returns a value from the database. This may be a return value (int) or single output parameter. RunAsync Executes a database command. No results are returned. QueryAsync Returns the typed object created by a handler delegate. MapListAsync • Returns a List of typed objects from the data results. MapReaderAsync • Returns a typed object created by the Mapper from DataReader results. MapOutputAsync • Returns a typed object created by the Mapper from output parameters and DataReader results. ShardSet methods These methods execute the same command more-or-less concurrently on all the shards in a ShardSet. The ShardSet methods always use the Read connection. Methods Uses Mapper Description QueryAllAsync Returns a List of any non-null objects created by a handler delegate in any shard. The list count will not be larger than the shard count. QueryFirstAsync Returns the first non-null object created by a handler delegate in any shard. Use this when you are expecting a single result. MapListAsync • Returns a combined List of typed objects from the data results, across all shards. Additional result sets will be discarded. MapReaderAllAsync • Returns a List including any non-null objects created from any shard’s data reader results (not using output parameters). The list count will not be larger than the shard count. MapReaderFirstAsync • Returns the first non-null object created on any shard where the procedure/function returns data reader results. Use this when you are expecting a single result and not using output parameters. MapOutputAllAsync • Returns a List including any non-null objects that were created by invoking a procedure/function that returns results via output parameters and data reader results. The list count will not be larger than the shard count. MapOutputFirstAsync • Returns the first non-null object created by invoking a procedure/function that returns results via output parameters and data reader results. Use this when you are expecting a single result and using output parameters. Method Arguments The arguments are largely consistent across all of the methods. Required Argument: (string) sprocName This is simply the name of the stored procedure or function to be invoked. This string value is required for every data access method. The general practice is to provide a stored procedure/function name with string constant, like this: await database.RunAsync(\"ws.MyProcedureName\", parameters, cancellationToken); As larger applications evolve, however, one can lose track of which database procedures are actually being used by the application. It is not unusual for a custom application to have hundreds of data procedures, only a fraction of which are used. Pro tip: you might consider consistently referencing procedure names via a static class, like this. internal static class DataProcedures { //This should be a COMPREHENSIVE list of stored procedure names. //You can use the reference count to determine what is in use. public static string CustomerAdd { get; } = \"ws.CustomerAdd\"; public static string CustomerList { get; } = \"ws.CustomerList\"; public static string CustomerLocationGet { get; } = \"ws.CustomerLocationGet\"; public static string CustomerLocationDetailsGet { get; } = \"ws.CustomerLocationDetailsGet\"; public static string CustomerLocationsAllByUser { get; } = \"ws.CustomerLocationsAllByUser\"; public static string CustomerLocationsByGroupIDs { get; } = \"ws.CustomerLocationsByGroupIDs\"; // ... } // Now you can reference the procedure name like this: await database.RunAsync(DataProcedures.CustomerAdd, parameters, cancellationToken); Centralizing the procedure name list allows reviewers to see which procedures are actually used by the application (and ensure that non are misspelled). Surfacing them using static properties, as in the example, allows Visual Studio to provide a “reference count” for each procedure (constants do not do this). When the method that called this stored procedure/function is removed from the code, the zero “reference count” will make it obvious that, even though the name defined, it is not actually used. The reference count popup data even allows you to find all of the methods that invoke that stored procedure/function. This can be helpful as you prune different data procedures that seem to do the same thing. Required Argument: (DbParameterCollection) parameters The abstract DbParameterCollection is implemented by ArgentSea’s QueryParameterCollection object. Because it is also implemented by the provider-specific command.Parameters property, if you have a command with valid parameters defined (for some reason), you can use that too. This value can be null if there are no parameters. Warning When working with output parameters in standard ADO.NET, you may habitually maintain a variable reference to any output parameters you created before adding it to the collection. This makes it easy to get the output parameter value after the query is executed. This approach will not work with sharded data, because ArgentSea will copy the parameter set before executing the stored procedure/function. Any referenced output parameters will not contain a data result. Optional ShardSet Argument: (IEnumerable<ShardParameterValue<TShard>>) shardParameterValues Some shard query method overloads accept a ShardParameterValue object. This object allows you to specify which shards should be queried and even provide distinct parameter values to each shard. For example, suppose your User record returns a list of “Friends”. The Friend detail data may be hosted on other shards, but not on every shard. Building a list of ShardParameterValue objects from the User results would limit the subsequent queries to just the relevant shards. The ShardParameterValue type has a ShardId and an optional parameter name and value. Only shards with at least one listed ShardId will be queried. If a parameter name is also specified, the corresponding parameter will be set to that value on the indicated shard. You can include multiple parameters/values on the same shard by repeating the shardId. Optional ShardSet Argument: (string) shardParameterName Some shard query overloads also accept the name of the parameter that represents the name of the parameter that should be set to shardId value. If specified, ArgentSea will set this parameter value to the current shardId value as it executes each query. For example, a query for a list of records that spans shards could be enhanced if the query new the value of its own ShardId. Alternatively, because a shard misconfiguration might result in catastrophic data corruption (due to the high likelihood of duplicate record identities between shards), you might require that stored procedures or functions that write to the database also have a ShardId parameter that they validate is correct. Optional Argument: (QueryResultModelHandler<TShard, TArg, TModel>>) resultHandler This is only used in the QueryAsync methods. As described earlier, the data query process is divided into two processes. The resultHandler is a delegate that may be invoked concurrently by distinct, shard-specific threads. If you use a data access method prefixed with Map*, this argument is not required because the delegate provided by the Mapper is used. If the Mapper does not suit your purpose, then a custom delegate must be provided to a Query* method. Your custom delegate can have an argument that provides additional data or context information. Information on how to build a custom delegate is provided below. Optional Argument: (bool) isTopOne Some overloads expose the isTopOne option, which allows a minor optimization when only a single result is expected. For example, if you are looking up a record by its key, you don’t need to allocate space for multiple results when only a single result can ever be returned. Optional Argument: (TArg) optionalArgument If you are creating a custom data handling method, you may need to provide additional data or context information. This argument may be generically typed. The provided object is passed to your result handling delegate. Required Argument: (CancellationToken) cancellationToken The cancellation token allow you to cancel asynchronous operations. ASP.NET MVC provides cancellation tokens and these can be passed along. In this way, when a user abandons their session, any uncompleted queries can be cancelled. The MapReader* and MapOutput* Methods The MapReader* and MapOutput* methods are similar. Both use the Mapping attributes to resolve data to Model objects. The MapOutput* method uses output parameters to build the root result object; the MapReader methods use a (single record) DataReader result instead. So, if you use output parameters (which is potentially more performant), use MapOutput* . If you use standard SELECTs to return your data, use MapReader* . Both methods support multiple result sets that populate properties that contain Lists of related data. For example, you might have an Order record with a property containing an OrderItem List. The list items come from (additional) DataReader results. You can have up to eight of these List properties. Tip The order in which your attribute-mapped class appears in the generic definitions should be the same order as the list data results in the procedure output. An example of calling each would be: // In this example, ws.GetOrderDetails returns Order data in output parameters: _database.MapOutputAsync<Order>(\"ws.GetOrderDetails\", parameters, cancellation); // Here, ws.GetOrderDetails returns simple Order data in a single-row SELECT: _database.MapReaderAsync<Order>(\"ws.GetOrderDetails\", parameters, cancellation); // Now ws.GetOrderDetails returns Order data in output parameters and a list of OrderItem from a SELECT: _database.MapOutputAsync<Order, OrderItems>(\"ws.GetOrderDetails\", parameters, cancellation); // Finally, ws.GetOrderDetails returns Order data in a single-row SELECT, then a list of OrderItems from a 2nd SELECT: _database.MapReaderAsync<Order, Order, OrderItems>(\"ws.GetOrderDetails\", parameters, cancellation); // Expanding this, we now have output parameters and three SELECTs: _database.MapOutputAsync<Customer, OrderHistory, Locations, Contact>(\"ws.GetCustomerDetails\", parameters, cancellation); // Likewise, the procedure now returns four SELECTs, and the third one is a single-row SELECT with the base customer data, // the remaining select are used to build customer property lists (order history, locations, and contacts): _database.MapReaderAsync<Customer, OrderHistory, Customer, Locations, Contact>(\"ws.GetCustomerDetails\", parameters, cancellation); In both methods, the generic type in the first position is the return type. If additional results are included in the result stream, the subsequent types define the order in which they are expected in the DataReader results. You can have up to eight DataReader results streamed to distinct List properties. In the MapOutput* example, then, the result type is Order and the first DataReader result is a series of OrderItems. In the MapOutput* example, the result type is Order, and the first DataReader result is the Order data, and the second DataReader result is a series of OrderItems. The Query* Methods The Query* methods provide the most control, as you are given raw ADO.NET query results to construct whatever return value you like. You can return a list, a dictionary, or any type of Model object. When you call a Query* method, you must provide a handler method whose signature corresponds to the QueryResultModelHandler delegate. There are two obvious scenarios for the Query* methods: The Model class is defined in a library, so Mapping attributes cannot be added. The rendering a complex return value is beyond the capabilities of the Mapper. The delegate even has a parameter that allows you to provide custom data (through the query method) with which to construct your result object. The delegate must be thread-safe. The ShardSet manages the complexity of initializing multiple queries on multiple connections and multiple results, but it is the delegate that takes the database results (from each connection/thread) and creates an object result. Note The Mapper provides several thread-safe, high-performance QueryResultModelHandler delegates. In fact, providing a Mapper delegate to the Query* method is exactly how the MapOutput* an MapOutput* methods are implemented. You can use this yourself to extend the Mapper; just provide your own delegate that calls the Mapper in turn. Details on implementing the QueryResultModelHandler delegate is in the next section. Handling Data Results If you are using data mapping attributes in your Model classes, the MapReader* , MapOutput* , and MapList* methods make handling data results unnecessary. This section is for queries that use the Query* methods, which allow you to return an arbitrary object from the data input. If you are familiar with ADO.NET programming, this will be very familiar. The delegate simply receives the standard ADO.NET query results and processes them like it would in most other ADO.NET scenarios. As an example, a method with the correct signature for returning a Customer model looks like this: public static Customer MyCustomerHandler ( short shardId, string sprocName, Department department, // this is an optional custom argument DbDataReader reader, DbParameterCollection parameters, string connectionDescription, ILogger logger) { var result = new Customer(); // use the reader argument and/or parameters collection to set your result properties. return result; } The Arguments Both the return type (“Customer”, in the example) and the optional data argument (“Department”, in the example) are generic, so they can be of any type. (TShard) shardId The shardId argument will be a default value, like null or zero, when not using a ShardSet; otherwise it will be set to the current ShardId. This value is essential when building ShardKey or ShardChild types, where the shard identity is a component of the record identity. (string) sprocName This is the name of the stored procedure or function that was executed. It is provided to the procedure for logging purposes. (TArg) optionalArgument The third argument type is a generic parameter; the type is defined when you declare the delegate. This object provides whatever external data or context that many be necessary or useful in order to create your result. If it not needed (i.e. most cases), define the type as object . This allows you to use the Query* overloads that do not require this parameter; in those cases, this value will be null. (DbDataReader) reader The reader argument is a standard data reader. You can call reader.MoveNext() to get the next row and reader.NextResult() to get the next result set. You do not need to dispose of it when you are done. (DbParameterCollection) parameters The parameters collection contains the input and output parameters for the query. ArgentSea offers a set of extension methods to simplify converting parameter values to .NET types. These are extension methods on the parameter object (not the collection). var transactionId = parameters[\"@TransactionId\"].GetInteger(); var amount = parameters[\"@Amount\"].GetNullableDecimal(); var name = parameters[\"@Name\"].GetString(); (string) connectionDescription The connectionDescription argument allows the logger to include the connection that raised the error or event. You should include this (and also the stored/function procedure name) in any logging or errors in your procedures. Because your delegate could run on multiple connections, this can be essential debugging information. (ILogger) logger Finally, the logger argument allows you to write debugging, warning, and error information to the application logs. This is the same logger instance as is passed in through the various query methods."
  },
  "tutorials/sharding.html": {
    "href": "tutorials/sharding.html",
    "title": "Sharding | ArgentSea Docs",
    "keywords": "Sharding About Sharding Sharding is the technique of spreading your data across multiple database servers. It is difficult to add sharding to an existing application because it requires careful thought about the data model and data access. Scalability For large data sets, sharding has the advantage of being more cost effective and more predictably scalable than a single massive server. It is hard to justify a massive database server purchase today to accommodate an unreliable growth forecast. Incrementally adding new database servers as demand grows is much a sounder financial approach. Virtualization and cloud technologies help alleviate this problem by making it easier to scale instances, but if you reach the limits of their instance scalability then you have the same problem. Disaster Recovery Business continuity plans often specify a disaster recovery datacenter that can resume processing if the primary data center goes offline (usually due to a natural disaster like fire, earthquakes, flooding, etc.). Although this approach is common, it is usually plagued by two issues: The business must buy a complete data center that is nearly always idle Unless testing is unusually robust and frequent, there will always be doubt about whether the failover datacenter would be really able to assume a primary role It would be immeasurably better to simply have both the primary and secondary datacenters actively processing transactions, each with enough reserve capacity to handle the load of the other in the event of failure. This negates both the waste of buying an idle datacenter and also any concerns about whether the failover site is truly ready to handle live transactions. In order for both datacenters to be simultaneously active, each one must “own” a segment of the data — which means data sharding. Global Availability Your foreign customers will have a better, more responsive experience with your application if they access their data from a regionally nearby datacenter. Users accessing a single datacenter across the globe will experience noticeably slower connections. Using sharding with geo-replication can optimize regional access and still allow local queries across all the data. Data privacy laws — particularly in China, Europe, and Russia — are also driving data storage to regional datacenters. A data sharding approach can be a useful way to consolidate the legally exportable subset of the data collected in these jurisdictions. Switching to Shards If you are familiar with relational databases, you will discover that the database engine enforced some standard functionality that is no longer automatically available. For example, unique keys may not be unique across servers and foreign keys may refer to records that do not exist on that server. Thinking carefully through these issues will likely lead to successful workarounds. ArgentSea offers essentially two services for managing sharded data: The ShardSet unifies the many shard connections and directs queries to the correct shard and allows concurrent queries across all of them The ShardKey (and related ShardChild ) are a “virtual compound key” that uniquely identifies a record using the shard Id and the record key. ArgentSea’s querying architecture is designed to support concurrent queries across multiple shards. You can explore that further here . The ShardKey and ShardChild All databases need a way to uniquely identify a record — a record key. With sharded data sets, a record key need to be unique across all the shards. Within a single database, uniqueness is easily managed; across a shard set, database engines can no longer enforce uniqueness for data they don’t know about. Additionally, on the client side, the query dispatcher needs to be able to use the record key in order to know to which shard connection to use. There are two approaches to maintaining a unique key across multiple databases: Use distinct identity ranges for each database in the shard set. The upside of this approach is that it is possible to combine data sets without conflicts; the downside is that configuration is complicated — on both the client and database servers — so mistakes are more likely, and some mistakes can be very hard to fix. The query dispatcher must know the various identity ranges hosted by each server in order to select the right connection. Combine the shard connection key and the record key into a larger “compound key”. With this approach, finding the right shard connection is easy because the value is embedded in the compound record key. The database servers do not need to be configured with separate identity ranges, which in some case may allow smaller, more efficient key sizes (i.e. int vs bigint). Combining or splitting shards could be more complicated, however. ArgentSea will work with either design. The ShardKey and ShardChild objects offer support for the second approach. Components A ShardKey consists of three components: a DataOrigin , a ShardId , and a RecordId . A ShardChild has the same values plus an additional ChildId . The DataOrigin Both the ShardKey and ShardChild have a DataOrigin value. The purpose of this value is to represent a data source. It is little more than a character value that you can choose to differentiate the data source. For example, keys representing a Customer record might have a DataOrigin of “c”, whereas keys representing a Product record might have a DataOrigin of “p”. Because this simple tag identifies the data source, two different ShardKeys from the same shard and with the same record number will still not be equal because they represent different source data. Important One DataOrigin character value is reserved: “0” (Unicode charactor Zero, Unicode numeric value 30). This is used for the DataOrigin of ShardKey.Empty and ShardChild.Empty . Creating a ShardKey or ShardChild with a “zero” DataOrigin character but non-default (i.e. not zero or not null) ShardId or RecordId will throw an InvalidShardArgumentsException error. This capability is useful for helping prevent data from being accessed with the wrong type of key — like an inventory key inadvertently passed to fetch an account record. Also, this may be helpful for caching data, since you can use the same dictionary to cache objects of different types without key collision. The ShardId The ShardId is used to identify a particular shard in the ShardSet. The core ArgentSea framework uses a generic type for the ShardId because the ideal data type will depend upon your requirements. Technically, the ShardId can be any of the types available to a RecordId (see below). Practically, however, it makes sense to avoid types without a corresponding SQL type and also avoid unnecessarily large data sizes. This leaves byte (SQL Server only), short , char as the most storage-efficient choices; int , string are viable choices if your ShardId has other requirements — like needing to integrate with external systems. In essence, the most efficient ShardId type for SQL Server is byte/Tinyint, and for PostgreSQL is Int16(short)/Smalllint. If you really can’t decide and have no particular requirements, a simple starting place is to use byte if are using SQL Server and you have confidence that you will never need more than 256 shards in a ShardSet , otherwise start with short . Because the ShardId value is used in configuration, queries, and also for saving foreign shard references in your databases, once your project is established this value cannot be easily changed. The same ShardId type is used across all ShardSets . Note The database itself may not know what its own ShardId is. This sounds absurd until you realize that it is genuinely difficult to keep scores or even hundreds of database schemas and procedures in sync while preserving a programmatic ShardId value. Your continuous delivery tooling will keep detecting any differences and trying to overwrite them. Fortunately, your connection does know this and can set the ShardKey and ShardChild values correctly. The RecordId Like the ShardId, the RecordId is also an generic type, which can be one of the following: RecordId (and ChildId) Possible Data Types byte , char , DateTime , DateTimeOffset , decimal , double , float , Guid , int , long , sbyte , short , string , TimeSpan , uint , ulong , ushort If you have a data key that is not one of these types, the ShardKey and ShardChild objects will not know how to serialize the values. Unlike the ShardId, the data type of the RecordId (and/or ChildId) need not be universal; it can be different for each table. The ChildId The ShardChild type gets its name from the parent-child relationship that is typical of a two-column compound key. The ShardChild includes the RecordId of the ShardKey along with a new generic ChildId value. A ShardGrandChild could also be created to support three-level compound record keys, but, so far, there hasn’t been demand for that. The ChildId can be any of the types listed in the previous section and the data type can also vary from table to table. Using The ShardKey and ShardChild Having a single object represent a compound record key adds only a little convenience. The real value comes from three capabilities: The shard Mapping attributes and the External key string. ToString(), ToExternalString(), and FromExternalString() Calling ToString() on a ShardKey or ShardChild returns a list of the constituent values. The ToExternalKey() function serializes the ShardKey or ShardChild values into a URL-safe string. This string also has a small amount of tampering protection. As you would expect, the FromExternalString() function reverses the operation, returning a ShardKey or ShardChild instance from a valid string. The External String value can be used with, say, REST endpoints to specify a sharded record using a single argument. The MapShardKey and MapShardChild Attributes The MapShardKey and MapShardChild attributes map the shard information, record key, and (as appropriate) the child record value to a new ShardKey or ShardChild instance respectively. The simplest implementation is to simply add the MapShardKey or MapShardChild attribute and the type-appropriate MapTo attribute(s). SQL Server PostgreSQL [MapShardKey('c', \"@CustomerId\")] [MapToSqlInt(\"@CustomerId\")] public ShardKey<byte, int> CustomerKey { get; set; } [MapShardKey('c', \"CustomerId\")] [MapToPgInteger(\"CustomerId\")] public ShardKey<short, int> CustomerKey { get; set; } This example sets the property to a ShardKey instance with a DataOrigin of “c”, the ShardId to the value of the data connection, and the RecordId the “CustomerId” column or parameter value. The MapShardKey attribute’s first argument can be either a DataOrigin instance or a char from which a DataOrigin will be created. The second argument is the name of the data parameter or column. This name must exactly match the name in the data MapTo attribute. The MapShardChild attribute is nearly identical, except for the additional ChildId parameter: SQL Server PostgreSQL [MapShardChild('O', \"@OrderId\", \"@OrderItemId\")] [MapToSqlBigInt(\"@OrderId\")] [MapToSqlSmallInt(\"@OrderItemId\")] public ShardChild<byte, long, short> OrderItemKey { get; set; } [MapShardChild('O', \"OrderId\", \"OrderItemId\")] [MapToPgBigint(\"OrderId\")] [MapToPgInteger(\"OrderItemId\")] public ShardChild<short, long, int> OrderItemKey { get; set; } In both previous examples, the ShardId will be implicitly obtained from the connection’s ShardId. In the case of results that include then primary key column, this works well. However, when a data record references the primary key of a sharded table, the ShardId of the ShardKey or ShardChild must explicitly come from the database record. To do this, just add a ShardID parameter to the MapShard attribute and the additional MapTo data attribute: SQL Server PostgreSQL [MapShardKey('c', \"@CustomerShardId\", \"@CustomerId\")] [MapToSqlTinyInt(\"@CustomerShardId\")] [MapToSqlInt(\"@CustomerId\")] public ShardKey<byte, int> CustomerKey { get; set; } [MapShardChild('O', \"@OrderShardId\", \"@OrderId\", \"@OrderItemId\")] [MapToSqlTinyInt(\"@OrderShardId\")] [MapToSqlBigInt(\"@OrderId\")] [MapToSqlSmallInt(\"@OrderItemId\")] public ShardChild<byte, long, short> OrderItemKey { get; set; } [MapShardKey('c', \"CustomerId\")] [MapToSqlTinyint(\"CustomerShardId\")] [MapToPgInteger(\"CustomerId\")] public ShardKey<short, int> CustomerKey { get; set; } [MapShardChild('O', \"OrderShardId\", \"OrderId\", \"OrderItemId\")] [MapToPgSmallint(\"OrderShardId\")] [MapToPgBigint(\"OrderId\")] [MapToPgSmallint(\"OrderItemId\")] public ShardChild<short, long, short> OrderItemKey { get; set; } Null Values Because both ShardKey and ShardChild are structs, a variable or property of this type cannot be null. ShardKey and ShardChild objects are initialized to ShardKey.Empty or ShardChild.Empty respectively. If a ShardKey or ShardChild represents a database field that might be Null, the ShardKey or ShardChild property or variable should be wrapped in the Nullable<> type. The MapTo attribute will set the Nullable<ShardKey<>> or Nullable<ShardChild<>> property to null if any of the constituent database column values are Null. If the underlying type is not Nullable<> and the database value is Null, the Mapper with throw an error (except as described in the next paragraph). In most cases, a ShardKey or ShardChild represents a primary key, so a database Null value really represents a non-existent record. In this case, the desired behavior is probably to return the entire parent object as null. Marking the MapTo attribute(s) as required implements this behavior. When the required parameter is set, the ShardKey or ShardChild property does not need to be Nullable<> since a Null database value will return a null result object. ShardSets A “shard set” is a collection of databases with essentially identical schemas, each of which contain a segment of the data. Many — probably most — sharded applications will have only one ShardSet, but this supports contexts where multiple sharding plans exist. For example, User information might be sharded globally by datacenter location, while product availability information might be sharded by subsidiary (ok, this specious example might be better served via microservices; the point is that the framework does not preclude multiple ShardSets if you need them). The root injectable service is a ShardSets object, which is merely a collection of ShardSet instances. The ShardSets Class Hierarchy The ShardSets collection is the root of an object hierarchy. The child objects in the hierarchy are implemented as nested classes. This simplifies the implementation, but can also make declarations somewhat verbose. Nested classes ShardSets - the root collection, which provides access to any of the various sharding schemas. ShardSets.ShardSet - a collection of servers which have the same schema and different segments of data. ShardSets.ShardInstance - a shard (single data store) with one segment of data. Includes (optionally) separate read and write connections. ShardSets.DataConnection - A database connection to a shard. Accessing the ShardSets In .NET Core, the ShardSets collection is an injectable service. The instructions in the Configuration section can help you with setup. You can reference any ShardSet by name (i.e. a string key), which is also defined during configuration. Because it is unlikely that you would need to access more than one ShardSet in the same data access class, your class-level variable should capture only the relevant ShardSet. You can access a ShardSet by name (i.e. a string key value): SQL Server PostgreSQL public class SubscriberStore { private readonly SqlShardSets<string>.ShardSet _shardSet; private readonly ILogger<SubscriberStore> _logger; public SubscriberStore(SqlShardSets<string> shardSets, ILogger<SubscriberStore> logger) { _shardSet = shardSets[\"Subscribers\"]; _logger = logger; } public class SubscriberStore { private readonly PgShardSets<string>.ShardSet _shardSet; private readonly ILogger<SubscriberStore> _logger; public SubscriberStore(PgShardSets<string> shardSets, ILogger<SubscriberStore> logger) { _shardSet = shardSets[\"Subscribers\"]; _logger = logger; } } Querying a ShardSet There are two types of ShardSet queries: Queries on a particular shard - usually to obtain a specific record, like when you have a ShardKey. Queries across all shards - when you need a list or when don’t know the specific shard(s) to search. Querying a Shard Access a shard in the ShardSet collection using a ShardId key, just like you would with any other collection. The ShardId would typically be contained in a ShardKey or ShardChild. If you have implemented a solution using identity ranges, just call your custom resolver to get the shard index. Each shard has two data connections, exposed as Read property and a Write property. The Read and Write connection properties correspond to the read and write connections defined in your connection configuration . If you have both connections defined in your configuration, then the query will execute on the corresponding read or write connection; if only Read or Write is configured, it doesn’t matter which you use since they will both have the same connection. SQL Server PostgreSQL public async Task<Subscriber> GetSubscriber(ShardKey<byte, int> subscriberKey, CancellationToken cancellation) { var prms = new QueryParameterCollection() .AddSqlIntInputParameter(\"@SubId\", subscriberKey.RecordId); return await _shardSet[subscriberKey.ShardId].Read.MapOutputAsync<Subscriber>(\"ws.GetSubscriber\", prms, cancellation); } public async Task<Subscriber> GetSubscriber(ShardKey<short, int> subscriberKey, CancellationToken cancellation) { var prms = new QueryParameterCollection() .AddPgIntegerInputParameter(\"SubId\", subscriberKey.RecordId); return await _shardSet[subscriberKey.ShardId].Read.MapOutputAsync<Subscriber>(\"ws.GetSubscriber\", prms, cancellation); } Several database implementations — such as SQL Server Availability Groups or AWS Aurora PostgreSQL to name a couple of examples — enable a master server to handle both reads and writes and separate clone instances that can handle read-only traffic. Most applications have a greater percentage of reads than writes, so this is a great way to scale-out database access. However, there are two issues of concern: ArgentSea has no idea which stored procedures or functions update data and which are read-only, so it is left to the application developer to designate this by selecting the appropriate connection property (Read or Write). There is often some latency between the time that data is saved and when it is available from the read instance. This temporary data inconsistency can cause problems or confusion due to missing data. There are several architectural solutions to the latency-driven data inconsistency problem, such as intelligent caching, client observable collections, delayed retries, and retries on the Write connection. Due to the variations in environments, optimal solutions, and the challenge of simple determining when a missing record is really expected, ArgentSea does not attempt an automatic retry on the Write connection. To implement your own latency handling, you can easily implement an automatic retry using the Write connection after an unexpectedly missing record on the Read connection. In this example method we retrieve data by key value, so a missing record is unexpected and might be due to replication latency. The code assumes that the subscriber key has the “required” attribute set so that the Mapper returns a null object if the key is null. The resolution is to simply retry on the Write connection. var sub = await _shardSet[subscriberKey.ShardId].Read.MapReaderAsync<Subscriber>(\"ws.GetSubscriber\", prms, cancellation); // add automatic retry on write connection if subscriber is not found. if (sub is null) { // consider logging the retry on the write connection var sub = await _shardSet[subscriberKey.ShardId].Write.MapReaderAsync<Subscriber>(\"ws.GetSubscriber\", prms, cancellation); } return sub; } Tip Even if you are not using a scale-out strategy today, it would be a good idea to use the Read and Write properties as if you were. This would make a future migration to separate read and write instances a little easier. You might also consider using different database schemas for read-only and write-capable procedures or functions. This helps underline the importance of separating read-only activity to your data developers. And testing may be easier if each connection’s permissions is limited to the appropriate schema. There are several query methods, described briefly below and in more detail in the querying tutorial. The arguments for these query methods are described in the next section. RunAsync Executes a stored procedure without returning a result — other than an Exception if it is not successful. Presumably, this method would only be called on the Write connection but nothing prevents running a procedure on the Read connection. This method is available on individual shards, but not on the entire ShardSet. LookupAsync Executes a stored procedure and returns the value (string, number, etc.) of either the return result or (single) output parameter. This method useful to fetch a single value from the shard rather than an entire record. This method is also available on individual shards, but not on the entire ShardSet. ListAsync Executes a stored procedure and returns a list containing a Model object, one entry for each record in the result set. The objects are created using Mapping attributes. If the Model object does not have attributes, you can create a List using QueryAsync with a custom handler. This method is available on both individual shards and the entire ShardSet. Results across ShardSets are combined into a single list. QueryAsync , QueryFirstAsync , and QueryAllAsync Executes a stored procedure and returns a (potentially complex) result object from output parameters and/or result sets. The method can create an arbitrary result (List, Dictionary, Model, etc.) via a custom delegate that constructs the response. MapOutputAsync , MapOutputFirstAsync , and MapOutputAllAsync Uses the Mapper to build a result using output parameters. The Mapper can use DataReader results to build list properties. MapOutputAsync is found on individual shards; MapOutputFirstAsync and MapOutputAllAsync are on ShardSets and return the first non-null result, or a list of all non-null results, respectively. MapReaderAsync , MapReaderFirstAsync , and MapReaderAllAsync Also uses the Mapper to build a results, but does so through a single-row DataReader result, rather than output parameters. List properties of the object result can also be populated through additional result sets. Note Parallelized queries across a ShardSet use the Read connection. Writes should be managed on individual shards. Arguments Procedure (required) The name of the stored procedure, including the schema name. Parameters (required) In most cases this should be a QueryParametersCollection object. Technically, this argument can be any parameter collection, but the collections provided by ADO.NET are problematic: the DbParameterCollection is abstract, while the provider implementations (SqlParameterCollection and NpgsqlParameterCollection) can only be created by existing command objects. shardParameterOrdinal (optional) This parameter allows you to set a parameter to current ShardId value. For example, you might want to return a list of related records that do not exist on the current shard, but the database itself does not know its own shard number. Or perhaps the database does know its ShardId and, because mixing up ShardIds in your configuration would be catastrophic, you want to validate that the expected ShardId on the connection corresponds to the ShardId of the database (a practice that I follow). If set the argument to a value of zero or higher, ArgentSea will assign parameter at that (zero-based) index the value of the connection’s ShardId. If set to -1, no parameter will be assign a ShardId value. cancellationToken The cancellation token is used to cancel the query on all threads. Typically, you would pass the cancellation token from your MVC web method. resultHandler (optional) The QueryAsync method requires a method that knows how to convert the data results (output parameters and/or DataReader results) into an object instance. The result could be a Model, List, Dictionary, etc. The handler must have a method signature corresponding to the QueryResultModelHandler delegate. Because the ArgentSea Mapper includes method signature that can act as a QueryResultModelHandler delegate. The query methods that do not require this parameter assume the Mapper is being used. The generic result type must implement MapTo property attributes for the Mapper to function. TopOne Set this argument True if only one result is expected. For example, suppose you are searching a ShardSet for a User account matching a login. There should only be one match, so as soon as the first match is obtained you want to return the result object and abandon any remaining queries. Technically, when this argument is True, ArgentSea checks each shard query to see if it has a non-null Model result. If it finds one, it fires the cancellation token for any shard connection that has not yet completed, and returns the result. Of course, if the search conditions are not unique (which is difficult to enforce with sharded data), any duplicate result(s) will be lost."
  }
}